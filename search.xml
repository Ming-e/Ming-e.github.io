<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Unity】六边形、菱形的AStar（A*）算法及死路优化</title>
      <link href="/post/44f2b67e/"/>
      <url>/post/44f2b67e/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p>上一篇<a href="https://ming-e.space/post/1d428483/">一篇文章搞定AStar（A*）算法</a> 写了一下四边形的A<em>算法。但是在游戏开发中，战棋类游戏往往并不会采用四边形网格而是采用六边形或菱形网格，一方面六边形或菱形网格看上去更具美感，另一方面六边形或菱形网格可玩性比四边形网格更高。那么本篇再来写一写六边形、菱形网格的A</em>算法是如何实现的。</p><br><h2 id="六边形A-算法">六边形A*算法</h2><br><p>在开始实现发算法之前，要先弄明白六边形网格的地图应该如何去生成，因为算法也是基于地图的，没有一个正确的地图就无法对算法有一个正确的理解。</p><p>在四边形的A*算法中，把x，y分别加1减1就获取到了某点周围的4个邻接节点，代码是这样的：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AddNode(currX, currY + <span class="number">1</span>, xTo, yTo, currNode, openList);</span><br><span class="line">AddNode(currX, currY - <span class="number">1</span>, xTo, yTo, currNode, openList);</span><br><span class="line">AddNode(currX - <span class="number">1</span>, currY, xTo, yTo, currNode, openList);</span><br><span class="line">AddNode(currX + <span class="number">1</span>, currY, xTo, yTo, currNode, openList);</span><br></pre></td></tr></table></figure><p>但六边形有六条边，每个格子就有6个邻接节点，无论怎样去安排这六个点的坐标，都不能通过把x，y加1减1的方式全部都获取到。所以要生成一张六边形网格，首先就是要解决六边形网格的坐标问题。</p><p>不妨找一张六边形网格观察一下，会发现每行每列的格子都是交错排列的，如果逻辑坐标也能这样交错排列就完美的与网格对应上了。所以解决这个问题的方法就是把x坐标扩大2倍，形成奇排列或偶排列，y坐标不变。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/44f2b67e/1.webp" alt="AStar_Six"></p><p>这样一来获取邻接节点就很容易了</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FindDestNode(currX + <span class="number">1</span>, currY + <span class="number">1</span>, xTo, yTo, currNode, openList);<span class="comment">//右上</span></span><br><span class="line">FindDestNode(currX - <span class="number">1</span>, currY + <span class="number">1</span>, xTo, yTo, currNode, openList);<span class="comment">//左上</span></span><br><span class="line">FindDestNode(currX + <span class="number">1</span>, currY - <span class="number">1</span>, xTo, yTo, currNode, openList);<span class="comment">//右下</span></span><br><span class="line">FindDestNode(currX - <span class="number">1</span>, currY - <span class="number">1</span>, xTo, yTo, currNode, openList);<span class="comment">//左下</span></span><br><span class="line">FindDestNode(currX + <span class="number">2</span>, currY, xTo, yTo, currNode, openList);<span class="comment">//右</span></span><br><span class="line">FindDestNode(currX - <span class="number">2</span>, currY, xTo, yTo, currNode, openList);<span class="comment">//左</span></span><br></pre></td></tr></table></figure><p>不过，光是有了邻接节点A*算法还是不能正确的执行，因为与目标点的距离H的计算仍然不对。在四边形中，H值的计算是直接使用了两个点的坐标的差值的平方和来表示，但在六边形中，y轴的距离不是简单的差值。</p><p>这时就需要回忆起初中数学了：如图三个正六边形，ABC都是中心点，且AB = AC = BC = 2，求三角形ABC的高。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/44f2b67e/2.webp" alt="AStar_Six"></p><p>来，勾股定理给它勾一勾，2的平方减1的平方再开方，根号3嘛！所以六边形A*算法的H值计算，y方向的距离就需要乘以一个根号三。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">GetDistance</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">from</span>, <span class="built_in">int</span> to</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> yFrom = (<span class="keyword">from</span> - <span class="number">1</span>) / m_MapWidth;</span><br><span class="line">    <span class="built_in">int</span> xFrom = (<span class="keyword">from</span> - <span class="number">1</span>) % m_MapWidth * <span class="number">2</span> + yFrom % <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> yTo = (to - <span class="number">1</span>) / m_MapWidth;</span><br><span class="line">    <span class="built_in">int</span> xTo = (to - <span class="number">1</span>) % m_MapWidth * <span class="number">2</span> + yTo % <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> xDistance = Mathf.Abs(xTo - xFrom);</span><br><span class="line">    <span class="built_in">int</span> yDistance = Mathf.Abs(yTo - yFrom);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> xDistance * xDistance + yDistance * yDistance * <span class="number">3</span>;<span class="comment">//根号3 x 根号3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，现在一切准备就绪，来定几个障碍点跑一下试试。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/44f2b67e/3.gif" alt="AStar_Six"></p><p>完美！</p><br><h2 id="菱形A-算法">菱形A*算法</h2><br><p>其实和六边形没什么区别，还是把x坐标扩大2倍，H值计算就是y轴距离从根号3变回1而已。</p><br><h2 id="死路优化">死路优化</h2><br><p>有没有想过这两种情景：</p><ol><li class="lvl-3"><p>玩家在地图上点击了一个点，但这个点却是一个障碍点。</p></li><li class="lvl-3"><p>玩家在地图上点击了一个点，但很遗憾，这个点四面楚歌，并没有通往这个点的路线以上这两种情况，玩家操控的角色该如何行动？</p></li></ol><p>显然，在这两个前提下，A*算法不会得出结果，因为在之前的代码里，对于不可行走的格子直接就跳过检测了。没有路线，玩家角色自然就会巍然不动。</p><p>我的前上司曾对我说过，一个具有良好体验的游戏，应该做到”逢点击，必响应“，只是因为点击到了一个障碍点就不做出反馈，这实属是犯了大忌啊！</p><p>那么苦哈哈的程序员必须要优化：即使点击到了障碍甚至没有通路，也要让玩家角色移动到距离障碍点最近的点。</p><p>聪明伶俐的你一定已经发现了，之所以没有通路是因为目标点不可达，所以把目标点替换到它附近的可以到达的点不就行了吗？</p><p>既然我已经写到这了，那么这种方法肯定就是不可以的！</p><p>确实，当目标点不可达时，从目标点开始广度优先遍历，直到找到一个不是障碍的点来代替原来的目标点这种方法看起来可行，但是，如果代替点也是个空心的呢？它的周围也被障碍团团围住，那不还是死路一条？这样想下去就没完没了了，可能这个广度优先的替代法会执行到遍历完整个地图为止。</p><p>其实回过头重新仔仔细细的看一遍算法就会发现，之所以得不出路线的根本原因就是因为那些障碍点直接被跳过了，根本就没有机会被放进openList中等待检测，那么只要打破这个规则：即使目标点不可达，也要把它放进openList中去检测，不就能得到路线了吗？</p><p>回想我们的Dijkstra大师对我们教导：最短路径的求解是不断寻找移动消耗最低的点直到终点。</p><p>看到【移动消耗】这个词，你是否已经有了灵感？</p><p>没错，这个问题的终极解决办法就是：</p><ol><li class="lvl-3"><p>我们要打破铁律，我们要为底层劳苦大众发声，障碍点低人一等吗？障碍点也有进入openList的资格！</p></li><li class="lvl-3"><p>但障碍点终归是障碍点，在openList里它终归是个异类，即使允许它进入openList，它也是最后一个被检测的，只有实在没有其他选择的时候，A<em>才会垂怜它一下。把障碍点也放进openList，但它的移动消耗G，是无穷大！这样一来，在没有任何通路的情况下，A</em>会回头来检测从这些障碍点身上通过是否能到达终点，无论如何都会给玩家一条路走。</p></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FindDestNode</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> xTo, <span class="built_in">int</span> yTo, Node currNode, List&lt;Node&gt; openList</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x / <span class="number">2</span> &lt; m_MapWidth &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m_MapHeight)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> index = x / <span class="number">2</span> + y * m_MapWidth + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> toIndex = xTo / <span class="number">2</span> + yTo * m_MapWidth + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> mulity = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_MapData[index - <span class="number">1</span>] == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mulity = <span class="number">1000000</span>;<span class="comment">//如果是障碍点，把它的移动消耗G扩大一百万倍</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node temp = openList.Find(obj =&gt; obj.index == index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (temp == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = <span class="keyword">new</span> Node(index, currNode, (currNode.g + <span class="number">1</span>) * mulity, GetDistance(index, toIndex));</span><br><span class="line">            openList.Add(temp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp.isOpen &amp;&amp; temp.f &gt; currNode.g + <span class="number">1</span> + temp.h)</span><br><span class="line">        &#123;</span><br><span class="line">            temp.g = (currNode.g + <span class="number">1</span>) * mulity;</span><br><span class="line">            temp.f = temp.g + temp.h;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但路是有了，那回溯的时候不就把障碍点以及后面那些进不去的地方也算进来了吗？其实这个就更简单了，回溯的时候一但发现障碍点就把该障碍点以及前面的所有节点全部干掉就可以了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (currNode != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_MapData[currNode.index - <span class="number">1</span>] != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_QueuePath.Enqueue(currNode.index);</span><br><span class="line">        currNode = currNode.parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (m_QueuePath.Count &gt; <span class="number">0</span>)<span class="comment">//遇到障碍点则把之前入队的点全部出队</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_QueuePath.Dequeue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        currNode = currNode.parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来即使玩家点击到了障碍物也有路可走，真正做到了“逢点击，必响应”。</p><br><h2 id="结语">结语</h2><br><p>这几天A*也研究的差不多了，但是鄙人水平实在有限，代码效率并不是很高，只能期待以后再进步吧，祝大家新的一年不出bug，出了bug也能找到人背锅！</p><p>工程地址：<a href="https://github.com/WuWu03/AStar">A*算法Untiy工程</a></p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> A* </tag>
            
            <tag> 六边形 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity】一篇文章搞定AStar（A*）算法</title>
      <link href="/post/1d428483/"/>
      <url>/post/1d428483/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p>AStar（A*）算法，是一种在静态网格中求解最短路径直接有效的搜索方法。在游戏开发中，A<em>算法常应用于部分RPG游戏和策略战棋类游戏。对于Unity开发者来说，掌握A</em>算法也是十分有必要的。下面就来一步一步在Unity中实现A*算法。</p><br><h3 id="深度优先算法（DFS）、广度优先算法（BFS）、迪杰斯特拉算法（Dijkstra）">深度优先算法（DFS）、广度优先算法（BFS）、迪杰斯特拉算法（Dijkstra）</h3><br><p>在了解A<em>算法之前有必要先回顾一下深度优先算法（DFS）、广度优先算法（BFS）以及迪杰斯特拉算法（Dijkstra），这是理解和掌握A</em>算法的必要基础。</p><br><h4 id="深度优先算法（DFS）">深度优先算法（DFS）</h4><br><p>所谓深度优先，通俗一点解释就是：先选择一个方向头也不回的一条路走到黑，再回头从另一个方向又一条路走到黑，如此往复直到走遍整张图。</p><p>算法的基本流程是：</p><ol><li class="lvl-3"><p>获取给定起点周围未访问的临接节点</p></li><li class="lvl-3"><p>对这些临接节点进行递归，直到所有节点访问完毕</p></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartDFS</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">bool</span>[] visits = <span class="literal">null</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (visits == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        visits = <span class="keyword">new</span> <span class="built_in">bool</span>[map.Length * map[<span class="number">0</span>].Length];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= map.Length &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt;= map[<span class="number">0</span>].Length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> index = x + y * map.Length + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!visits[index - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            visits[index - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">            Debug.Log(<span class="string">&quot;(x:+&quot;</span> + x + <span class="string">&quot;,y:&quot;</span> + y + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">            StartDFS(x - <span class="number">1</span>, y, visits);<span class="comment">//左边的临接节点</span></span><br><span class="line">            StartDFS(x + <span class="number">1</span>, y, visits);<span class="comment">//右边的临接节点</span></span><br><span class="line">            StartDFS(x, y - <span class="number">1</span>, visits);<span class="comment">//下边的临接节点</span></span><br><span class="line">            StartDFS(x, y + <span class="number">1</span>, visits);<span class="comment">//上边的临接节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/1d428483/dfs.gif" alt="DFS"><br>        <br><br></p><p>上面我的访问优先级是左、右、下、上。</p><p>为了更好地进行理解，可以调换一下顺序，比如：上、右、下、左</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StartDFS(x, y + <span class="number">1</span>, visits);<span class="comment">//上</span></span><br><span class="line">StartDFS(x + <span class="number">1</span>, y, visits);<span class="comment">//右</span></span><br><span class="line">StartDFS(x, y - <span class="number">1</span>, visits);<span class="comment">//下</span></span><br><span class="line">StartDFS(x - <span class="number">1</span>, y, visits);<span class="comment">//左</span></span><br></pre></td></tr></table></figure><p><img src= "/images/lazyload.webp" data-lazy-src="/post/1d428483/dfs2.gif" alt="DFS"></p><br><h4 id="广度优先算法（BFS）">广度优先算法（BFS）</h4><br><p>而广度优先顾名思义就是优先访问周围的临接节点，像水流一样慢慢的向外扩张，直到走遍整张图。</p><p>算法的基本流程是：</p><ol><li class="lvl-3"><p>把给定起点入队</p></li><li class="lvl-3"><p>从队列中出队一个点</p></li><li class="lvl-3"><p>获取该点周围临接的未访问节点，并逐个入队</p></li><li class="lvl-3"><p>重复2，3步骤直到所有点访问完毕</p></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartBFS</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">bool</span>[] visits = <span class="keyword">new</span> <span class="built_in">bool</span>[map.Length * map[<span class="number">0</span>].Length];</span><br><span class="line">    Queue&lt;<span class="built_in">int</span>&gt; bfs = <span class="keyword">new</span> Queue&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> index = x + y * map.Length + <span class="number">1</span>;</span><br><span class="line">    bfs.Enqueue(index);</span><br><span class="line">    visits[index - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (bfs.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> currIndex = bfs.Dequeue();</span><br><span class="line">        <span class="built_in">int</span> currX = (currIndex - <span class="number">1</span>) % map.Length;</span><br><span class="line">        <span class="built_in">int</span> currY = (currIndex - <span class="number">1</span>) / map.Length;</span><br><span class="line"></span><br><span class="line">        m_QueuePoints.Enqueue(currIndex);</span><br><span class="line"></span><br><span class="line">        AddPoint(currX - <span class="number">1</span>, currY, bfs, visits);</span><br><span class="line">        AddPoint(currX + <span class="number">1</span>, currY, bfs, visits);</span><br><span class="line">        AddPoint(currX, currY - <span class="number">1</span>, bfs, visits);</span><br><span class="line">        AddPoint(currX, currY + <span class="number">1</span>, bfs, visits);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddPoint</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, Queue&lt;<span class="built_in">int</span>&gt; bfs, <span class="built_in">bool</span>[] visits</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt;= map.Length &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt;= map[<span class="number">0</span>].Length)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> index = x + y * map.Length + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!visits[index - <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            bfs.Enqueue(index);</span><br><span class="line">            visits[index - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/images/lazyload.webp" data-lazy-src="/post/1d428483/bfs.gif" alt="BFS"></p><br><h4 id="迪杰斯特拉算法（Dijkstra）">迪杰斯特拉算法（Dijkstra）</h4><br><p>然而不管是深度优先（DFS）还是广度优先（BFS）都只是在逐个遍历一张图，当图中有两点A和B并且要计算出从A点到B点的最短路线时应该如何去规划？于是Dijkstra提出了一种最短路径算法。</p><p>简单来说，Dijkstra算法就是在广度优先（BFS）的基础上，优先选择移动消耗最低的节点，并在广度优先（BFS）的遍历过程中逐步累加该点周围临接节点的移动消耗，直到找到目标点为止。</p><p>算法的基本流程是：</p><ol><li class="lvl-3"><p>把给定起点入队，设置该点移动消耗为0</p></li><li class="lvl-3"><p>出队一个点，获取该点周围可以移动的临接节点，然后检测这些临接节点是否被访问过</p></li><li class="lvl-3"><p>若已经被访问过，检测当前点移动到该临接节点的移动消耗，是否比该临接节点的移动消耗更低，并对该临接节点的移动消耗进行更新</p></li><li class="lvl-3"><p>若没有访问过，则累加该临接节点的移动消耗</p></li><li class="lvl-3"><p>从所有节点中选择一个移动消耗最低并没有被访问过的点并把该点入队</p></li><li class="lvl-3"><p>重复2，3，4，5直到找到目标点。</p></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartDijkstra</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Queue&lt;<span class="built_in">int</span>&gt; dijkstra = <span class="keyword">new</span> Queue&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    <span class="built_in">bool</span>[] visits = <span class="keyword">new</span> <span class="built_in">bool</span>[m_MapWidth * m_MapHeight];<span class="comment">//访问列表</span></span><br><span class="line">    <span class="built_in">int</span>[] dis = <span class="keyword">new</span> <span class="built_in">int</span>[m_MapWidth * m_MapHeight];<span class="comment">//所有点的移动消耗</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; dis.Length; i++)<span class="comment">//初始为无穷大</span></span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] = <span class="built_in">int</span>.MaxValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> currNode = x + y * m_MapWidth + <span class="number">1</span>;</span><br><span class="line">    dis[currNode - <span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//起点的移动消耗为0</span></span><br><span class="line">    dijkstra.Enqueue(currNode);<span class="comment">//起点入队</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (dijkstra.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        currNode = dijkstra.Dequeue();</span><br><span class="line">        m_QueuePoints.Enqueue(currNode);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currNode == m_MapWidth * m_MapHeight)<span class="comment">//目标节点（这里设置第一个点为起点，最后一个点为终点）</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        visits[currNode - <span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> currX = (currNode - <span class="number">1</span>) % m_MapWidth;</span><br><span class="line">        <span class="built_in">int</span> currY = (currNode - <span class="number">1</span>) / m_MapWidth;</span><br><span class="line"></span><br><span class="line">        FindDestNode(currX, currY + <span class="number">1</span>, visits, dis[currNode - <span class="number">1</span>], dis, m_Nodes[currNode - <span class="number">1</span>]);</span><br><span class="line">        FindDestNode(currX, currY - <span class="number">1</span>, visits, dis[currNode - <span class="number">1</span>], dis, m_Nodes[currNode - <span class="number">1</span>]);</span><br><span class="line">        FindDestNode(currX - <span class="number">1</span>, currY, visits, dis[currNode - <span class="number">1</span>], dis, m_Nodes[currNode - <span class="number">1</span>]);</span><br><span class="line">        FindDestNode(currX + <span class="number">1</span>, currY, visits, dis[currNode - <span class="number">1</span>], dis, m_Nodes[currNode - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> minDisNode = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">int</span> tempDis = <span class="built_in">int</span>.MaxValue;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; dis.Length; j++)<span class="comment">//从所有节点中选择一个移动消耗最低且没有被访问过的点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visits[j] &amp;&amp; dis[j] &lt; tempDis)</span><br><span class="line">            &#123;</span><br><span class="line">                minDisNode = j;</span><br><span class="line">                tempDis = dis[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (minDisNode &gt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dijkstra.Enqueue(minDisNode + <span class="number">1</span>);<span class="comment">//入队</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; dis.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visits[i])</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(dis[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FindDestNode</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">bool</span>[] visits, <span class="built_in">int</span> currDis, <span class="built_in">int</span>[] dis, Node currNode</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; m_MapWidth &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m_MapHeight)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> index = x + y * m_MapWidth + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_MapData[index - <span class="number">1</span>] != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!visits[index - <span class="number">1</span>])<span class="comment">//没有访问过</span></span><br><span class="line">            &#123;</span><br><span class="line">                dis[index - <span class="number">1</span>] = currDis + m_Map[index - <span class="number">1</span>];<span class="comment">//累加移动消耗</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (dis[index - <span class="number">1</span>] &gt; currDis + m_Map[index - <span class="number">1</span>])<span class="comment">//已访问，但当前路径的移动消耗更低</span></span><br><span class="line">            &#123;</span><br><span class="line">                dis[index - <span class="number">1</span>] = currDis + m_Map[index - <span class="number">1</span>];<span class="comment">//更新移动消耗</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码虽然可以计算出从给定起点到终点的最少移动消耗，但仍然无法获取移动的路线，为了获得移动路线，要在此基础上增加回溯。</p><p>简单粗暴的方法就是使用一个链表把走过的路线链起来，等算法结束再从终点往起点回溯即可得到移动路线。</p><p>先声明一个链表</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> index;</span><br><span class="line">    <span class="keyword">public</span> Node parent;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span>(<span class="params"><span class="built_in">int</span> index, Node parent</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_Nodes = <span class="keyword">new</span> Node[m_MapWidth * m_MapHeight];</span><br></pre></td></tr></table></figure><p>在处理移动消耗时把当前点和临接节点进行链接</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!visits[index - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">    dis[index - <span class="number">1</span>] = currDis + m_Map[index - <span class="number">1</span>];</span><br><span class="line">    m_Nodes[index - <span class="number">1</span>] = <span class="keyword">new</span> Node(index, currNode);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dis[index - <span class="number">1</span>] &gt; currDis + m_Map[index - <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">    dis[index - <span class="number">1</span>] = currDis + m_Map[index - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在算法结束后增加回溯</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Node node = m_Nodes[currNode - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (node != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line">    m_QueuePath.Enqueue(node.index);</span><br><span class="line">    node = node.parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/images/lazyload.webp" data-lazy-src="/post/1d428483/dijkstra.gif" alt="Dijkstra"></p><br><h3 id="AStar（A-）算法">AStar（A*）算法</h3><br><p>终于进入了本篇的正题。其实A*算法就是对Dijkstra算法的优化，在Dijkstra中每一步只计算移动消耗，这导致在向终点递进的过程中访问到许多无用节点，当地图中没有障碍时，甚至可能要把所有节点全访问到才得出结果。这显然不是一种最优解。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/1d428483/dijkstra2.gif" alt="Dijkstra"></p><p>于是A<em>算法在Dijkstra算法的基础上引入一个当前点到终点的距离H，然后使F = 移动消耗G+距离H，也就是A</em>大名鼎鼎的F=G+H公式；再引入一个Open列表和Close列表，每次出队时把该节点从Open列表中移除并加入到Close列表，每次进行节点筛选时只从Open列表中选择一个F最小的节点入队。这使得A*算法能在访问更少节点的情况下找到通往目标点的最短路径。</p><p>算法的基本流程是：</p><ol><li class="lvl-3"><p>把给定起始点入队，该点G = 0，计算该点到终点的距离H后使该点的F=G+H</p></li><li class="lvl-3"><p>把起始点加入Open列表</p></li><li class="lvl-3"><p>出队一个节点，并把该节点从Open列表中移除，再加入Close列表中</p></li><li class="lvl-3"><p>获取当前节点周围可以移动的临接节点，并检测这些临接节点是否在Open列表中</p></li><li class="lvl-3"><p>若已存在于Open列表，检测当前点移动到该临接节点的移动消耗，是否比该临接节点的移动消耗更低，并对该临接节点的移动消耗G进行更新，重新计算该点的F=G+H</p></li><li class="lvl-3"><p>若不在则累加该临接节点的移动消耗即G = G+1，计算该点到终点的距离H，使该点的F=G+H，然后加入到Open列表中</p></li><li class="lvl-3"><p>从Open列表中选择一个F值最低的节点入队</p></li><li class="lvl-3"><p>重复3，4，5，6，7直到Close列表中存在目标点</p></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Node</span> : <span class="title">IComparable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> index; <span class="comment">//节点编号</span></span><br><span class="line">    <span class="keyword">public</span> Node parent;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> f;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> g;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> h;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isOpen;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span>(<span class="params"><span class="built_in">int</span> index, Node parent, <span class="built_in">float</span> g, <span class="built_in">float</span> h</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.index = index;</span><br><span class="line">        <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        <span class="keyword">this</span>.g = g;</span><br><span class="line">        <span class="keyword">this</span>.h = h;</span><br><span class="line">        <span class="keyword">this</span>.f = g + h;</span><br><span class="line">        <span class="keyword">this</span>.isOpen = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">CompareTo</span>(<span class="params"><span class="built_in">object</span> obj</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node node = obj <span class="keyword">as</span> Node;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node.f == <span class="keyword">this</span>.f)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.g &gt; node.g ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.f &gt; node.f ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartAStar</span>(<span class="params"><span class="built_in">int</span> xFrom, <span class="built_in">int</span> yFrom, <span class="built_in">int</span> xTo, <span class="built_in">int</span> yTo</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Queue&lt;Node&gt; astar = <span class="keyword">new</span> Queue&lt;Node&gt;();</span><br><span class="line">    List&lt;Node&gt; openList = <span class="keyword">new</span> List&lt;Node&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> indexFrom = xFrom + yFrom * m_MapWidth + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> indexTo = xTo + yTo * m_MapWidth + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    astar.Enqueue(<span class="keyword">new</span> Node(indexFrom, <span class="literal">null</span>, <span class="number">0</span>, GetDistance(indexFrom, indexTo)));</span><br><span class="line"></span><br><span class="line">    Node currNode = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (astar.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        currNode = astar.Dequeue();</span><br><span class="line">        m_QueuePoints.Enqueue(currNode);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (currNode.index == indexTo)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        currNode.isOpen = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!openList.Contains(currNode))</span><br><span class="line">        &#123;</span><br><span class="line">            openList.Add(currNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Tiled tiled = TiledMapMgr.instance.GetGridByIndex(currNode.index);</span><br><span class="line">        tiled.txtRightBottom.text = currNode.h.ToString();</span><br><span class="line">        tiled.txtLeftTop.text = currNode.f.ToString();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> currX = (currNode.index - <span class="number">1</span>) % m_MapWidth;</span><br><span class="line">        <span class="built_in">int</span> currY = (currNode.index - <span class="number">1</span>) / m_MapWidth;</span><br><span class="line"></span><br><span class="line">        AddNode(currX, currY + <span class="number">1</span>, xTo, yTo, currNode, openList);</span><br><span class="line">        AddNode(currX, currY - <span class="number">1</span>, xTo, yTo, currNode, openList);</span><br><span class="line">        AddNode(currX - <span class="number">1</span>, currY, xTo, yTo, currNode, openList);</span><br><span class="line">        AddNode(currX + <span class="number">1</span>, currY, xTo, yTo, currNode, openList);</span><br><span class="line"></span><br><span class="line">        Node minDistanceNode = openList.FindAll(node =&gt; node.isOpen).Min();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (minDistanceNode != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            astar.Enqueue(minDistanceNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (currNode != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_QueuePath.Enqueue(currNode.index);</span><br><span class="line">        currNode = currNode.parent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddNode</span>(<span class="params"><span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> xTo, <span class="built_in">int</span> yTo, Node currNode, List&lt;Node&gt; openList</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; m_MapWidth &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m_MapHeight)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> index = x + y * m_MapWidth + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">int</span> toIndex = xTo + yTo * m_MapWidth + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_MapData[index - <span class="number">1</span>] != <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Node temp = openList.Find(obj =&gt; obj.index == index);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (temp == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = <span class="keyword">new</span> Node(index, currNode, currNode.g + <span class="number">1</span>, GetDistance(index, toIndex));</span><br><span class="line">                openList.Add(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (temp.isOpen &amp;&amp; temp.g &gt; currNode.g + <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp.g = currNode.g + <span class="number">1</span>;</span><br><span class="line">                temp.f = temp.g + temp.h;</span><br><span class="line">                temp.parent = currNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">int</span> <span class="title">GetDistance</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">from</span>, <span class="built_in">int</span> to</span>)<span class="comment">//计算起点到终点的距离，使用平方和即可</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> xFrom = (<span class="keyword">from</span> - <span class="number">1</span>) % m_MapWidth;</span><br><span class="line">    <span class="built_in">int</span> yFrom = (<span class="keyword">from</span> - <span class="number">1</span>) / m_MapWidth;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> xTo = (to - <span class="number">1</span>) % m_MapWidth;</span><br><span class="line">    <span class="built_in">int</span> yTo = (to - <span class="number">1</span>) / m_MapWidth;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> xDistance = Mathf.Abs(xTo - xFrom);</span><br><span class="line">    <span class="built_in">int</span> yDistance = Mathf.Abs(yTo - yFrom);</span><br><span class="line">    <span class="keyword">return</span> xDistance * xDistance + yDistance * yDistance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/images/lazyload.webp" data-lazy-src="/post/1d428483/astar1.gif" alt="Astar"></p><p>不难看出，同样的地图A*算法访问了更少的节点就找到了最短路径。而去掉障碍后更是直接就找到了终点，效率提高了无数倍。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/1d428483/astar2.gif" alt="Astar"></p><p>值得一提的是，当Open列表中存在相同F值的节点时，应选择G值最高的点，这符合A*算法始终朝终点扩张的思想。</p><br><h2 id="结语">结语</h2><br><p>以上是对A*算法的一次探究和实现，所有代码和动态效果全部手撸，累死啦。</p><p>工程地址：<a href="https://github.com/WuWu03/AStar">A*算法Unity工程</a></p><p>有错误和不足欢迎指出。</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> A* </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中秋</title>
      <link href="/post/5863bcd5/"/>
      <url>/post/5863bcd5/</url>
      
        <content type="html"><![CDATA[<p>春节后我选择离开广州回到南宁，而今天，这个中秋节，就是我人生中第一个不用赶车回家的中秋。虽然昨天一夜没睡，早上还是早早就起来了，打开电脑的时候突然觉得自己20多岁的人，还像个小学生一样因为放假而兴奋不已实在是有些丢脸。</p><br><p>吃完早餐9点左右开始帮麻麻准备午餐，结果切辣椒切的手眼烧灼刺痛。回想自己一个人在广州的时候，每逢周末我也经常自己搞点东西吃，但我的刀工却一直没有练出来，其原因就是我这个人太过于胆小怕事，以至于切东西都小心翼翼的，一顿饭经常搞一个上午。而今天我也毫无意外只做出来一个啤酒鸭，其他的都是麻麻做的。</p><br><p>中午和爸妈一起吃饭陪我爸小酌了一口，吃过饭打开电视，爸爸开始感叹起越活越孤独。从爷爷过世后，各家亲戚逐渐断了联系，也不知从何时起，逢年过节就只有我们一家三口了，而像我小时候那种一大家子人回爷爷家过年过节的景象也越来越模糊。</p><p>我说可能这就是这个社会的主旋律吧，我爸摇摇头若有所思。</p><p>我走到阳台，外面人头攒动仿佛一锅沸水，有些东西确实已经离我们远去了。</p><br><p>但不管怎么说，好不容易放个假还是要嗨皮一下的，明天去弄烤炉木炭整点烧烤77吧。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中秋节 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重玩《伊苏VIII 丹娜的陨涕日》的一些感叹</title>
      <link href="/post/a4eeba10/"/>
      <url>/post/a4eeba10/</url>
      
        <content type="html"><![CDATA[<p>我上一次玩<a href="https://store.steampowered.com/app/579180/Ys_VIII_Lacrimosa_of_DANA/">《伊苏VIII》</a>是2019年，但是没有打出真结局成就也没刷，主线赶完就没碰了。所以我这次从开档那一刻就决定所有东西一个不落，从最初的不知名海岸到最后的天之道，每个地图的怪全清，采集点全部采集，宝箱全开，npc挨个对话一遍接一遍，时时刻刻盯着委托栏。终于在最后一战前，用时80小时达成大地图综合探索100％，全人物满好感度，全物品，全委托。</p><br><p>钓鱼，在我没有放过任何一个钓鱼点的情况下，最后还是差2条鱼，但是总体来说我钓鱼的运气还比较好，2条鱼很容易就收尾了；另外还有怪物图鉴，我是通关后回到最后一战才去清的，游玩的后期还是有些心急了，耶坦尼亚王国的蛤蟆和几个不死怪没有杀到，不得已看了攻略，有些丢脸，但也无伤大雅。</p><br><p>主要还是丹娜线的故事太过于突出，即使是第二次玩依然忍不住想看后续的故事情节，好几次都差点忘记探索直奔黄叹号了。</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/a4eeba10/adol.webp" alt="亚特鲁和丹娜"></p><br><p>从亚特鲁漂流到赛连岛，一步一步寻找活着的伦巴底号乘客，到不同背景不同身份的大家为了生存，为了回家，统一战线建立漂流村对抗频频来袭的古代生物，伴随着亚特鲁对赛连岛探索的深入，这座被遗忘的孤岛、那些破败的遗迹以及那个巨大的始生代大洞，这一切所埋藏的秘密也渐渐浮现。而一切的开端，亚特鲁梦中的少女——丹娜，一个从小具有强大预言能力，却连自己母亲都没能保护的女孩；一个曾经被所有人敬奉的巫女，最终又被众人唾弃的魔女；一个违抗神明意志，孤独坚毅地将希望向千万年后传递的少女，经历了跨越时间的灵魂互换，与亚特鲁共同完成了绝海孤岛上的冒险。</p><br><p>若你的人生中，也曾体会过一场流星般的相遇，那或许，这个故事恰恰能撩动你心头未能释怀的瑶琴。<a href="https://store.steampowered.com/app/579180/Ys_VIII_Lacrimosa_of_DANA/">《伊苏VIII》</a>并不是宣教人类应该怎么去面对无法违抗的命运，而是用长达数十个小时的游戏时间，讲述了丹娜——这位温柔、坚强的少女，怎样大声地面对神明的意志，说出“我们一路走来所做的事情……我绝不会让它成为错误！”</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/a4eeba10/dana.webp" alt="丹娜（老婆）"></p><br><p>当然，相信不相信所谓的命运存在，对感悟这个故事其实并不重要，丹娜的光芒，在于至始至终无论怎样的悲伤、背叛、别离，都未能动摇她的善意和勇气，她是未曾恋爱的少女，但她却将她的爱与希望留给了未来。坚定的去做自己想要做的、应当做的，不正是在这蹉跎人生，匆匆忙忙的你我常常忘却的初心吗。可怕的并非命运，而是在日复一日的麻木中已经习惯了放弃。</p><br><p>一如<a href="https://store.steampowered.com/app/579180/Ys_VIII_Lacrimosa_of_DANA/">《伊苏VIII》</a>开篇所言：我们并非神的道具，而是有生命有意志的存在，即便如此，却依旧碰到超越人智的命运到访的瞬间，这种时候你会怎么做呢？那纵然置身于极限的境地却依然秉持意志和尊严的姿态是那么的美丽，我渴望着也能成为那样的存在，因而即使到了数十年后的现在，我仍情不自禁地对【她】怀有敬畏——亚特鲁.克里斯汀。</p><br><p>不得不说，这一场冒险实在是太充实了，以至于看完真结局后巨大的落寞感油然而生。赛连岛、耶坦尼亚王国、擎始巨树以及俄刻阿诺斯，跨越千万年，一切都在丹娜和亚特鲁最后的拥抱中烟消云散了。</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/a4eeba10/6.webp" alt="曾经的耶坦尼亚"></p><br><p>而当我重新读档准备再战地下圣堂的时候，好死不死的bgm是一首萨克斯曲，在我攻略地下圣堂的几个小时里，这首bgm仿佛无时无刻的不在提醒着我：“这是最后的迷宫了，打完就要和丹娜真正的告别了”，让我心烦意乱，不能专心的和怪物缠斗，采集点也反复清了好几次。</p><br><p>旧地下圣堂作为<a href="https://store.steampowered.com/app/579180/Ys_VIII_Lacrimosa_of_DANA/">《伊苏VIII》</a>的最后一个迷宫，可以说完美的为这个故事画上了句号。bgm也透露着一股淡淡的悲伤，结合旧地下圣堂破败不堪的场景，展现了耶坦尼亚最后的落幕。如果说王都艾居亚斯荒凉的场景让造访于此的众人对丹娜的世界还有一丝奢望的话，那旧地下圣堂就是在狠狠地诉说着一个事实：一切都结束了，耶坦尼亚也好，丹娜也好，一切都已经不复存在。毕竟连这个耶坦尼亚传承数千年为了守护这个国家、这个时代的最神圣的地下圣堂都已化为尘土，普通人类又能做什么呢？<a href="https://store.steampowered.com/app/579180/Ys_VIII_Lacrimosa_of_DANA/">《伊苏VIII》</a>的故事从圣者乌努列斯建立耶坦尼亚开始，由旧地下圣堂宣布走向终结，耶坦尼亚终究不过是一堆废墟，丹娜终究只是故人。</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/a4eeba10/5.webp" alt="始生代大洞"></p><br><p>值得一提的是，我们的红发色魔——大冒险家亚特鲁·克里斯汀依然不负众望，毫无意外的对他身边的女性展开凶猛的攻势：一开场便把贵族大小姐看了个光，人妻主妇直呼爱上红发色魔，御姐铁匠大喊终于有人把自己当女人对待，修女小姐更是被感动到在山上就直接撕烂裙子给红发色魔欣赏大腿，两个萝莉每天缠着红发色魔捉迷藏，我们的巨树巫女丹娜，也声称对红发色魔不离不弃，永不忘怀。</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/a4eeba10/4.webp" alt="红发色魔的朋友们"></p><br><p>最后，也请让我正式跟丹娜做个告别吧：谢谢你，再见了！</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/a4eeba10/dana2.webp" alt="祭祀欧嘉、巫女丹娜、王女莎莱（三个老婆）"></p><br><p>待我重整旗鼓，<a href="https://store.steampowered.com/app/1732330/IX/">《伊苏IX 蒙斯托尔姆·诺克斯》</a>，见！</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
            <tag> 伊苏 </tag>
            
            <tag> 亚特鲁 </tag>
            
            <tag> 丹娜 </tag>
            
            <tag> JRPG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白鹭科技竟然倒闭了 w(ﾟДﾟ)w</title>
      <link href="/post/cc0a5cb2/"/>
      <url>/post/cc0a5cb2/</url>
      
        <content type="html"><![CDATA[<p>前段时间电脑寄了，好在后面又慢慢恢复了。这几天又想起了我做了一半的<a href="https://www.bilibili.com/video/BV1744y1h7xN">SD快打复刻</a>想继续做后面几个Boss，打开工程后发现没装龙骨的编辑器，遂又打开浏览器准备到龙骨的官网下载安装。</p><br><p>输入官网链接，浏览器转了良久转出来个404，我一开始还以为网络问题又把加速器也打开了，确认Github、Google、YouTube都能正常访问以后我又进了一次龙骨官网，结果还是404。</p><br><p>这下我不淡定了，官网换地址了还是公司倒闭了？我又在贴吧、知乎、微博反复横跳，最后跳转到知乎的一个白鹭引擎的问题上去了，不过在这个问题的推荐列表里我看到一个<a href="https://www.zhihu.com/question/522093368/answer/2801488584">“白鹭Egret官方是不是不行了？”</a>的问题，进去看了里面的回答我才知道，白鹭科技2022年7月就破产了，2023年服务器就停了。</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/cc0a5cb2/1.webp" alt="白鹭科技"></p><br><p>这图是白鹭科技的老板发的内部邮件，字里行间描述的细节不知是真是假，但白鹭科技总归是倒闭了。</p><br><hr><br><p>站在一个打工人的角度，我确实没有惋惜同情的必要，毕竟全国每天倒闭的公司都多如牛毛，我一个普通老百姓过好自己日子就好。但作为一个闲着没事就折腾折腾游戏的码农来说，我还是挺可惜白鹭的技术的。</p><br><p>Erget引擎我一天都没有用过，不过龙骨动画我是实打实的用它做了一套东西出来，站在客户的角度来说，龙骨真的很好用，很多贴心的小功能比如洋葱皮、辅助线等等都比spine更人性化，它的运行库也更简单易用，最关键的是它还免费，做2D游戏用龙骨就是最佳选择，如果是独立游戏更加是不二之选。</p><br><p>一想到这么好的工具最后竟然以这种方式黯然收场心里就不是滋味——白鹭科技倒闭了，像龙骨这样造福行业的工具以后应该也不会再有了，实在是可惜啊。</p><br><p>回想我在这个行业也没有多久，我也没有见过前辈们说的那个“鼎盛”的游戏行业，但从白鹭科技估值25亿这条曾经的新闻来看，当年的白鹭科技也是行业翘楚，如今人去楼空不复往日辉煌，就如同这个行业一样“英雄迟暮”。</p><br><p>而白鹭科技的结局也是一部分游戏公司的缩影，难免让人唏嘘。</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 龙骨 </tag>
            
            <tag> DragonBones </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>只有硬盘受伤的世界完成了T_T</title>
      <link href="/post/e696fffd/"/>
      <url>/post/e696fffd/</url>
      
        <content type="html"><![CDATA[<p>这一切都要从618升级配件开始说起。</p><p>5.31晚上我加了一块2t固态，然后就升起了升级配件的欲望，于是显卡6700xt幻影电竞换6800xt花嫁，散热海盗船h150i精英版换利民aqua360，风扇海盗船ll120换利民cws，主板华擎x570太极雷蛇限定版换华硕b550吹雪，cpu5800x换5950x。</p><p>就是这套东西给我干破防了，拆机又装机花了3个小时，结果组完了玩《杀手3》全高特效显卡直接给我干到结温99度，cpu70多度，风扇吵的像进了鸡窝一样，尤其是花嫁滋滋滋的磨牙声最为致命。💔</p><p>而我原本的配件用了2年多了，陪我玩了许多大作，2k全高特效我见过最高温度就是地铁离去，有70度左右，稍微有点吵，像杀手这种老游戏根本听不见任何噪音的。</p><p>硬着头皮用了几天，6.5日上午还是选择了全部退货，又拆机又装机。</p><p>然而拆机装机只是小事，我的移动硬盘在我重装系统的时候我脑子抽了看错了还是点错了反正手和脑有一个是废了，竟然被我删除了分区。😬等我意识到的问题的严重性的时候我慌了，脑子立刻浮现出一系列挽救方案：重建分区→进pe→easyrecovery恢复数据。</p><p>结果我竟然装了迅雷，好死不死他在我重新分完区的瞬间建立一个《迅雷下载》的文件夹把硬盘给覆盖了，我紧张的打开easyrecovery扫了一遍果然没有发现任何数据，这下我彻底破防了，收藏了很多小姐姐就这么没了，还有我的壁纸3000+张，横屏竖屏还分了类的，最主要的是我的博客也在里面。</p><p>6.5日下午，电脑已经恢复了海盗船那套东西，仍然非常的安静，看上去似乎没有经理过这场闹剧，那些配件也已经全部退回去了仿佛没有在家里出现过，而我人呆在那里，双眼失去高光：只有硬盘受伤的世界完成了。</p><p>不如说，这是个只有我受伤的世界。😞</p><p>数据虽然没了，但是博客却不能任由它废掉，我又开始了漫长的重做博客的历程，经过了大半个月的重新搭建、重新魔改、重写博文，今天博客终于恢复了原貌，我又能愉快写博客了。</p><p>所以说没事不要折腾电脑，折腾电脑要把硬盘拔掉，何况我的配置本来就足够用了。😅</p><p>最后上遗照追悼一下那年老色衰的花嫁吧，还有利民的狗屁aqua360和cws，这几样虽然便宜，但是性能是真不行。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/e696fffd/1.webp" alt="花嫁"></p><p>海盗船和华擎丑了点，但是堆料是真堆，满载都能做到不吵人。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/e696fffd/2.webp" alt="海盗船"></p><p>所以对于硬件来说，好看不中用=废品。👎</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 装机 </tag>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>font-spider字体裁剪</title>
      <link href="/post/49236d55/"/>
      <url>/post/49236d55/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p>无论是网站还是游戏，字体优化都是不得不做的一项工作。往往漂亮的字体都要占用不小的空间，甚至有时还要支持多国语言。在不能更换字体的前提下，只能通过裁剪字体以达到减小字体占用空间的目的。以本站字体为例，用FontCreator打开字体稍作浏览就发现该字体支持日、简中、繁中、英还有所有符号，而且中文里还有非常多的生僻字，这使得这款字体的容量达到了10M，非常影响网站的加载速度，字体问题亟待解决。</p><br><h2 id="裁剪字体">裁剪字体</h2><br><p>要进行裁剪字体的工作，首先要知道有哪些文字是无用的，但字体所包含的文字浩如烟海，不可能一一辨别文字是否无用。这时可以反向思考一下：想知道哪些文字无用比较困难，那反过来知道哪些文字有用是否更加容易？</p><br><h2 id="GB2312字符集">GB2312字符集</h2><br><p>GB2312是中国国家标准的简体中文字符集。它所收录的汉字已经覆盖99.75%的使用频率，基本满足了汉字的计算机处理需要。在中国大陆和新加坡获广泛使用。GB2312收录简化汉字及一般符号、序号、数字、拉丁字母、日文假名、希腊字母、俄文字母、汉语拼音符号、汉语注音字母，共 7445 个图形字符。包括6763个汉字，其中一级汉字3755个，二级汉字3008个(以上内容来自百度百科）。</p><p>GB2312标准字库（6763个）包含中文字符如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">灞爨夔肇羹回盥龆曦寰囡鼻接祁树氚圜灌囔屦训幕犹电杰师永印品一丁七万三上下不与专且世丙业东丝丢两严个中丰临为主举么义之乐乘九也习书买乱了争</span><br><span class="line">事二于云互五些亡交产享京亮亲人什仅今介仍从仔他付代令以仪们仰件价任份企休众优伙会伞传伤伪伴似但位低住体何余作你佳使例供依侧侵便保信修俱候</span><br><span class="line">借值假偏做停健偿储像儿允元充先光克免党入全八公六共关兴其具典养兼内册再冒军农冬冰冲决况冷冻净准减几凡凤凭凰凸凹出击刀分切划列则创初删判利</span><br><span class="line">别到制刷券刹前剧剩剪副力办功加务动助努劫劳势勤勾勿包化北匙匹区医匿十升午卉半华协卓单卖南博占卡卫危即卷卸厂厅历压厘原厨去参又及友双反发取</span><br><span class="line">受变叠口句另只叫可台史右叶号司各合同名后向吗吞否吧含听启呈告员周味呼命和咨咪哆响哒哔哨哩哪唤售唯唱商善喜嘟器四因团围固国图圆圈圣在地圳场</span><br><span class="line">圾址均坏坐块坛坡垃型城域基塑填境增壁士声处备复夏夕外多夜够大天太失头夹奇奏奕奖套女好如妇妥妨姆始姓姿娱媒子存学孩宁它宅宇守安官定宜宝实宠</span><br><span class="line">客宣室宫害宵家容密富寒寸对寻导寿封射将尊小少尖尘尚尝尤就尺尼尽尾局层居屏展属山崩巡巢工左巧差己已巴币市布帐帖带帮常幅干平年并幻广床序库应</span><br><span class="line">底店府废度座康延建廿开异弃式引张弧弱弹强归当录形彩影往征径待很律得循微德心必忆志忘忙忧快怀态怎怕急性总恒恢息恶恼悄您悬情惊惠惩惯想意感愿</span><br><span class="line">慎慢慧懂戏成我或战截戴户房所才打托执扫扬扰批找承技投抖折抛护报披抬抹拂担拆拉拍拒拔拖招拜拟拦拨择括拼持挂指按挑挡挤挪振捂捆损换据捷授掉排</span><br><span class="line">探控推措掷揉描提插搏搜携摄摆摔摩摸撬播撰擅操擎支收改攻放政故效敏教散敬数敲整文斑斗料断斯新方施旁旅旋无日旦旧旨早时明易星映春是昵显晒晓晚</span><br><span class="line">普景晰晴智暂暑暖暗暴曲更替最月有服朗期木未末本术杀杂权束条来松板极析林果架某柜查标栏校样核根格框案桌档梦梯械检棉植椎楼榜模横橙次欢款歌止</span><br><span class="line">正此步死段母每毒比毫民气氧水求汇池汤汽沃沉没油治沾泄法泛泡注泵洁洗活流测济浏浪浮浴海涂消涉涟润液涵淘淫深混添清渐渠温港游湿溃溅源滑滚满滤</span><br><span class="line">滴漆漏漪漫潜激火灭灯灰灵灼灾炫点烁烦烧热烷焊焦然照熄燃燥爆爬爱父片版牌牙牢物特犯状狗独猜猫献率王玩环现班球理琐瓜甚生用由甲申画畅界留略番</span><br><span class="line">疑疗疲疼病痛登白百皂的皮盈益监盒盖盗盘目直相盾省看真眠眼着睛睡知矩短石矿码研破砸础硬确碍碎磁示礼社神票禁福离私种科秒秘租积称移秽程稳究空</span><br><span class="line">穿突窒窗立竖站竞章童端笔符第等筒答策筛筹签简算管箱籍米类粉粒粗精糖系素索紧紫累繁红约级纬纸纹线练组细织终绍经绑结绘给络绝统继续维综缀缓编</span><br><span class="line">缘缩缪缺网罚罪置美群翻耀老考者而耐耗耳聊职联聚股肤肥肮育背能脂脉脑脱脸腊腾自至致舍舒舞航船良色艺节芒花苏若英范茄荐荒荣莞获菜营落著蓝蔽藏</span><br><span class="line">虚虫蛰蜗融螺蠕血行衍街衣补表袋被裂装西要覆见规视览觉角解触言警计订认让议讯记许论设访证评识诈诉诊词译试话诞询该详语误说请诺读诽调谓谤谨谷</span><br><span class="line">象豪貌负贡财责账货质贪购贴贷费资赔赖赛赢走起超趣足跌跑距跟路跳踪蹈身车轨转软轻载较辅辐辑输辨边达迁过迎运近返还这进远违连迟述迷迹追退送适</span><br><span class="line">逆选透递途通速造遇道遥遭遮遵避那邮邻部都配酒酷醒采释里重野量金鉴针钉钓钟钥钮钱铁铃银链销锁锐错键镜长门闪闭问闰闲间闹闻阅防阳阴阶阻阿附际</span><br><span class="line">陆陈陌降限院除险陪隆随隐隔障难雅集雨雪雯零雷需霜露青静非靠面音页顶项顺须顿预领颈频颗题颜额颠颤风飞食饰饿馈首香馨马驱驶驻驾验骑骗骚高鬼魔</span><br><span class="line">鱼鲜鸦鸿麦黄黑默鼓鼠龄手机字写完丈丌丐丑丕丘丛丞丧丨丫丬串丶丸丹丽丿乃久乇乌乍乎乏乒乓乔乖乙乜乞乡乩乳乾予亍亏亓井亘亚亟亠亢亥亦亨亩亭亳</span><br><span class="line">亵亻亿仁仂仃仄仆仇仉仑仓仕仗仙仝仞仟仡仨仫仲仳仵仿伉伊伍伎伏伐伛伟伢伥伦伧伫伯估伲伶伸伺伽佃佐佑佗佘佚佛佝佞佟佣佤佥佧佩佬佯佰佴佶佻佼佾</span><br><span class="line">侃侄侈侉侍侏侑侔侗侠侣侥侦侨侩侪侬侮侯促俄俅俊俎俏俐俑俗俘俚俜俞俟俣俦俨俩俪俭俯俳俸俺俾倌倍倏倒倔倘倚倜倡倥倦倨倩倪倬倭倮债倾偃偈偌偎偕</span><br><span class="line">偬偶偷偻偾傀傅傈傍傣傥傧傩催傲傺傻僖僚僦僧僬僭僮僳僵僻儆儇儋儒儡兀兄兆兑兔兕兖兜兢兮兰兵兹兽冀冁冂冈冉冕冖冗冠冢冤冥冫冯冱冶冼冽凄凇凉凋</span><br><span class="line">凌凑凛凝凫凯凳凵凶凼函凿刁刂刃刈刊刍刎刑刖刘刚刨刭刮刳刺刻刽刿剀剁剂剃削剌剐剑剔剖剜剞剡剥割剽剿劁劂劈劐劓劝劢劣劬劭励劲劾勃勇勉勋勐勒勖</span><br><span class="line">勘募勰勹勺匀匆匈匍匏匐匕匚匝匠匡匣匦匪匮匾千卅卑卒卜卞卟卢卣卤卦卧卩卮卯却卵卺卿厄厉厌厍厕厚厝厢厣厥厦厩厮厶县叁叉叔叙叛叟古叨叩召叭叮叱</span><br><span class="line">叵叹叻叼叽吁吃吆吉吊吏吐吒吓吕吖君吝吟吠吡吣吨吩吭吮吱吲吴吵吸吹吻吼吾呀呃呆呋呐呒呓呔呕呖呗呙呛呜呢呤呦呱呲呵呶呷呸呻咀咂咄咆咋咎咏咐咒</span><br><span class="line">咔咕咖咙咚咛咝咣咤咦咧咩咫咬咭咯咱咳咴咸咻咽咿哀哂哄哇哈哉哌哎哏哐哑哓哕哗哙哚哜哝哞哟哥哦哧哭哮哲哳哺哼哽哿唁唆唇唉唏唐唑唔唛唠唢唣唧唪</span><br><span class="line">唬唰唳唷唼唾唿啁啃啄啉啊啐啕啖啜啡啤啥啦啧啪啬啭啮啵啶啷啸啻啼啾喀喁喂喃喇喈喉喊喋喏喑喔喘喙喝喟喧喱喳喵喷喹喻喽喾嗄嗅嗉嗌嗍嗑嗒嗓嗔嗖嗜</span><br><span class="line">嗝嗟嗡嗣嗤嗥嗦嗨嗪嗫嗬嗯嗲嗳嗵嗷嗽嗾嘀嘁嘈嘉嘌嘎嘏嘘嘛嘞嘣嘤嘧嘬嘭嘱嘲嘴嘶嘹嘻嘿噌噍噎噔噗噘噙噜噢噤噩噪噫噬噱噶噻噼嚅嚆嚎嚏嚓嚣嚯嚷嚼囊</span><br><span class="line">囗囚囝囟囤囫园困囱囵囹囿圃圄圉圊土圩圪圬圭圮圯圹圻坂坊坌坍坎坑坚坜坝坞坟坠坤坦坨坩坪坫坭坯坳坶坷坻坼垂垄垅垆垌垒垓垛垠垡垢垣垤垦垧垩垫垭</span><br><span class="line">垮垲垴垸埂埃埋埏埒埔埕埘埙埚埝埠埤埭埯埴埸培埽堀堂堆堇堋堍堑堕堙堞堠堡堤堪堰堵塄塌塍塔塘塞塥塬塾墀墁墅墉墒墓墙墚墟墨墩墼壅壑壕壤壬壮壳壶</span><br><span class="line">壹夂夙夤夥夫夭央夯夷夸夺夼奁奂奄奈奉奋奎契奔奘奚奠奢奥奴奶奸她妁妃妄妆妈妊妍妒妓妖妗妙妞妣妤妩妪妫妮妯妲妹妻妾姊姐姑姒委姗姘姚姜姝姣姥姨</span><br><span class="line">姬姹姻威娃娄娅娆娇娈娉娌娑娓娘娜娟娠娣娥娩娲娴娶娼婀婆婉婊婕婚婢婧婪婴婵婶婷婺婿媚媛媪媲媳媵媸媾嫁嫂嫉嫌嫒嫔嫖嫘嫜嫠嫡嫣嫦嫩嫫嫱嬉嬖嬗嬲</span><br><span class="line">嬴嬷孀孑孓孔孕孙孚孛孜孝孟孢季孤孥孪孬孰孱孳孵孺孽宀宄宋宏宓宕宗宙宛审宥宦宪宰宴宸宽宾宿寂寄寅寇寐寓寝寞察寡寤寥寨寮寺尉尔尕尜尢尥尧尬尴</span><br><span class="line">尸尹尻尿屁屈屉届屋屎屐屑屙屠屡屣履屮屯屹屺屿岁岂岈岌岍岐岑岔岖岗岘岙岚岛岜岢岣岩岫岬岭岱岳岵岷岸岽岿峁峄峋峒峙峡峤峥峦峨峪峭峰峻崂崃崆崇</span><br><span class="line">崎崔崖崛崞崤崦崧崭崮崴崽崾嵇嵊嵋嵌嵘嵛嵝嵩嵫嵬嵯嵴嶂嶙嶝嶷巅巍巛川州巨巩巫巯巳巷巽巾帅帆希帏帑帔帕帘帙帚帛帜帝帧席帱帷帻帼帽幂幄幌幔幛幞</span><br><span class="line">幡幢幸幺幼幽庀庄庆庇庋庐庑庖庙庚庞庠庥庭庳庵庶庸庹庾廉廊廑廒廓廖廛廨廪廴廷廾弁弄弈弊弋弑弓弗弘弛弟弥弦弩弪弭弯弼彀彐彖彗彘彝彡彤彦彪彬彭</span><br><span class="line">彰彳彷役彻彼徂徇徉徊後徐徒徕徘徙徜御徨徭徵徼徽忄忉忌忍忏忐忑忒忖忝忠忡忤忪忭忮忱念忸忻忽忾忿怂怃怄怅怆怊怍怏怒怔怖怙怛怜思怠怡怦怨怩怪怫</span><br><span class="line">怯怵怼怿恁恂恃恋恍恐恕恙恚恝恣恤恧恨恩恪恫恬恭恰恳恸恹恺恻恽恿悃悉悌悍悒悔悖悚悛悝悟悠患悦悫悭悯悱悲悴悸悻悼惆惋惑惕惘惚惜惝惟惦惧惨惫惬</span><br><span class="line">惭惮惰惴惶惹惺愀愁愆愈愉愍愎愕愚愠愣愤愦愧愫慈慊慌慑慕慝慨慰慵慷憋憎憔憝憧憨憩憬憷憾懈懊懋懑懒懔懦懵懿戆戈戊戋戌戍戎戒戕戗戚戛戟戡戢戤戥</span><br><span class="line">戬戮戳戽戾扁扃扇扈扉扌扎扑扒扔扛扣扦扩扪扭扮扯扳扶扼抄抉把抑抒抓抗抚抟抠抡抢抨抱抵抻押抽抿拄拇拈拊拌拎拐拓拗拘拙拚拢拣拥拧拭拮拯拱拳拴拶</span><br><span class="line">拷拽拾拿挈挎挖挚挛挝挞挟挠挢挣挥挨挫挲挹挺挽捃捅捉捋捌捍捎捏捐捕捞捡捣捧捩捭捱捶捺捻掀掂掇掊掌掎掏掐掖掘掠掣掩掬掭掮掰掳掴掸掺掼掾揄揆揍</span><br><span class="line">揎揖揞揠握揣揩揪揭揲援揶揸揽揿搀搁搂搅搋搌搐搓搔搛搞搠搡搦搪搬搭搴搽搿摁摅摇摈摊摒摘摞摧摭摹摺撂撄撅撇撑撒撕撖撙撞撤撩撮撵撷撸撺撼擀擂擐</span><br><span class="line">擒擗擘擞擢擤擦攀攉攒攘攥攫攮攴攵攸敉敌救敕敖敛敝敞敢敦敫敷斋斌斐斓斛斜斟斡斤斥斧斩斫於旃旄旆旌旎族旒旖旗既旬旭旮旯旰旱旷旺昀昂昃昆昊昌昏</span><br><span class="line">昔昕昙昝昧昨昭昱昴昶昼晁晃晋晌晏晔晕晖晗晟晡晤晦晨晶晷晾暄暇暌暝暧暨暮暹暾曙曛曜曝曩曰曳曷曹曼曾朊朋朐朔朕望朝朦札朱朴朵朽杆杈杉杌李杏材</span><br><span class="line">村杓杖杜杞杠杨杩杪杭杯杲杳杵杷杼构枇枉枋枕枘枚枝枞枢枣枥枧枨枪枫枭枯枰枳枵枷枸柁柃柄柏柑柒染柔柘柙柚柝柞柠柢柩柬柯柰柱柳柴柽柿栀栅栈栉栊</span><br><span class="line">栋栌栎栓栖栗栝栩株栲栳栽栾桀桁桂桃桄桅桉桊桎桐桑桓桔桕桠桡桢桤桥桦桧桨桩桫桴桶桷梁梃梅梆梏梓梗梢梧梨梭梳梵棂棋棍棒棕棘棚棠棣森棰棱棵棹棺</span><br><span class="line">棼椁椅椋椐椒椟椠椤椭椰椴椹椽椿楂楔楗楚楝楞楠楣楦楫楮楱楷楸楹榀概榄榆榇榈榉榍榔榕榘榛榧榨榫榭榱榴榷榻槁槊槌槎槐槔槛槟槠槭槲槽槿樊樗樘樟樨</span><br><span class="line">樯樱樵樽樾橄橇橐橘橛橡橥橱橹橼檀檄檎檐檑檗檠檩檫檬欠欣欤欧欲欷欹欺歃歆歇歉歙武歧歪歹歼殁殂殃殄殆殇殉殊残殍殒殓殖殚殛殡殪殳殴殷殿毁毂毅毋</span><br><span class="line">毓毕毖毗毙毛毡毪毯毳毵毹毽氅氆氇氍氏氐氓氕氖氘氙氛氟氡氢氤氦氨氩氪氮氯氰氲氵氽汀汁汆汉汊汐汔汕汗汛汜汝汞江污汨汩汪汰汲汴汶汹汾沁沂沅沆沈</span><br><span class="line">沌沏沐沓沔沙沛沟沣沤沥沦沧沩沪沫沭沮沱沲河沸沼沽沿泅泉泊泌泐泓泔泖泗泞泠波泣泥泪泫泮泯泰泱泳泶泷泸泺泻泼泽泾洄洇洋洌洎洒洙洚洛洞津洧洪洫</span><br><span class="line">洮洱洲洳洵洹洼洽派浃浅浆浇浈浊浍浑浒浓浔浙浚浜浞浠浣浦浩浯浸浼涅涌涎涑涓涔涕涛涝涞涠涡涣涤涧涨涩涪涫涮涯涸涿淀淄淅淆淇淋淌淑淖淙淝淞淠淡</span><br><span class="line">淤淦淬淮淳淹淼渊渌渍渎渑渔渖渗渚渝渡渣渤渥渫渭渲渴渺湃湄湍湎湓湔湖湘湛湟湫湮湾溆溉溏溘溜溟溢溥溧溪溯溱溲溴溶溷溺溻溽滁滂滇滋滏滓滔滕滗滞</span><br><span class="line">滟滠滢滥滦滨滩滹漂漉漓演漕漠漤漩漭漯漱漳漶漾潆潇潋潍潘潞潢潦潭潮潲潴潸潺潼澄澈澉澌澍澎澜澡澧澳澶澹濂濉濑濒濞濠濡濮濯瀑瀚瀛瀣瀵瀹灏灬灶灸</span><br><span class="line">灿炀炅炉炊炎炒炔炕炖炙炜炝炬炭炮炯炱炳炷炸炻炼炽烀烂烃烈烊烘烙烛烟烤烨烩烫烬烯烹烽焉焐焓焕焖焘焙焚焯焰焱煅煊煌煎煜煞煤煦煨煮煲煳煸煺煽熊</span><br><span class="line">熏熔熘熙熟熠熨熬熳熵熹燎燔燕燠燧燮燹爝爪爰爵爷爸爹爻爽爿牍牒牖牛牝牟牡牦牧牮牯牲牵牺牾牿犀犁犄犊犋犍犏犒犟犬犭犰犴犷犸狁狂狃狄狈狍狎狐狒</span><br><span class="line">狙狞狠狡狨狩狭狮狯狰狱狲狳狴狷狸狺狻狼猁猃猊猎猓猕猖猗猛猝猞猡猢猥猩猪猬猱猴猷猸猹猾猿獍獐獒獗獠獬獭獯獾玄玉玎玑玖玛玟玢玫玮玲玳玷玺玻珀</span><br><span class="line">珂珈珉珊珍珏珐珑珙珞珠珥珧珩珲琅琉琊琏琚琛琢琥琦琨琪琬琮琰琳琴琵琶琼瑁瑕瑗瑙瑚瑛瑜瑞瑟瑭瑰瑶瑷瑾璀璁璃璇璋璎璐璜璞璧璨璩璺瓒瓞瓠瓢瓣瓤瓦</span><br><span class="line">瓮瓯瓴瓶瓷瓿甄甍甏甑甓甘甙甜甥甩甫甬甭甯田男甸町甾畀畈畋畎畏畔畚畛畜畦畲畴畸畹畿疃疆疋疏疒疔疖疙疚疝疟疠疡疣疤疥疫疬疮疯疰疱疳疴疵疸疹疽</span><br><span class="line">疾痂痃痄症痈痉痊痍痒痔痕痖痘痞痢痣痤痦痧痨痪痫痰痱痴痹痼痿瘀瘁瘃瘅瘊瘌瘐瘕瘗瘘瘙瘛瘟瘠瘢瘤瘥瘦瘩瘪瘫瘭瘰瘳瘴瘵瘸瘼瘾瘿癀癃癌癍癔癖癜癞癣</span><br><span class="line">癫癯癸皆皇皈皋皎皑皓皖皙皤皱皲皴皿盂盅盆盍盎盏盐盔盛盟盯盱盲盹盼眄眇眈眉眍眙眚眢眦眨眩眭眯眵眶眷眸眺睁睃睇睐睑睚睢督睥睦睨睫睬睹睽睾睿瞀</span><br><span class="line">瞄瞅瞌瞍瞎瞑瞒瞟瞠瞢瞥瞧瞩瞪瞬瞰瞳瞵瞻瞽瞿矍矗矛矜矢矣矧矫矬矮矶矸矽矾砀砂砉砌砍砑砒砖砗砘砚砜砝砟砣砥砦砧砩砬砭砰砷砹砺砻砼砾硅硇硌硎硐</span><br><span class="line">硒硕硖硗硝硪硫硭硷硼碇碉碌碑碓碗碘碚碛碜碟碡碣碥碧碰碱碲碳碴碹碾磅磉磊磋磐磔磕磙磨磬磲磴磷磺礁礅礓礞礤礴礻祀祆祈祉祓祖祗祚祛祜祝祟祠祢祥</span><br><span class="line">祧祭祯祷祸祺禀禄禅禊禚禧禳禹禺禽禾秀秃秆秉秋秕秣秤秦秧秩秫秭秸稀稂稃稆稍税稔稗稚稞稠稣稷稹稻稼稽稿穆穑穗穰穴穷穸穹窀窃窄窆窈窍窑窕窖窘窜</span><br><span class="line">窝窟窠窥窦窨窬窭窳窿竟竣竦竭竹竺竽竿笃笄笆笈笊笋笏笑笕笙笛笞笠笤笥笨笪笫笮笱笳笸笺笼笾筅筇筋筌筏筐筑筘筚筝筠筢筮筱筲筵筷筻箅箍箐箔箕箜箝</span><br><span class="line">箢箦箧箨箩箪箫箬箭箴箸篁篆篇篌篑篓篙篚篝篡篥篦篪篮篱篷篼篾簇簋簌簏簖簟簦簧簪簸簿籀籁籴籼籽粑粕粘粜粝粞粟粢粤粥粪粮粱粲粳粹粼粽糁糅糇糈糊</span><br><span class="line">糌糍糕糗糙糜糟糠糨糯糸紊絮絷綦綮縻繇纂纛纟纠纡纣纤纥纨纩纪纫纭纯纰纱纲纳纵纶纷纺纽纾绀绁绂绅绉绊绋绌绎绐绒绔绕绗绚绛绞绠绡绢绣绥绦绨绩绪</span><br><span class="line">绫绮绯绰绱绲绳绵绶绷绸绺绻绽绾绿缁缂缃缄缅缆缇缈缉缋缌缍缎缏缑缒缔缕缗缙缚缛缜缝缟缠缡缢缣缤缥缦缧缨缫缬缭缮缯缰缱缲缳缴缵缶缸罂罄罅罐罔</span><br><span class="line">罕罗罘罟罡罢罨罩罱署罴罹罾羁羊羌羔羚羝羞羟羡羧羯羰羲羸羼羽羿翁翅翊翌翎翔翕翘翟翠翡翥翦翩翮翰翱翳翼耄耆耋耍耒耔耕耖耘耙耜耠耢耥耦耧耨耩耪</span><br><span class="line">耱耵耶耷耸耻耽耿聂聃聆聋聍聒聘聩聪聱聿肀肃肄肆肉肋肌肓肖肘肚肛肜肝肟肠肢肩肪肫肭肯肱肴肷肺肼肽肾肿胀胁胂胃胄胆胍胎胖胗胙胚胛胜胝胞胡胤胥</span><br><span class="line">胧胨胩胪胫胬胭胯胰胱胲胳胴胶胸胺胼脆脊脍脎脏脐脒脓脔脖脘脚脞脬脯脲脶脾腆腈腋腌腐腑腓腔腕腙腚腠腥腧腩腭腮腰腱腴腹腺腻腼腽腿膀膂膈膊膏膑膘</span><br><span class="line">膛膜膝膣膦膨膪膳膺膻臀臁臂臃臆臊臌臣臧臬臭臻臼臾舀舁舂舄舅舆舌舐舔舛舜舟舡舢舣舨舫般舭舯舰舱舳舴舵舶舷舸舻舾艄艇艉艋艏艘艚艟艨艮艰艳艴艹</span><br><span class="line">艽艾艿芄芈芊芋芍芎芏芑芗芘芙芜芝芟芡芤芥芦芨芩芪芫芬芭芮芯芰芳芴芷芸芹芽芾苁苄苇苈苊苋苌苍苎苑苒苓苔苕苗苘苛苜苞苟苠苡苣苤苦苫苯苴苷苹苻</span><br><span class="line">茁茂茅茆茇茈茉茌茎茏茑茔茕茗茚茛茜茧茨茫茬茭茯茱茳茴茵茶茸茹茺茼荀荃荆荇草荏荑荔荚荛荜荞荟荠荡荤荥荦荧荨荩荪荫荬荭荮药荷荸荻荼荽莅莆莉莎</span><br><span class="line">莒莓莘莛莜莠莨莩莪莫莰莱莲莳莴莶莸莹莺莼莽菀菁菅菇菊菌菏菔菖菘菝菟菠菡菥菩菪菰菱菲菸菹菽萁萃萄萆萋萌萍萎萏萑萘萜萝萤萦萧萨萱萸萼葆葑葙葚</span><br><span class="line">葛葜葡董葩葫葬葭葱葳葵葶葸葺蒂蒇蒈蒉蒋蒌蒎蒗蒙蒜蒡蒯蒲蒴蒸蒹蒺蒽蒿蓁蓄蓉蓊蓍蓐蓑蓓蓖蓟蓠蓣蓥蓦蓬蓰蓼蓿蔌蔑蔓蔗蔚蔟蔡蔫蔬蔷蔸蔹蔺蔻蔼蕃蕈</span><br><span class="line">蕉蕊蕖蕙蕞蕤蕨蕲蕴蕹蕺蕻蕾薄薅薇薏薛薜薤薨薪薮薯薰薷薹藁藉藐藓藕藜藤藩藻藿蘅蘑蘖蘧蘩蘸蘼虍虎虏虐虑虔虞虢虬虮虱虹虺虻虼虽虾虿蚀蚁蚂蚊蚋蚌</span><br><span class="line">蚍蚓蚕蚜蚝蚣蚤蚧蚨蚩蚪蚬蚯蚰蚱蚴蚵蚶蚺蛀蛄蛆蛇蛉蛊蛋蛎蛏蛐蛑蛔蛘蛙蛛蛞蛟蛤蛩蛭蛮蛱蛲蛳蛴蛸蛹蛾蜀蜂蜃蜇蜈蜉蜊蜍蜒蜓蜕蜘蜚蜜蜞蜡蜢蜣蜥蜩蜮</span><br><span class="line">蜱蜴蜷蜻蜾蜿蝇蝈蝉蝌蝎蝓蝗蝙蝠蝣蝤蝥蝮蝰蝴蝶蝻蝼蝽蝾螂螃螅螈螋螓螗螟螨螫螬螭螯螳螵螽蟀蟆蟊蟋蟑蟒蟓蟛蟠蟥蟪蟮蟹蟾蠃蠊蠓蠖蠛蠡蠢蠲蠹蠼衄衅</span><br><span class="line">衔衙衡衢衤衩衫衬衮衰衲衷衽衾衿袁袂袄袅袈袍袒袖袜袢袤袭袱袷袼裁裆裉裎裒裔裕裘裙裟裢裣裤裥裨裰裱裳裴裸裹裼裾褂褊褐褒褓褙褚褛褡褥褪褫褰褴褶</span><br><span class="line">襁襄襞襟襦襻覃观觅觇觊觋觌觎觏觐觑觖觚觜觞觥觫觯觳訇訾詈詹誉誊誓謇謦譬讠讣讥讦讧讨讪讫讲讳讴讵讶讷讹讼讽诀诂诃诅诋诌诎诏诒诓诔诖诗诘诙诚</span><br><span class="line">诛诜诟诠诡诣诤诧诨诩诫诬诮诰诱诲诳诵诶诸诹诼课诿谀谁谂谄谅谆谇谈谊谋谌谍谎谏谐谑谒谔谕谖谗谘谙谚谛谜谝谟谠谡谢谣谥谦谧谩谪谫谬谭谮谯谰谱</span><br><span class="line">谲谳谴谵谶豁豆豇豉豌豕豚豢豫豳豸豹豺貂貅貉貊貔貘贝贞贤败贩贫贬贮贯贰贱贲贳贵贶贸贺贻贼贽贾贿赀赁赂赃赅赆赇赈赉赊赋赌赍赎赏赐赓赕赘赙赚赜</span><br><span class="line">赝赞赠赡赣赤赦赧赫赭赳赴赵赶趁趄越趋趑趔趟趱趴趵趸趺趼趾趿跃跄跆跋跎跏跖跗跚跛跞跣跤跨跪跫跬践跷跸跹跺跻跽踅踉踊踌踏踔踝踞踟踢踣踩踬踮踯</span><br><span class="line">踱踵踹踺踽蹀蹁蹂蹄蹇蹉蹊蹋蹑蹒蹙蹦蹩蹬蹭蹯蹰蹲蹴蹶蹼蹿躁躅躇躏躐躔躜躞躬躯躲躺軎轧轩轫轭轮轰轱轲轳轴轵轶轷轸轹轺轼轾轿辁辂辄辆辇辈辉辊辋</span><br><span class="line">辍辎辏辔辕辖辗辘辙辚辛辜辞辟辣辩辫辰辱辶辽迂迄迅迈迓迕迢迤迥迦迨迩迪迫迭迮迳迸逃逄逅逊逋逍逐逑逖逗逛逝逞逡逢逦逭逮逯逵逶逸逻逼逾遁遂遄遍</span><br><span class="line">遏遐遑遒遗遘遛遢遣遨遴遽邀邂邃邈邋邑邓邕邗邙邛邝邡邢邦邪邬邯邰邱邳邴邵邶邸邹邺邾郁郄郅郇郊郎郏郐郑郓郗郛郜郝郡郢郦郧郫郭郯郴郸郾鄂鄄鄙鄞</span><br><span class="line">鄢鄣鄯鄱鄹酃酆酉酊酋酌酎酏酐酗酚酝酞酡酢酣酤酥酩酪酬酮酯酰酱酲酴酵酶酸酹酽酾酿醅醇醉醋醌醍醐醑醚醛醢醣醪醭醮醯醴醵醺釉釜銎銮鋈錾鍪鎏鏊鏖</span><br><span class="line">鐾鑫钅钆钇钊钋钌钍钎钏钐钒钔钕钗钙钚钛钜钝钞钠钡钢钣钤钦钧钨钩钪钫钬钭钯钰钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铂铄铅铆铈铉铊铋铌铍铎铐铑铒铕铖</span><br><span class="line">铗铘铙铛铜铝铞铟铠铡铢铣铤铥铧铨铩铪铫铬铭铮铯铰铱铲铳铴铵铷铸铹铺铼铽铿锂锃锄锅锆锇锈锉锊锋锌锍锎锏锑锒锓锔锕锖锗锘锚锛锝锞锟锡锢锣锤锥</span><br><span class="line">锦锨锩锪锫锬锭锯锰锱锲锴锵锶锷锸锹锺锻锼锾锿镀镁镂镄镅镆镇镉镊镌镍镎镏镐镑镒镓镔镖镗镘镙镛镝镞镟镡镢镣镤镥镦镧镨镩镪镫镬镭镯镰镱镲镳镶闩</span><br><span class="line">闫闯闱闳闵闶闷闸闺闼闽闾阀阁阂阃阄阆阈阉阊阋阌阍阎阏阐阑阒阔阕阖阗阙阚阜阝队阡阢阪阮阱阵阼阽陀陂陇陉陋陔陕陛陟陡陧陨陬陲陴陵陶陷隅隈隋隍</span><br><span class="line">隗隘隙隧隰隳隶隹隼隽雀雁雄雇雉雌雍雎雏雒雕雠雩雳雹雾霁霄霆震霈霉霍霎霏霓霖霞霪霭霰霸霹霾靓靖靛靡靥革靳靴靶靼鞅鞋鞍鞑鞒鞔鞘鞠鞣鞫鞭鞯鞲鞴</span><br><span class="line">韦韧韩韪韫韬韭韵韶顷顸顼顽顾颀颁颂颃颅颇颉颊颌颍颏颐颓颔颖颚颛颞颟颡颢颥颦颧飑飒飓飕飘飙飚飧飨餍餐餮饔饕饣饥饧饨饩饪饫饬饭饮饯饱饲饴饵饶</span><br><span class="line">饷饺饼饽馀馁馄馅馆馇馊馋馍馏馐馑馒馓馔馕馗馘馥驭驮驯驰驳驴驵驷驸驹驺驼驽驿骀骁骂骄骅骆骇骈骊骋骏骐骒骓骖骘骛骜骝骞骟骠骡骢骣骤骥骧骨骰骱</span><br><span class="line">骶骷骸骺骼髀髁髂髅髋髌髑髓髟髡髦髫髭髯髹髻鬃鬈鬏鬓鬟鬣鬯鬲鬻魁魂魃魄魅魇魈魉魍魏魑鱿鲁鲂鲅鲆鲇鲈鲋鲍鲎鲐鲑鲒鲔鲕鲚鲛鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧</span><br><span class="line">鲨鲩鲫鲭鲮鲰鲱鲲鲳鲴鲵鲶鲷鲸鲺鲻鲼鲽鳃鳄鳅鳆鳇鳊鳋鳌鳍鳎鳏鳐鳓鳔鳕鳖鳗鳘鳙鳜鳝鳞鳟鳢鸟鸠鸡鸢鸣鸥鸨鸩鸪鸫鸬鸭鸯鸱鸲鸳鸵鸶鸷鸸鸹鸺鸽鸾鹁鹂</span><br><span class="line">鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹎鹏鹑鹕鹗鹘鹚鹛鹜鹞鹣鹤鹦鹧鹨鹩鹪鹫鹬鹭鹰鹱鹳鹾鹿麂麇麈麋麒麓麝麟麴麸麻麽麾黉黍黎黏黔黛黜黝黟黠黢黥黧黩黪黯黹黻黼黾</span><br><span class="line">鼋鼍鼎鼐鼗鼙鼢鼬鼯鼷鼹鼽鼾齄齐齑齿龀龃龅龇龈龉龊龋龌龙龚龛龟龠</span><br></pre></td></tr></table></figure><br><h2 id="font-spider">font-spider</h2><br><p>有了以上GB2312包含的常用汉字，只要再加上26个英文字母、日文平假名片假名以及所有的标点符号、特殊符号就可以得到一个不包含繁体和生僻字的文字集合。接着使用font-spider进行裁剪就可以得到一个精简的字体。</p><br><h3 id="安装font-spider">安装font-spider</h3><br><p>执行命令行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install font-spider -g</span><br></pre></td></tr></table></figure><br><h3 id="引入字体">引入字体</h3><br><p>font-spider要求有网页引用想要裁剪的字体，首先创建一个Demo目录，里面再创建一个css目录和font目录。</p><p>在css目录下创建test.css输入以下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;source&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../font/source.ttf&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>:</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;../font/source.eot?#font-spider&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;../font/source.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;../font/source.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;../font/source.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">&#x27;../font/source.svg&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;source&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着把需要裁剪的字体重命名为source.ttf放入font目录下，并在Demo目录创建一个index.html引入css样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/test.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后把上面GB2312的汉字以及自己需要的其他字符输入到div中类似下图这样</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/49236d55/1.webp" alt="GB2312"></p><p>以上整个目录结构是这样的：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|<span class="string">-- Demo</span></span><br><span class="line"><span class="string">    </span>|<span class="string">-- index.html</span></span><br><span class="line"><span class="string">    </span>|<span class="string">-- css</span></span><br><span class="line"><span class="string">    </span>|<span class="string">   </span>|<span class="string">-- test.css</span></span><br><span class="line"><span class="string">    </span>|<span class="string">-- font</span></span><br><span class="line"><span class="string">        </span>|<span class="string">-- source.ttf</span></span><br></pre></td></tr></table></figure><br><h3 id="裁剪字体-2">裁剪字体</h3><br><p>在Demo目录下执行命令行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-spider index.html</span><br></pre></td></tr></table></figure><p>执行结束后新的字体会存放在font目录下，复制到需要用到的项目中即可。</p><br><h2 id="结语">结语</h2><br><p>裁剪后的字体占用空间大大减小，本站字体从10M缩减到了1.6M大大缓解了加载压力。更换字体后再次浏览博客首页变得非常顺滑，真是可喜可贺。</p>]]></content>
      
      
      <categories>
          
          <category> 技术杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> font-spider </tag>
            
            <tag> 字体裁剪 </tag>
            
            <tag> 字体优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客踩坑记录</title>
      <link href="/post/8a0ff8b6/"/>
      <url>/post/8a0ff8b6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p>今天把博客整体风格弄得差不多了，过程没有想象那么顺利，遇到的小问题虽然我并不从事前端开发还是在这里记录一下吧。</p><br><h2 id="记录">记录</h2><br><h3 id="在播客主页触发加载动画播放时会发生闪烁现象">在播客主页触发加载动画播放时会发生闪烁现象</h3><br><blockquote><p>问题描述：这个问题不太好描述，大概就是我在博客主页刷新或者从其他页面返回博客主页时会播放加载动画，此时被加载动画遮挡的主页内容还处于未加载完成状态，然后这些未加载完成的内容就会突然跑到加载动画上面又消失，只有短短一瞬间。</p></blockquote><p>我一直找不到问题所在，开始以为是换了渲染器导致的，我就去折腾了很久渲染器，结果没有解决。</p><p>然后我又怀疑是不是加载动画的遮罩层出问题了，想到对于前端知识我就是一知半解，属于是能看懂但写不出功能的水平，这个加载动画我折腾了很久才弄出来真的有可能出问题，于是我又花了一整天时间把css和js学了一遍，又回头重写加载动画结果问题依然没解决。</p><p>最终我想到我加入了aplayer，原来的主页左下角有一个live2d的看板娘，为了给aplyer腾出位置我把看板娘放到右下角了，会不会是live2d和aplayer存在冲突，遂卸载live2d，果不其然问题解决了，看来aplyer和live2d二者存在兼容问题。</p><br><h3 id="开启Pjax后加载动画只会播放一次">开启Pjax后加载动画只会播放一次</h3><br><blockquote><p>问题描述：在主题_config.yml中配置开启Pjax模式后加载动画只在第一次进入首页时播放，之后不管进入哪个页面都不会播放加载动画</p></blockquote><p>参照Akilar大佬的<a href="https://akilar.top/posts/3d221bf2/">Loading Animation</a>加入多种风格加载动画后，忘记复制主题原fullpage-loding.pug中处理pjax模式的代码到loading.pug中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!&#123;theme.pjax &amp;&amp; theme.pjax.enable&#125;) &#123;</span><br><span class="line">   document.addEventListener(&#x27;pjax:send&#x27;, () =&gt; &#123; preloader.initLoading() &#125;)</span><br><span class="line">   document.addEventListener(&#x27;pjax:complete&#x27;, () =&gt; &#123; preloader.endLoading() &#125;)</span><br></pre></td></tr></table></figure><p>后来看了眼仓库发现这个代码是Jerry大佬在2022年9月份才加上的。</p><br><h3 id="百度收录验证站点失败">百度收录验证站点失败</h3><br><blockquote><p>问题描述：在百度资源搜索平台添加自己的域名验证网站时失败</p></blockquote><p>好几篇文章里讲的都是把验证文件放到hexo的source目录然后hexo g d就完成了，结果我照着做就一直验证失败。然后到博客的仓库看了眼验证文件内容，好家伙直接给我渲染了两千多行的html代码。😅</p><p>所以要在_config.yml中配置skip_render字段跳过hexo渲染，否则hexo g的时候验证文件会被渲染导致网站验证失败。</p>]]></content>
      
      
      <categories>
          
          <category> hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity】Excel导出工具（三）</title>
      <link href="/post/425adb33/"/>
      <url>/post/425adb33/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p><a href="/post/8f9ce640/">上一篇</a>实现了C#的代码生成和数据生成，本篇就来完成Lua的代码生成并进行功能测试。</p><br><h2 id="代码生成">代码生成</h2><br><p>因为Lua是脚本语言，所以excel导出的数据直接转换成LuaTable就可以了并不需要存储到其他文件。对于excel来说，一行数据就是一个LuaTable，而整张excel也可以看成是一个LuaTable，转换出来的结果就类似下面这样。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a  = &#123;<span class="comment">--整张excel</span></span><br><span class="line">    [<span class="number">1</span>] = &#123;<span class="comment">--第一行数据</span></span><br><span class="line">        b = <span class="number">1</span>,<span class="comment">--第一行第一列</span></span><br><span class="line">        c = <span class="number">2</span>,<span class="comment">--第一行第二列</span></span><br><span class="line">        d = <span class="number">3</span>,<span class="comment">--第一行第三列</span></span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="number">2</span>] = &#123;<span class="comment">--第二行行数据</span></span><br><span class="line">        b = <span class="number">4</span>,<span class="comment">--第二行第一列</span></span><br><span class="line">        c = <span class="number">5</span>,<span class="comment">--第二行第二列</span></span><br><span class="line">        d = <span class="number">6</span>,<span class="comment">--第二行第三列</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a</span><br></pre></td></tr></table></figure><p>有了这个转换格式，那转换的思路就很清晰了：</p><ol><li class="lvl-3"><p>在开始遍历前插入&quot;local a = {&quot;这样的字符串</p></li><li class="lvl-3"><p>逐行逐列遍历excel</p></li><li class="lvl-3"><p>在每列的遍历开始前插入&quot;[row-3] = {&quot;这样的字符串</p></li><li class="lvl-3"><p>在每列遍历中，根据行列号读取出该条数据的字段名和值，插入&quot;key = value,&quot;这样的字符串</p></li><li class="lvl-3"><p>每列遍历结束后插入一个反大括号&quot;}&quot;</p></li><li class="lvl-3"><p>整个遍历结束后，插入一个反大括号&quot;}&quot;</p></li></ol><p>这就是整个转换过程。而json的转换和前面C#的实现方式是一样的：先把Json字符串反序列化为JsonData，然后判断是否为数组，是数组就遍历这个数组并进行递归，不是数组就读出键值对并生成代码。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ExportData</span>(<span class="params">DataTable dt, <span class="built_in">string</span> excelName, <span class="built_in">string</span> sheetName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.Append(<span class="string">&quot;local data = &#123;\n&quot;</span>);<span class="comment">//1.在开始遍历前插入&quot;local a = &#123;&quot;这样的字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">4</span>; i &lt; dt.Rows.Count; i++)<span class="comment">//2.逐行逐列遍历excel</span></span><br><span class="line">    &#123;</span><br><span class="line">        sb.AppendFormat(<span class="string">&quot;\t[&#123;0&#125;] = &quot;</span>, i - <span class="number">3</span>);<span class="comment">//3.在每列的遍历开始前插入&quot;[row-3] = &#123;&quot;这样的字符串</span></span><br><span class="line">        sb.Append(<span class="string">&quot;&#123;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt; dt.Columns.Count; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> fieldName = dt.Rows[<span class="number">0</span>][j].ToString().Trim();</span><br><span class="line">            <span class="built_in">string</span> fieldType = dt.Rows[<span class="number">1</span>][j].ToString().Trim();</span><br><span class="line">            <span class="built_in">string</span> fieldValue = dt.Rows[i][j].ToString().Trim();</span><br><span class="line"></span><br><span class="line">            <span class="built_in">string</span> fieldStr = GetFieldStr(fieldName, fieldValue, fieldType);<span class="comment">//4.在每列遍历中，根据行列号读取出该条数据的字段名和值，插入&quot;key = value,&quot;这样的字符串</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(fieldStr))</span><br><span class="line">            &#123;</span><br><span class="line">                sb.AppendFormat(<span class="string">&quot;\t\t&#123;0&#125;\n&quot;</span>, fieldStr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sb.Append(<span class="string">&quot;\t&#125;,\n&quot;</span>);<span class="comment">//5.每列遍历结束后插入一个反大括号&quot;&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sb.Append(<span class="string">&quot;&#125;\n&quot;</span>);<span class="comment">//6.整个遍历结束后，插入一个反大括号&quot;&#125;&quot;</span></span><br><span class="line">    sb.AppendFormat(<span class="string">&quot;--excelName = &#123;0&#125;\n&quot;</span>, excelName);</span><br><span class="line">    sb.AppendFormat(<span class="string">&quot;--sheetName = &#123;0&#125;\n&quot;</span>, sheetName);</span><br><span class="line">    sb.Append(<span class="string">&quot;return data&quot;</span>);</span><br><span class="line"></span><br><span class="line">    File.WriteAllText(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;/Lua/&#123;1&#125;Data.lua&quot;</span>, m_ExportPath, dt.Rows[<span class="number">1</span>][<span class="number">0</span>].ToString()), sb.ToString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">GetFieldStr</span>(<span class="params"><span class="built_in">string</span> fieldName, <span class="built_in">string</span> fieldValue, <span class="built_in">string</span> fieldType</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (fieldType.Equals(<span class="string">&quot;string&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125; = \&quot;&#123;1&#125;\&quot;,&quot;</span>, fieldName, fieldValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fieldType.Equals(<span class="string">&quot;json&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(fieldValue))</span><br><span class="line">        &#123;</span><br><span class="line">            JsonData jsonData = LitJson.JsonMapper.ToObject(fieldValue);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (jsonData != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                StringBuilder jsonSB = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                ParseJson(jsonData, jsonSB);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&#123;2&#125;\t\t&#123;3&#125;,&quot;</span>, fieldName, <span class="string">&quot;&#123;&quot;</span>, jsonSB.ToString(), <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125; = nil,&quot;</span>, fieldName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(fieldValue))</span><br><span class="line">    &#123;</span><br><span class="line">        fieldValue = fieldType.Contains(<span class="string">&quot;bool&quot;</span>) ? <span class="string">&quot;false&quot;</span> : <span class="string">&quot;nil&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fieldType.Contains(<span class="string">&quot;[]&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> result = fieldName + <span class="string">&quot; = &#123;\n\t\t\t&quot;</span>;</span><br><span class="line">        <span class="built_in">string</span> fieldValueTemp = fieldValue.Replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).Replace(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;,\n\t\t\t&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fieldType.Contains(<span class="string">&quot;string&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            fieldValueTemp = <span class="string">&quot;\&quot;&quot;</span> + fieldValue.Replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).Replace(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;\&quot;,\n\t\t\t\&quot;&quot;</span>) + <span class="string">&quot;\&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (fieldType.Contains(<span class="string">&quot;bool&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            fieldValueTemp = fieldValueTemp.ToLower();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result + fieldValueTemp + <span class="string">&quot;,\n\t\t&#125;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fieldType.Contains(<span class="string">&quot;Vector&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">string</span>[] vectorValues = fieldValue.Split(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">    <span class="built_in">string</span>[] vectorFieldName = &#123; <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span> &#125;;</span><br><span class="line">    <span class="built_in">string</span> result = fieldName + <span class="string">&quot; = &#123;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; vectorValues.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        result += <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;&quot;</span>, vectorFieldName[i], vectorValues[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i &lt; vectorValues.Length - <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            result += <span class="string">&quot;,&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result + <span class="string">&quot;&#125;,&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;,&quot;</span>, fieldName, fieldValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ParseJson</span>(<span class="params">JsonData jsonData, StringBuilder sb, <span class="built_in">int</span> tCount = <span class="number">3</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (jsonData.IsArray)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; jsonData.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!JsonFieldIsBaseValueType(<span class="built_in">string</span>.Format(<span class="string">&quot;[&#123;0&#125;]&quot;</span>, i + <span class="number">1</span>), jsonData[i], tCount, sb))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; tCount; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    sb.Append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                sb.AppendFormat(<span class="string">&quot;[&#123;0&#125;] = &quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">                sb.Append(<span class="string">&quot;&#123;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                ParseJson(jsonData[i], sb, tCount + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; tCount; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    sb.Append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                sb.Append(<span class="string">&quot;&#125;,\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (jsonData.Keys.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">string</span>, LitJson.JsonData&gt; kvp <span class="keyword">in</span> jsonData)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> key = kvp.Key;</span><br><span class="line">            JsonData val = kvp.Value;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!JsonFieldIsBaseValueType(key, val, tCount, sb))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tCount; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    sb.Append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                sb.AppendFormat(<span class="string">&quot;&#123;0&#125; = &quot;</span>, key);</span><br><span class="line">                sb.Append(<span class="string">&quot;&#123;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                ParseJson(val, sb, tCount + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tCount; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    sb.Append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                sb.Append(<span class="string">&quot;&#125;,\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">JsonFieldIsBaseValueType</span>(<span class="params"><span class="built_in">string</span> fieldName, JsonData jsonData, <span class="built_in">int</span> tCount, StringBuilder sb</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> fieldValueStr = jsonData.ToString();</span><br><span class="line">    <span class="built_in">string</span> fieldType = <span class="built_in">string</span>.Empty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (jsonData.IsInt)</span><br><span class="line">    &#123;</span><br><span class="line">        fieldType = <span class="string">&quot;int&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (jsonData.IsLong)</span><br><span class="line">    &#123;</span><br><span class="line">        fieldType = <span class="string">&quot;long&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (jsonData.IsDouble)</span><br><span class="line">    &#123;</span><br><span class="line">        fieldType = <span class="string">&quot;double&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (jsonData.IsBoolean)</span><br><span class="line">    &#123;</span><br><span class="line">        fieldType = <span class="string">&quot;bool&quot;</span>;</span><br><span class="line">        fieldValueStr = fieldValueStr.ToLower();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (jsonData.IsString)</span><br><span class="line">    &#123;</span><br><span class="line">        fieldType = <span class="string">&quot;string&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(fieldType))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.Append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sb.AppendFormat(<span class="string">&quot;&#123;0&#125;\n&quot;</span>, GetFieldStr(fieldName, fieldValueStr, fieldType));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是整个Lua代码的生成逻辑了。</p><br><h2 id="导出测试">导出测试</h2><p>首先配置一下excel的存放路径和导出路径。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/425adb33/1.webp" alt="配置"></p><p>然后点击读取按钮测试是否能读出文件列表。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/425adb33/2.webp" alt="读取"></p><p>成功的读取出了文件列表。</p><br><hr><br><p>选择C#选项卡，点击导出。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/425adb33/3.webp" alt="C#导出"><br><img src= "/images/lazyload.webp" data-lazy-src="/post/425adb33/4.webp" alt="C#导出"><br><img src= "/images/lazyload.webp" data-lazy-src="/post/425adb33/5.webp" alt="C#导出"><br><img src= "/images/lazyload.webp" data-lazy-src="/post/425adb33/6.gif" alt="C#导出"><br>数据和代码都成功的生成了，json也成功的解析并还原了对应的类和对象。</p><br><hr><br><p>选择Lua选项卡，点击导出。<img src= "/images/lazyload.webp" data-lazy-src="/post/425adb33/7.webp" alt="Lua导出"><br><img src= "/images/lazyload.webp" data-lazy-src="/post/425adb33/8.webp" alt="Lua导出"><br><img src= "/images/lazyload.webp" data-lazy-src="/post/425adb33/9.gif" alt="Lua导出"><br>生成了一个完整的LuaTable且格式和json解析都是正确的。</p><br><h2 id="读取测试">读取测试</h2><br><p>把生成的C#代码复制到工程中，并把C#的.bytes文件存放到一个单独的目录，这里我是放在工程中的ConfigData目录下。创建一个Test脚本并在Start()函数中写测试代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    RoleConfigData[] roleConfigDatas = ConfigDataHelper.LoadConfigData&lt;RoleConfigData&gt;(<span class="string">&quot;ConfigData/&quot;</span>, <span class="string">&quot;RoleConfigData&quot;</span>);</span><br><span class="line"></span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; roleConfigDatas.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        RoleConfigData roleConfigData = roleConfigDatas[i];</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;=======================第&#123;0&#125;条数据=======================\n&quot;</span>, (i + <span class="number">1</span>).ToString());</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;Id&quot;</span>, roleConfigData.id);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;name&quot;</span>, roleConfigData.name);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;assetName&quot;</span>, roleConfigData.assetName);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;hitEffect&quot;</span>, roleConfigData.hitEffect);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;headIcon&quot;</span>, roleConfigData.headIcon);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;attackSpeed&quot;</span>, roleConfigData.attackSpeed);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;moveSpeed&quot;</span>, roleConfigData.moveSpeed);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;jumpForce&quot;</span>, roleConfigData.jumpForce);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;attactIds&quot;</span>, roleConfigData.attactIds);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;jumpAttackIds&quot;</span>, roleConfigData.jumpAttackIds);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;catchAttackId&quot;</span>, roleConfigData.catchAttackId);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;throwAttackId&quot;</span>, roleConfigData.throwAttackId);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;weaponAttackId&quot;</span>, roleConfigData.weaponAttackId);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;throwWeaponId&quot;</span>, roleConfigData.throwWeaponId);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;skillIds&quot;</span>, roleConfigData.skillIds);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;attackWait&quot;</span>, roleConfigData.attackWait);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;attackNextTime&quot;</span>, roleConfigData.attackNextTime);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;isCatchControl&quot;</span>, roleConfigData.isCatchControl);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;behaviourTreeIds&quot;</span>, roleConfigData.behaviourTreeIds);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;hurtAnims&quot;</span>, roleConfigData.hurtAnims);</span><br><span class="line">        stringBuilder.AppendFormat(<span class="string">&quot;&#123;0&#125; = &#123;1&#125;\n&quot;</span>, <span class="string">&quot;isBoss&quot;</span>, roleConfigData.isBoss);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Debug.Log(stringBuilder.ToString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击运行</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/425adb33/10.gif" alt="测试"></p><p>可以看到，输出的数据都是正确的。</p><br><hr><br><p>Lua数据的测试需要引入tolua或者xLua，具体怎么用这里不进行阐述可以自行学习。把生成的Lua代码复制到Lua/ConfigData路径，并在Main.lua中编写测试代码：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--主入口函数。从这里开始lua逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Main</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">local</span> data = <span class="built_in">require</span>(<span class="string">&quot;ConfigData/RoleData&quot;</span>)</span><br><span class="line">    <span class="keyword">local</span> str = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>,#data <span class="keyword">do</span></span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;====================第%s条数据===============\n&quot;</span>,<span class="built_in">tostring</span>(i))</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;Id&quot;</span>, <span class="built_in">tostring</span>(data[i].id))</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;name&quot;</span>, data[i].name)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;assetName&quot;</span>, data[i].assetName)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;hitEffect&quot;</span>, data[i].hitEffect)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;headIcon&quot;</span>, data[i].headIcon)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;attackSpeed&quot;</span>, data[i].attackSpeed)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;moveSpeed&quot;</span>, data[i].moveSpeed)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;jumpForce&quot;</span>, data[i].jumpForce)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;attactIds&quot;</span>, data[i].attactIds)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;jumpAttackIds&quot;</span>, data[i].jumpAttackIds)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;catchAttackId&quot;</span>, data[i].catchAttackId)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;throwAttackId&quot;</span>, data[i].throwAttackId)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;weaponAttackId&quot;</span>, data[i].weaponAttackId)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;throwWeaponId&quot;</span>, data[i].throwWeaponId)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;skillIds&quot;</span>, data[i].skillIds)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;attackWait&quot;</span>, data[i].attackWait)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;attackNextTime&quot;</span>, data[i].attackNextTime)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;isCatchControl&quot;</span>, data[i].isCatchControl)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;behaviourTreeIds&quot;</span>, data[i].behaviourTreeIds)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;hurtAnims&quot;</span>, data[i].hurtAnims)</span><br><span class="line">        str = str..<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s = %s\n&quot;</span>, <span class="string">&quot;isBoss&quot;</span>, data[i].isBoss)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">   <span class="built_in">print</span>(str)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src= "/images/lazyload.webp" data-lazy-src="/post/425adb33/11.gif" alt="测试"></p><p>启动Unity之后print函数成功输出信息，数据都是正确的，那么到这里Lua的导出也完成了，这个工具基本就算做完了。</p><br><h2 id="结语">结语</h2><br><p>这个工具我是先做好了东西才开始写博客，很多功能的实现我都不知道如何用文字去描述，也把握不好要怎样逐步的去拆解功能的代码贴到博客中才能更简单易懂，而且代码中很多东西是集成在我自己的框架中，不好改，改了又不好写，非常纠结。但是不管写的好坏，总算是又完成了一个内容，期待下一个篇章。</p><p>工具地址：<a href="https://github.com/WuWu03/ExcelExport">WuWu03/ExcelExport: excel导出工具 (github.com)</a></p><p>使用时把Config压缩包的代码先复制到unity中</p><p>自己用着暂时还没什么问题，没详细的测试bug多多。🐶</p>]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> Unity </tag>
            
            <tag> 游戏数据管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity】Excel导出工具（二）</title>
      <link href="/post/8f9ce640/"/>
      <url>/post/8f9ce640/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p><a href="/post/c0831780/">上一篇</a>简单的制作了导出工具的UI界面，那么本篇就来解决excel读取到DataTable后，怎么把这些数据序列化为二进制，以及序列化成功后在游戏中怎么再还原回对应的数据类型的对象这两个问题，完成C#代码和数据的生成。</p><br><h2 id="数据序列化和反序列化">数据序列化和反序列化</h2><p>关于什么是序列化什么是反序列化属于常识性问题，这里就不进行解释了（实在不知道就baidu一下、google一下）下面就详细的阐述从策划配置完excel到在游戏中应用这些数据的整个过程。</p><br><h3 id="序列化">序列化</h3><br><p>使用MemoryStream进行流式的数据读写显然是简单明了且效率极高的一种做法。比起一个一个的手动转换类型然后再进行繁琐的数组写入，这种方式只需要逐个把数据写进流中，写完后调用ToArray()就得到了一个转换好的bytes数组，再把得到的数组直接用文件流写入文件就完成了整个工作。要实现这种序列化方法，需要扩展MemoryStream把数据类型转化的代码封装在使用MemoryStream进行读写之前，即：先把数据转为byte[]，再写入流中。于是这里要实现一个MemoryStreamEx，它可以用于各种场景的数据二进制序列化和反序列化。</p><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MemoryStreamEx</span> : <span class="title">MemoryStream</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemoryStreamEx</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MemoryStreamEx</span>(<span class="params"><span class="built_in">byte</span>[] buffer</span>) : <span class="title">base</span>(<span class="params">buffer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 从流中读取一个short数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">short</span> <span class="title">ReadShort</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">base</span>.Read(arr, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> BitConverter.ToInt16(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 把一个short数据写入流</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteShort</span>(<span class="params"><span class="built_in">short</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = BitConverter.GetBytes(<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">base</span>.Write(arr, <span class="number">0</span>, arr.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 从流中读取一个ushort数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">ushort</span> <span class="title">ReadUShort</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">base</span>.Read(arr, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> BitConverter.ToUInt16(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 把一个ushort数据写入流</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteUShort</span>(<span class="params"><span class="built_in">ushort</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = BitConverter.GetBytes(<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">base</span>.Write(arr, <span class="number">0</span>, arr.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 从流中读取一个int数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">ReadInt</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">base</span>.Read(arr, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> BitConverter.ToInt32(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 把一个int数据写入流</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteInt</span>(<span class="params"><span class="built_in">int</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = BitConverter.GetBytes(<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">base</span>.Write(arr, <span class="number">0</span>, arr.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 从流中读取一个uint数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">uint</span> <span class="title">ReadUInt</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">base</span>.Read(arr, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> BitConverter.ToUInt32(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 把一个uint数据写入流</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteUInt</span>(<span class="params"><span class="built_in">uint</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = BitConverter.GetBytes(<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">base</span>.Write(arr, <span class="number">0</span>, arr.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 从流中读取一个long数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">long</span> <span class="title">ReadLong</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">base</span>.Read(arr, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> BitConverter.ToInt64(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 把一个long数据写入流</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteLong</span>(<span class="params"><span class="built_in">long</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = BitConverter.GetBytes(<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">base</span>.Write(arr, <span class="number">0</span>, arr.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 从流中读取一个ulong数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">ulong</span> <span class="title">ReadULong</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">base</span>.Read(arr, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> BitConverter.ToUInt64(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 把一个ulong数据写入流</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteULong</span>(<span class="params"><span class="built_in">ulong</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = BitConverter.GetBytes(<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">base</span>.Write(arr, <span class="number">0</span>, arr.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 从流中读取一个float数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">float</span> <span class="title">ReadFloat</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">base</span>.Read(arr, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> BitConverter.ToSingle(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 把一个float数据写入流</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteFloat</span>(<span class="params"><span class="built_in">float</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = BitConverter.GetBytes(<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">base</span>.Write(arr, <span class="number">0</span>, arr.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 从流中读取一个double数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">double</span> <span class="title">ReadDouble</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">base</span>.Read(arr, <span class="number">0</span>, <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> BitConverter.ToDouble(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 把一个double数据写入流</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteDouble</span>(<span class="params"><span class="built_in">double</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = BitConverter.GetBytes(<span class="keyword">value</span>);</span><br><span class="line">        <span class="keyword">base</span>.Write(arr, <span class="number">0</span>, arr.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 从流中读取一个bool数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">ReadBool</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">base</span>.ReadByte() == <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 把一个bool数据写入流</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;value&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteBool</span>(<span class="params"><span class="built_in">bool</span> <span class="keyword">value</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">base</span>.WriteByte((<span class="built_in">byte</span>)(<span class="keyword">value</span> == <span class="literal">true</span> ? <span class="number">1</span> : <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 从流中读取一个sting</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">ReadUTF8String</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">ushort</span> len = <span class="keyword">this</span>.ReadUShort();</span><br><span class="line">        <span class="built_in">byte</span>[] arr = <span class="keyword">new</span> <span class="built_in">byte</span>[len];</span><br><span class="line">        <span class="keyword">base</span>.Read(arr, <span class="number">0</span>, len);</span><br><span class="line">        <span class="keyword">return</span> Encoding.UTF8.GetString(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 把一个string数据写入流</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;str&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">WriteUTF8String</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">byte</span>[] arr = Encoding.UTF8.GetBytes(str);</span><br><span class="line">        <span class="keyword">if</span> (arr.Length &gt; <span class="number">65535</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidCastException(<span class="string">&quot;字符串超出范围&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        WriteUShort((<span class="built_in">ushort</span>)arr.Length);</span><br><span class="line">        <span class="keyword">base</span>.Write(arr, <span class="number">0</span>, arr.Length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>可以看到，不同类型反序列化的时候读取的字节长度都不相同，其实这些计算机基础里都有讲过：int(int32)占4个字节=32个二进制位，short(int16)占2个字节=16个二进制位，long(int64)占8个二进制位=64个二进制位，bool占一个字节=8个二进制位，byte=一个字节=8个二进制位……等等，而这里的数据都是以byte(字节)作为单位的，而像读取int的代码中base.Read(arr, 0, 4);长度为什么是4就不难理解了。</p><br><hr><br><p>经过上面操作，数据序列化为二进制已经解决了，接下来还要再写入些什么才能在游戏中把它们顺利的读取出来呢？在TCP通信的文章中有介绍过，解决粘包的方法是在包头写入包体长度，那这里是否也可以计算一个数据的总长把它写入到包头呢，甚至把它的类型也写入？其实只要认真观察一下excel的配置格式就看得出，每一列的数据类型都是一样的，而所有的数据类型的声明都在第二行，如果每个数据都写入长度和类型难免会显得有些冗余，所以只需要计算第四行以后的包含真实数据的总行数总列数写入包头，再把数据全部写入，读取的时候先读出行列数，根据这个行列数逐行逐列读取就可以了。</p><blockquote><p>PS：包含数据的总行数=excel表总行数 - 3，前四行除了第一行的字段名其他的都不需要写入；总列数=excel表总列数 - 1，第一列不需要写入。</p></blockquote><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">ExportData</span>(<span class="params">DataTable dt, <span class="built_in">string</span> excelName, <span class="built_in">string</span> sheetName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">byte</span>[] buffer = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">string</span> dataTableName = dt.Rows[<span class="number">1</span>][<span class="number">0</span>].ToString();<span class="comment">//第二行第一列为表名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (MemoryStreamEx mse = <span class="keyword">new</span> MemoryStreamEx())</span><br><span class="line">    &#123;</span><br><span class="line">        mse.WriteInt(dt.Rows.Count - <span class="number">3</span>);<span class="comment">//1.写入行数</span></span><br><span class="line">        mse.WriteInt(dt.Columns.Count - <span class="number">1</span>);<span class="comment">//2.写入列数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; dt.Columns.Count; i++)<span class="comment">//3.写入字段名</span></span><br><span class="line">        &#123;</span><br><span class="line">            mse.WriteUTF8String(dt.Rows[<span class="number">0</span>][i].ToString().Trim());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">4</span>; i &lt; dt.Rows.Count; i++)<span class="comment">//4.把所有的数据全部转换为string并写入</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt; dt.Columns.Count; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                mse.WriteUTF8String(dt.Rows[i][j].ToString().Trim());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buffer = mse.ToArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//压缩</span></span><br><span class="line">    buffer = ZlibHelper.CompressBytes(buffer);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入文件</span></span><br><span class="line">    FileStream fs = <span class="keyword">new</span> FileStream(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;/C#/Data/&#123;1&#125;ConfigData.bytes&quot;</span>, m_ExportPath, dataTableName), FileMode.Create);</span><br><span class="line">    fs.Write(buffer, <span class="number">0</span>, buffer.Length);</span><br><span class="line">    fs.Close();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span>[,] dataArr = <span class="keyword">new</span> <span class="built_in">string</span>[dt.Columns.Count - <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt; dt.Columns.Count; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dataArr[j - <span class="number">1</span>, i] = dt.Rows[i][j].ToString().Trim();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    CreateDataScript(dt, excelName, sheetName, dataTableName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>序列化的核心代码就是这些，整个流程为：</p><ol><li class="lvl-3"><p>写入行数</p></li><li class="lvl-3"><p>写入列数</p></li><li class="lvl-3"><p>写入字段名</p></li><li class="lvl-3"><p>把所有的数据全部转换为string并写入</p></li><li class="lvl-3"><p>压缩</p></li><li class="lvl-3"><p>写入到文件中</p></li></ol><br><h3 id="反序列化">反序列化</h3><br><p>经过上面序列化操作后就得到一个写满二进制数据的bytes文件，而想要在游戏中使用它就需要把它的数据逐个读取出来。有了上面序列化的基础，反序列化只需要把上面序列化的操作倒过来即可。这里就可以再实现一个ConfigDataParser用于游戏中的反序列化。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConfigDataParser</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 行数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> row &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 列数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> column &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 字段名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>[] fieldName</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> m_FieldName; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否结束</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> eof</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_CurrRow == row - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 构造函数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConfigDataParser</span>(<span class="params"><span class="built_in">byte</span>[] bytes</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytes == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_FieldNameDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;();</span><br><span class="line">        <span class="built_in">byte</span>[] buffer = ZlibHelper.DeCompressBytes(bytes);<span class="comment">//1解压缩</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (MemoryStreamEx mse = <span class="keyword">new</span> MemoryStreamEx(buffer))<span class="comment">//2解析数据到数组</span></span><br><span class="line">        &#123;</span><br><span class="line">            row = mse.ReadInt();</span><br><span class="line">            column = mse.ReadInt();</span><br><span class="line"></span><br><span class="line">            m_GameData = <span class="keyword">new</span> String[row - <span class="number">1</span>, column];</span><br><span class="line">            m_FieldName = <span class="keyword">new</span> <span class="built_in">string</span>[column];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; row; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; column; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">string</span> str = mse.ReadUTF8String();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (i == <span class="number">0</span>)<span class="comment">//表示读取的是字段</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        m_FieldName[j] = str;</span><br><span class="line">                        m_FieldNameDic[str] = j;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span><span class="comment">//表示读取的是数据</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        m_GameData[i - <span class="number">1</span>, j] = str;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 转到下一条</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Next</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (eof)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        m_CurrRow++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 获取字段值</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">GetFieldValue</span>(<span class="params"><span class="built_in">string</span> fieldName</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m_CurrRow &lt; <span class="number">0</span> || m_CurrRow &gt;= row)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> m_GameData[m_CurrRow, m_FieldNameDic[fieldName]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 释放</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_FieldNameDic.Clear();</span><br><span class="line">        m_FieldNameDic = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        m_FieldName = <span class="literal">null</span>;</span><br><span class="line">        m_GameData = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 字段名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[] m_FieldName;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 游戏数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span>[,] m_GameData;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当前行号</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> m_CurrRow = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 字段名称字典</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; m_FieldNameDic;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个反序列化核心逻辑都在构造函数里面，过程为：</p><ol><li class="lvl-3"><p>解压缩</p></li><li class="lvl-3"><p>读取行数</p></li><li class="lvl-3"><p>读取列数</p></li><li class="lvl-3"><p>读取字段名</p></li><li class="lvl-3"><p>读取数据</p></li></ol><p>使用的时候先读取出文件内容，然后创建ConfigDataParser对象并传入数据，用eof字段判断是否到达文件结尾，未到达则循环创建数据对象，类似下面这样：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T[] <span class="title">LoadConfigData</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">string</span> filePath, <span class="built_in">string</span> fileName</span>) <span class="keyword">where</span> T : BaseConfigData, <span class="keyword">new</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> path = <span class="built_in">string</span>.Format(filePath + <span class="string">&quot;&#123;0&#125;&quot;</span>, fileName);</span><br><span class="line"></span><br><span class="line">    T[] t = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    TextAsset txt = AssetDatabase.LoadAssetAtPath&lt;TextAsset&gt;(path + <span class="string">&quot;.bytes&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (txt == <span class="literal">null</span> || txt.bytes == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.LogError(<span class="string">&quot;Config data not found: &quot;</span>, path);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (ConfigDataParser parser = <span class="keyword">new</span> ConfigDataParser(txt.bytes))</span><br><span class="line">    &#123;</span><br><span class="line">        t = <span class="keyword">new</span> T[parser.row - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!parser.eof)</span><br><span class="line">        &#123;</span><br><span class="line">            t[index] = <span class="keyword">new</span> T();</span><br><span class="line">            t[index].Read(parser);</span><br><span class="line">            parser.Next();</span><br><span class="line">            index++; ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的BaseConfigData就是一个抽象类，定义了一个id字段方法Read()，工具生成的代码都要继承它并重写Read方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">BaseConfigData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> id</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_Id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_Id = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Read</span>(<span class="params">ConfigDataParser parser</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> m_Id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="代码生成">代码生成</h2><br><p>有了数据后还需要把这些数据还原成对应的类的对象才能应用到游戏中。实际上，策划在excel中配置的数据类型是多种多样的，几乎会涵盖int，float，double，long，string，bool等所有类型，而一旦把一个数据转为二进制，那它原来是什么类型就不知道了，这样就很难还原回去。</p><p>此时再回过头去观察excel，又不难发现，其实在excel中前三行已经分别标注了数据的字段名、类型、注释。上面在序列化的时候把所有的数据都转为了string类型，那么它原本是什么类型，只需要在生成的代码中加入一个把string转为excel中标注的类型的方法就解决了这个问题。这个功能的实现其实还是比较简单的，直接贴代码吧。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CreateDataScript</span>(<span class="params">DataTable dt, <span class="built_in">string</span> excelName, <span class="built_in">string</span> sheetName, <span class="built_in">string</span> dataTableName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> dataTableName = dt.Rows[<span class="number">1</span>][<span class="number">0</span>].ToString();</span><br><span class="line">    <span class="built_in">string</span>[,] dataArr = <span class="keyword">new</span> <span class="built_in">string</span>[dt.Columns.Count - <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">1</span>; j &lt; dt.Columns.Count; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dataArr[j - <span class="number">1</span>, i] = dt.Rows[i][j].ToString().Trim();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.Append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;//===================================================\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;//作者：WuWu                                          \r\n&quot;</span>);</span><br><span class="line">    sb.AppendFormat(<span class="string">&quot;//创建时间：&#123;0&#125;\r\n&quot;</span>, DateTime.Now.ToString(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">    sb.Append(<span class="string">&quot;//备注：此代码为工具生成 请勿手工修改\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;//===================================================\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;using GameFrameWork;\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;using GameFrameWork.ConfigData;\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;using LitJson;\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;using System;\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;using System.Collections;\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;using UnityEngine;\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;/// &lt;summary&gt;\r\n&quot;</span>);</span><br><span class="line">    sb.AppendFormat(<span class="string">&quot;/// &#123;0&#125;数据表\r\n&quot;</span>, excelName);</span><br><span class="line">    sb.AppendFormat(<span class="string">&quot;/// SheetName:&#123;0&#125;\r\n&quot;</span>, sheetName);</span><br><span class="line">    sb.Append(<span class="string">&quot;/// &lt;/summary&gt;\r\n&quot;</span>);</span><br><span class="line">    sb.AppendFormat(<span class="string">&quot;public class &#123;0&#125;ConfigData : BaseConfigData\r\n&quot;</span>, dataTableName);</span><br><span class="line">    sb.Append(<span class="string">&quot;&#123;\r\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//生成Json实体类代码</span></span><br><span class="line">    Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; jsonDic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; dataArr.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> typeName = GetTypeName(dataArr[i, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (typeName.Equals(<span class="string">&quot;json&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            typeName = dataArr[i, <span class="number">0</span>].Substring(<span class="number">0</span>, <span class="number">1</span>).ToUpper() + dataArr[i, <span class="number">0</span>].Substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">4</span>; j &lt; dt.Rows.Count; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> jsonStr = dt.Rows[j][i + <span class="number">1</span>].ToString();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(jsonStr))</span><br><span class="line">                &#123;</span><br><span class="line">                    jsonDic.Add(typeName, jsonStr);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; kvp <span class="keyword">in</span> jsonDic)</span><br><span class="line">    &#123;</span><br><span class="line">        LitJson.JsonData obj = LitJson.JsonMapper.ToObject(kvp.Value);</span><br><span class="line">        JsonStruct jsonStruct = <span class="keyword">new</span> JsonStruct();</span><br><span class="line">        jsonStruct.className = kvp.Key;</span><br><span class="line">        ParseJson(obj, jsonStruct);</span><br><span class="line">        CreateJsonCode(jsonStruct, sb);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成字段代码</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; dataArr.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> typeName = GetTypeName(dataArr[i, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (typeName.Equals(<span class="string">&quot;json&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            typeName = dataArr[i, <span class="number">0</span>].Substring(<span class="number">0</span>, <span class="number">1</span>).ToUpper() + dataArr[i, <span class="number">0</span>].Substring(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sb.Append(<span class="string">&quot;\t/// &lt;summary&gt;\r\n&quot;</span>);</span><br><span class="line">        sb.AppendFormat(<span class="string">&quot;\t/// &#123;0&#125;\r\n&quot;</span>, dataArr[i, <span class="number">2</span>]);</span><br><span class="line">        sb.Append(<span class="string">&quot;\t/// &lt;/summary&gt;\r\n&quot;</span>);</span><br><span class="line">        sb.AppendFormat(<span class="string">&quot;\tpublic &#123;0&#125; &#123;1&#125; &#123;&#123; get; private set; &#125;&#125;\r\n&quot;</span>, typeName, dataArr[i, <span class="number">0</span>]);</span><br><span class="line">        sb.Append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成克隆代码</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> variableName = dataTableName.Substring(<span class="number">0</span>, <span class="number">1</span>).ToLower() + dataTableName.Substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    sb.AppendFormat(<span class="string">&quot;\tpublic &#123;0&#125;ConfigData Clone()\r\n&quot;</span>, dataTableName);</span><br><span class="line">    sb.Append(<span class="string">&quot;\t&#123;\r\n&quot;</span>);</span><br><span class="line">    sb.AppendFormat(<span class="string">&quot;\t\t&#123;0&#125;ConfigData &#123;1&#125;ConfigData = new &#123;2&#125;ConfigData();\r\n&quot;</span>, dataTableName, variableName, dataTableName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt; dataArr.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.AppendFormat(<span class="string">&quot;\t\t&#123;0&#125;ConfigData.&#123;1&#125; = this.&#123;2&#125;;&quot;</span>, variableName, dataArr[i, <span class="number">0</span>], dataArr[i, <span class="number">0</span>]);</span><br><span class="line">        sb.Append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sb.AppendFormat(<span class="string">&quot;\t\treturn &#123;0&#125;ConfigData;\r\n&quot;</span>, variableName);</span><br><span class="line">    sb.Append(<span class="string">&quot;\t&#125;\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成解析代码</span></span><br><span class="line">    sb.AppendFormat(<span class="string">&quot;\tpublic override void Read(ConfigDataParser parser)\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;\t&#123;\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; dataArr.GetLength(<span class="number">0</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(dataArr[i, <span class="number">0</span>]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> fieldName = dataArr[i, <span class="number">0</span>].Substring(<span class="number">0</span>, <span class="number">1</span>).ToLower() + dataArr[i, <span class="number">0</span>].Substring(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">string</span> typeName = GetTypeName(dataArr[i, <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (typeName.Equals(<span class="string">&quot;json&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            typeName = dataArr[i, <span class="number">0</span>].Substring(<span class="number">0</span>, <span class="number">1</span>).ToUpper() + dataArr[i, <span class="number">0</span>].Substring(<span class="number">1</span>);</span><br><span class="line">            sb.AppendFormat(<span class="string">&quot;\t\tthis.&#123;0&#125; = JsonMapper.ToObject&lt;&#123;1&#125;&gt;(parser.GetFieldValue(\&quot;&#123;0&#125;\&quot;));\r\n&quot;</span>, fieldName, typeName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            sb.AppendFormat(<span class="string">&quot;\t\tthis.&#123;0&#125; = parser.GetFieldValue(\&quot;&#123;0&#125;\&quot;)&#123;1&#125;;\r\n&quot;</span>, fieldName, GetTypeParseStr(typeName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sb.Append(<span class="string">&quot;\t&#125;\r\n&quot;</span>);</span><br><span class="line">    sb.Append(<span class="string">&quot;&#125;\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写入文件</span></span><br><span class="line">    <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(<span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;/C#/Script/&#123;1&#125;ConfigData.cs&quot;</span>, m_ExportPath, dataTableName), FileMode.Create))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (StreamWriter sw = <span class="keyword">new</span> StreamWriter(fs))</span><br><span class="line">        &#123;</span><br><span class="line">            sw.Write(sb.ToString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">GetTypeName</span>(<span class="params"><span class="built_in">string</span> typeName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> typeName.ToLower() <span class="keyword">switch</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;int&quot;</span> =&gt; <span class="string">&quot;int&quot;</span>,</span><br><span class="line">        <span class="string">&quot;long&quot;</span> =&gt; <span class="string">&quot;long&quot;</span>,</span><br><span class="line">        <span class="string">&quot;float&quot;</span> =&gt; <span class="string">&quot;float&quot;</span>,</span><br><span class="line">        <span class="string">&quot;double&quot;</span> =&gt; <span class="string">&quot;double&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bool&quot;</span> =&gt; <span class="string">&quot;bool&quot;</span>,</span><br><span class="line">        <span class="string">&quot;string&quot;</span> =&gt; <span class="string">&quot;string&quot;</span>,</span><br><span class="line">        <span class="string">&quot;vector2&quot;</span> =&gt; <span class="string">&quot;Vector2&quot;</span>,</span><br><span class="line">        <span class="string">&quot;vector3&quot;</span> =&gt; <span class="string">&quot;Vector3&quot;</span>,</span><br><span class="line">        <span class="string">&quot;int[]&quot;</span> =&gt; <span class="string">&quot;int[]&quot;</span>,</span><br><span class="line">        <span class="string">&quot;long[]&quot;</span> =&gt; <span class="string">&quot;long[]&quot;</span>,</span><br><span class="line">        <span class="string">&quot;float[]&quot;</span> =&gt; <span class="string">&quot;float[]&quot;</span>,</span><br><span class="line">        <span class="string">&quot;double[]&quot;</span> =&gt; <span class="string">&quot;double[]&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bool[]&quot;</span> =&gt; <span class="string">&quot;bool[]&quot;</span>,</span><br><span class="line">        <span class="string">&quot;string[]&quot;</span> =&gt; <span class="string">&quot;string[]&quot;</span>,</span><br><span class="line">        <span class="string">&quot;json&quot;</span> =&gt; <span class="string">&quot;json&quot;</span>,</span><br><span class="line">        _ =&gt; <span class="built_in">string</span>.Empty,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">GetTypeParseStr</span>(<span class="params"><span class="built_in">string</span> typeName</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> typeName.ToLower() <span class="keyword">switch</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;int&quot;</span> =&gt; <span class="string">&quot;.ToInt()&quot;</span>,</span><br><span class="line">        <span class="string">&quot;long&quot;</span> =&gt; <span class="string">&quot;.ToLong()&quot;</span>,</span><br><span class="line">        <span class="string">&quot;float&quot;</span> =&gt; <span class="string">&quot;.ToFloat()&quot;</span>,</span><br><span class="line">        <span class="string">&quot;double&quot;</span> =&gt; <span class="string">&quot;.ToDouble()&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bool&quot;</span> =&gt; <span class="string">&quot;.ToBool()&quot;</span>,</span><br><span class="line">        <span class="string">&quot;string&quot;</span> =&gt; <span class="built_in">string</span>.Empty,</span><br><span class="line">        <span class="string">&quot;vector2&quot;</span> =&gt; <span class="string">&quot;.ToVector2()&quot;</span>,</span><br><span class="line">        <span class="string">&quot;vector3&quot;</span> =&gt; <span class="string">&quot;.ToVector3()&quot;</span>,</span><br><span class="line">        <span class="string">&quot;int[]&quot;</span> =&gt; <span class="string">&quot;.ToIntArray()&quot;</span>,</span><br><span class="line">        <span class="string">&quot;long[]&quot;</span> =&gt; <span class="string">&quot;.ToLongArray()&quot;</span>,</span><br><span class="line">        <span class="string">&quot;float[]&quot;</span> =&gt; <span class="string">&quot;.ToFloatArray()&quot;</span>,</span><br><span class="line">        <span class="string">&quot;double[]&quot;</span> =&gt; <span class="string">&quot;.ToDoubleArray()&quot;</span>,</span><br><span class="line">        <span class="string">&quot;bool[]&quot;</span> =&gt; <span class="string">&quot;.ToBoolArray()&quot;</span>,</span><br><span class="line">        <span class="string">&quot;string[]&quot;</span> =&gt; <span class="string">&quot;.ToStringArray()&quot;</span>,</span><br><span class="line">        _ =&gt; <span class="built_in">string</span>.Empty,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外json的解析简单写一下，先把整个表的数据遍历一次过滤出json的字符串加入到一个字典中，再遍历这些json字符串把他们逐个反序列化为对象，然后判断反序列化出来的对象如果是数组就再继续遍历并逐个递归，如果是键值对先判断子阶段是否存在同名字段，不存在就读出key和value生成代码。具体的不多写了，这个功能用的不多，而且太复杂的树、图结构也无法正确解析。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//json解析代码</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ParseJson</span>(<span class="params">LitJson.JsonData jsonData, JsonStruct jsonStruct</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (jsonData.IsArray)<span class="comment">//如果是数组，进行递归</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; jsonData.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ParseJson(jsonData[i], jsonStruct);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (jsonData.Keys.Count &gt; <span class="number">0</span>)<span class="comment">//否则开始解析字段</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">string</span>, LitJson.JsonData&gt; kvp <span class="keyword">in</span> jsonData)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> key = kvp.Key.Trim();</span><br><span class="line">            LitJson.JsonData val = kvp.Value;</span><br><span class="line">            <span class="built_in">string</span> fieldType = JsonFieldType(val);</span><br><span class="line">            <span class="built_in">string</span> fieldName = key.Substring(<span class="number">0</span>, <span class="number">1</span>).ToLower() + key.Substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(fieldType))<span class="comment">//不是基本类型则开始解析类名</span></span><br><span class="line">            &#123;</span><br><span class="line">                fieldType = key.Substring(<span class="number">0</span>, <span class="number">1</span>).ToUpper() + key.Substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (jsonStruct.jsonStructList == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    jsonStruct.jsonStructList = <span class="keyword">new</span> List&lt;JsonStruct&gt;();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                JsonStruct childJsonStruct = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; jsonStruct.jsonStructList.Count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (jsonStruct.jsonStructList[i].className.Equals(fieldType))</span><br><span class="line">                    &#123;</span><br><span class="line">                        childJsonStruct = jsonStruct.jsonStructList[i];</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (childJsonStruct == <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    childJsonStruct = <span class="keyword">new</span> JsonStruct();</span><br><span class="line">                    childJsonStruct.className = fieldType;</span><br><span class="line">                    jsonStruct.jsonStructList.Add(childJsonStruct);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!jsonStruct.fields.ContainsKey(fieldName))</span><br><span class="line">                &#123;</span><br><span class="line">                    jsonStruct.fields.Add(fieldName, fieldType + (val.IsArray ? <span class="string">&quot;[]&quot;</span> : <span class="built_in">string</span>.Empty));</span><br><span class="line">                    ParseJson(val, childJsonStruct);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!jsonStruct.fields.ContainsKey(fieldName))</span><br><span class="line">                &#123;</span><br><span class="line">                    jsonStruct.fields.Add(fieldName, fieldType);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">string</span> <span class="title">JsonFieldType</span>(<span class="params">LitJson.JsonData fieldValue</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> fieldType = <span class="built_in">string</span>.Empty;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fieldValue.IsInt)</span><br><span class="line">    &#123;</span><br><span class="line">        fieldType = <span class="string">&quot;int&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fieldValue.IsLong)</span><br><span class="line">    &#123;</span><br><span class="line">        fieldType = <span class="string">&quot;long&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fieldValue.IsDouble)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (fieldValue.ToString().Split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>].Length &lt; <span class="number">7</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            fieldType = <span class="string">&quot;float&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            fieldType = <span class="string">&quot;double&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fieldValue.IsBoolean)</span><br><span class="line">    &#123;</span><br><span class="line">        fieldType = <span class="string">&quot;bool&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fieldValue.IsString)</span><br><span class="line">    &#123;</span><br><span class="line">        fieldType = <span class="string">&quot;string&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fieldValue.IsArray &amp;&amp; fieldValue.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> typeTemp = JsonFieldType(fieldValue[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(typeTemp))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> typeTemp + <span class="string">&quot;[]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fieldType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CreateJsonCode</span>(<span class="params">JsonStruct jsonStruct, StringBuilder sb, <span class="built_in">int</span> tCount = <span class="number">1</span></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.Append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sb.AppendFormat(<span class="string">&quot;public class &#123;0&#125;\r\n&quot;</span>, jsonStruct.className);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.Append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sb.Append(<span class="string">&quot;&#123;\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (jsonStruct.jsonStructList != <span class="literal">null</span> &amp;&amp; jsonStruct.jsonStructList.Count &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; jsonStruct.jsonStructList.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            CreateJsonCode(jsonStruct.jsonStructList[i], sb, tCount + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sb.Append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; kvp <span class="keyword">in</span> jsonStruct.fields)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tCount + <span class="number">1</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.Append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sb.AppendFormat(<span class="string">&quot;public &#123;0&#125; &#123;1&#125; &#123;&#123; get; set; &#125;&#125;\r\n&quot;</span>, kvp.Value, kvp.Key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; tCount; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.Append(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sb.Append(<span class="string">&quot;&#125;\r\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">JsonStruct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> className;</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; fields = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;JsonStruct&gt; jsonStructList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="导出屏蔽">导出屏蔽</h2><br><p>现在可以在导出之前加入屏蔽功能了，在上一篇说过：</p><ul class="lvl-0"><li class="lvl-2"><p>第一行第一列留空，其后为字段名</p></li><li class="lvl-2"><p>第二行第一列为配置表名，其后为字段类型</p></li><li class="lvl-2"><p>第三行第一列留空，其后可以留空或者填入字段含义</p></li><li class="lvl-2"><p>第四行第一列填入“BAN”则整张表不导出，其后填入“BAN”则对应列整列不导出</p></li><li class="lvl-2"><p>第五行开始，每行第一列填入“BAN”则整行不导出，其后为具体数据</p></li><li class="lvl-2"><p>以上填入“BAN”的位置若没有不导出的需求则留空</p></li></ul><p>要实现这个BAN的功能，只需在导出时进行过滤即可。导出时，若表的“第四行第一列填入BAN”则直接跳出导出方法不进行导出，否则先逐列遍历，把“第四行第二列及以后填入BAN”的列全部移除，再逐行遍历，把“第五行开始，每行第一列填入BAN”的行全部移除。经过这几次筛选，剩下的就是需要导出的表了。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Export</span>(<span class="params"><span class="built_in">string</span> filePath</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DataTable[] dts = ExcelHelper.ExcelToTable(filePath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dts == <span class="literal">null</span> || dts.Length &lt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; dts.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        DataTable dt = dts[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dt.Rows.Count &lt; <span class="number">4</span> || dt.Columns.Count &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dt.Rows[<span class="number">3</span>][<span class="number">0</span>].ToString().Contains(<span class="string">&quot;BAN&quot;</span>))<span class="comment">//第四行第一列填入BAN则整张表不导出</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> excelName = Path.GetFileName(filePath);</span><br><span class="line">        <span class="built_in">string</span> sheetName = dt.TableName;</span><br><span class="line">        <span class="built_in">string</span> dataTableName = dt.Rows[<span class="number">1</span>][<span class="number">0</span>].ToString();</span><br><span class="line"></span><br><span class="line">        m_DataTableNameList.Add(dataTableName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第五行开始，每行第一列如果填入BAN则此行不导出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> row = dt.Rows.Count - <span class="number">1</span>; row &gt; <span class="number">3</span>; row--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dt.Rows[row][<span class="number">0</span>].ToString().Contains(<span class="string">&quot;BAN&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                dt.Rows.RemoveAt(row);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第四行第二列及以后的列如果填入BAN则此列不导出(第一列为id，强制导出)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> col = dt.Columns.Count - <span class="number">1</span>; col &gt; <span class="number">0</span>; col--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (col &gt; <span class="number">1</span> &amp;&amp; dt.Rows[<span class="number">3</span>][col].ToString().Contains(<span class="string">&quot;BAN&quot;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                dt.Columns.RemoveAt(col);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ExportData(dt, excelName, sheetName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="结语">结语</h2><br><p>C#的数据生成和代码生成就写完了，下一篇实现Lua的代码生成然后进行测试。</p>]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> Unity </tag>
            
            <tag> 游戏数据管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity】Excel导出工具（一）</title>
      <link href="/post/c0831780/"/>
      <url>/post/c0831780/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p>在Unity开发中，游戏数据的配置和管理是一款游戏能否正常展开开发工作的前提。由于Excel直观易用功能强大易于学习，用它配置数据非常迅速且容错率较高，游戏策划通常使用Excel来配置客户端的游戏数据。这就需要我们Unity开发者能把在Excel中配置的游戏数据转换为可以在Unity中使用的数据文件。</p><p>下面将逐步去实现一个支持C#和Lua的Excel的导出工具。</p><h2 id="功能分析">功能分析</h2><br><h3 id="C-代码">C#代码</h3><br><p>对于C#，如果配置文件扩展名是自定义格式(如.data，.config等)是不行的，因为Unity只能识别特定几种格式的文本文件，自定义格式无法识别，如果从AssetBundle中加载文本文件也必然要用到TextAsset类加载文本文件里的内容，无法识别的格式也是加载不出来的。常用数据序列化的格式无外乎xml、json、csv这几个，考虑到读取、解析的速度问题，使用.bytes格式文件来存储二进制数据是最佳的选择，所以工具导出的文件格式只能是.bytes。</p><p>有了数据文件还不够，工具还需要根据Excel中配置的字段名生成对应的实体类，JSON字符串也要解析出实体类，我们只要复制数据文件和生成的实体类代码到项目中就可以立刻进行功能开发而不用额外花时间手写实体类。</p><blockquote><p>Visual Studio中已经实现了这个功能，编辑→选择性粘贴→将JSON粘贴为类。</p></blockquote><br><h3 id="Lua代码">Lua代码</h3><br><p>和C#相同，工具能够能把Excel中配置的字段直接生成Lua Table，Excel中填写的JSON字符串也要解析成Lua Table。</p><br><h3 id="导出限制">导出限制</h3><br><p>导出时，工具能够支持Excel中通过配置的方式来指定哪一行或哪一列不导出，也可以在表头直接指定这一张Excel整个不导出。</p><p>分析至此，下面就可以开始着手进行开发了。<br>    <br><br></p><h2 id="准备工作">准备工作</h2><br><p>Unity开发日常工作中最常用的语言就是C#、Lua、Python。Lua主要是写可以热更的业务代码，Python主要是结合Shell写一些批处理。所以，在不学习新语言新技术的前提下，这个Excel工具使用Winform或者UnityEditor来开发是比较快速的，考虑到工具需要在没有安装Unity的情况下也可使用，所以开发平台直接使用Winform。</p><p>工具的界面要包含如下几个功能：</p><br><div class="tabs" id="excel_ui"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#excel_ui-1">导出&选择界面</button></li><li class="tab"><button type="button" data-href="#excel_ui-2">路径配置界面</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="excel_ui-1"><ol><li class="lvl-3"><p>导出语言选择</p></li><li class="lvl-3"><p>Excel文件选择列表</p></li><li class="lvl-3"><p>读取、导出</p></li></ol><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/c0831780/1.webp" alt="界面"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="excel_ui-2"><ol><li class="lvl-3"><p>配置增删改</p></li><li class="lvl-3"><p>配置路径、导出路径选择和拖拽</p></li><li class="lvl-3"><p>配置名称</p></li></ol><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/c0831780/2.webp" alt="界面"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>随意设计就好，主要是一个ComboBox和CheckedListBox，读取和导出就是两个简单的Button，点击读取和导出时会弹出FolderBrowserDialog对话框选择路径，根据选择路径进行读取文件和导出数据。路径的配置使用xml保存在工具的根目录。</p><br><h2 id="读取Excel文件">读取Excel文件</h2><br><p>常规读取是使用数据库连接字符串连接到Excel进行逐列逐行读取，但我后来发现不同版本的Excel连接字符串的写法差异很大，不可能为每一个版本的Excel都写一个连接字符串，这里需要安装一个专门操作Excel的库：NPOI。使用NPOI不用关心Excel的版本差异只处理扩展名.xls和.xlsx就好，具体的用法看<a href="/post/28936e0a/">这篇文章</a>，代码如下：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NPOI.HSSF.UserModel;</span><br><span class="line"><span class="keyword">using</span> NPOI.SS.UserModel;</span><br><span class="line"><span class="keyword">using</span> NPOI.XSSF.UserModel;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExcelExport.Helper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ExcelHelper</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 根据文件路径读取Excel文件</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;file&quot;&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DataTable[] <span class="title">ExcelToTable</span>(<span class="params"><span class="built_in">string</span> file</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            IWorkbook workbook = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">string</span> fileExt = Path.GetExtension(file).ToLower();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (fileExt == <span class="string">&quot;.xlsx&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    workbook = <span class="keyword">new</span> XSSFWorkbook(fs);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (fileExt == <span class="string">&quot;.xls&quot;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    workbook = <span class="keyword">new</span> HSSFWorkbook(fs);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (workbook == <span class="literal">null</span>) </span><br><span class="line">                &#123; </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (workbook.NumberOfSheets &lt; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                DataTable[] dts = <span class="keyword">new</span> DataTable[workbook.NumberOfSheets];<span class="comment">//一张excel中可能有许多张表，要把这些表全部读出来</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; workbook.NumberOfSheets; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    dts[i] = <span class="keyword">new</span> DataTable();</span><br><span class="line">                    ISheet sheet = workbook.GetSheetAt(i);</span><br><span class="line">                    IRow header = sheet.GetRow(sheet.FirstRowNum);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (header == <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    List&lt;<span class="built_in">int</span>&gt; columns = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; header.LastCellNum; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">object</span> obj = GetValueType(header.GetCell(j));</span><br><span class="line">                        <span class="keyword">if</span> (obj == <span class="literal">null</span> || obj.ToString() == <span class="built_in">string</span>.Empty)<span class="comment">//中间出现空列也要读取</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            dts[i].Columns.Add(<span class="keyword">new</span> DataColumn(<span class="string">&quot;Columns&quot;</span> + j.ToString()));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            dts[i].Columns.Add(<span class="keyword">new</span> DataColumn(obj.ToString()));</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        columns.Add(j);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//数据</span></span><br><span class="line">                    <span class="built_in">int</span> rowIndex = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = sheet.FirstRowNum; j &lt;= sheet.LastRowNum; j++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        DataRow dr = dts[i].NewRow();</span><br><span class="line">                        <span class="built_in">bool</span> hasValue = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">foreach</span> (<span class="built_in">int</span> k <span class="keyword">in</span> columns)</span><br><span class="line">                        &#123;</span><br><span class="line">                            IRow row = sheet.GetRow(j); </span><br><span class="line"></span><br><span class="line">                            <span class="keyword">if</span>(row != <span class="literal">null</span>)</span><br><span class="line">                            &#123;</span><br><span class="line">                                dr[k] = GetValueType(row.GetCell(k));</span><br><span class="line">                            &#125;</span><br><span class="line">                      </span><br><span class="line">                            <span class="keyword">if</span> (dr[k] != <span class="literal">null</span> &amp;&amp; dr[k].ToString() != <span class="built_in">string</span>.Empty)</span><br><span class="line">                            &#123;</span><br><span class="line">                                hasValue = <span class="literal">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (hasValue || rowIndex == <span class="number">3</span>)<span class="comment">//第4行为标记行，可能为空</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            dts[i].Rows.Add(dr);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        rowIndex++;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    dts[i].TableName = sheet.SheetName;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> dts;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">GetValueType</span>(<span class="params">ICell cell</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cell == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (cell.CellType)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> CellType.Blank:</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">                <span class="keyword">case</span> CellType.Boolean:</span><br><span class="line">                    <span class="keyword">return</span> cell.BooleanCellValue;</span><br><span class="line">                <span class="keyword">case</span> CellType.Numeric:</span><br><span class="line">                    <span class="keyword">return</span> cell.NumericCellValue;</span><br><span class="line">                <span class="keyword">case</span> CellType.String:</span><br><span class="line">                    <span class="keyword">return</span> cell.StringCellValue;</span><br><span class="line">                <span class="keyword">case</span> CellType.Error:</span><br><span class="line">                    <span class="keyword">return</span> cell.ErrorCellValue;</span><br><span class="line">                <span class="keyword">case</span> CellType.Formula:</span><br><span class="line">                    <span class="keyword">return</span> GetCachedFormulaResult(cell);</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">string</span>.Empty;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">object</span> <span class="title">GetCachedFormulaResult</span>(<span class="params">ICell cell</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">switch</span> (cell.CachedFormulaResultType)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> CellType.Unknown:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">case</span> CellType.Numeric:</span><br><span class="line">                    <span class="keyword">return</span> cell.NumericCellValue;</span><br><span class="line">                <span class="keyword">case</span> CellType.String:</span><br><span class="line">                    <span class="keyword">return</span> cell.StringCellValue;</span><br><span class="line">                <span class="keyword">case</span> CellType.Blank:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">case</span> CellType.Boolean:</span><br><span class="line">                    <span class="keyword">return</span> cell.BooleanCellValue;</span><br><span class="line">                <span class="literal">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码在读取按钮点击时调用会返回一个DataTable的数组，每一个DataTable对应一张表，通过行列的索引就可以读取到对应位置的配置数据。</p><br><h2 id="配置格式">配置格式</h2><br><p>Excel的配置格式要视情况而定，这里是这样规定的：</p><ul class="lvl-0"><li class="lvl-2"><p>第一行第一列留空，其后为字段名</p></li><li class="lvl-2"><p>第二行第一列为配置表名，其后为字段类型</p></li><li class="lvl-2"><p>第三行第一列留空，其后可以留空或者填入字段含义</p></li><li class="lvl-2"><p>第四行第一列填入“BAN”则整张表不导出，其后填入“BAN”则对应列整列不导出</p></li><li class="lvl-2"><p>第五行开始，每行第一列填入“BAN”则整行不导出，其后为具体数据</p></li><li class="lvl-2"><p>以上填入“BAN”的位置若没有不导出的需求则留空</p></li></ul><p><img src= "/images/lazyload.webp" data-lazy-src="/post/c0831780/3.webp" alt="配置"></p><p>下一篇进行数据生成和代码生成的功能开发，并将其整合到UI界面上。</p>]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
            <tag> Unity </tag>
            
            <tag> 游戏数据管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（转）NPOI的基本使用</title>
      <link href="/post/28936e0a/"/>
      <url>/post/28936e0a/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p>在NPOI初识中简了解了下NPOI的简介和优势，接下来看一下如果下载使用。</p><br><h2 id="新建控制台应用程序">新建控制台应用程序</h2><p><img src= "/images/lazyload.webp" data-lazy-src="/post/28936e0a/1.webp" alt="新建程序"></p><br><h2 id="利用Nuget获取NPOI">利用Nuget获取NPOI</h2><br><p>这里引用的2.4.1最稳定版本：<br><img src= "/images/lazyload.webp" data-lazy-src="/post/28936e0a/2.webp" alt="新建程序"></p><p>NPOI引用添加完成后，可以看到主要添加了四个dll的引用</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/28936e0a/3.webp" alt="引用"></p><p>在简介中，也介绍了四种dll的用途。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/28936e0a/4.webp" alt="用途"></p><p>通过这几个dll，可以看出，NPOI的用途还是挺多的。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/28936e0a/5.webp" alt="用途"></p><br><h2 id="简单使用增删改查">简单使用增删改查</h2><br><p>接下来实现一下简单的对excel的增、删、改、查功能。在项目文件下创建一个NPOIDemo.xlsx</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/28936e0a/6.webp" alt="demo"></p><p>初始文件：</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/28936e0a/7.webp" alt="初始文件"></p><p>代码执行过程中数据记录：</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/28936e0a/8.webp" alt="代码"></p><p>执行结果：</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/28936e0a/9.webp" alt="执行结果"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> NPOI.HSSF.UserModel;</span><br><span class="line"><span class="keyword">using</span> NPOI.SS.UserModel;</span><br><span class="line"><span class="keyword">using</span> NPOI.XSSF.UserModel;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">NPOIDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> path = AppDomain.CurrentDomain.BaseDirectory + <span class="string">&quot;NPOIDemo.xlsx&quot;</span>;</span><br><span class="line"></span><br><span class="line">            IWorkbook workbook = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (<span class="keyword">var</span> fs = <span class="keyword">new</span> FileStream(path, FileMode.Open, FileAccess.ReadWrite))</span><br><span class="line">                &#123;</span><br><span class="line">                                    <span class="comment">// 实例化</span></span><br><span class="line">                <span class="keyword">if</span> (path.IndexOf(<span class="string">&quot;.xlsx&quot;</span>) &gt; <span class="number">0</span>) <span class="comment">// 2007</span></span><br><span class="line">                    workbook = <span class="keyword">new</span> XSSFWorkbook(fs);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (path.IndexOf(<span class="string">&quot;.xls&quot;</span>) &gt; <span class="number">0</span>) <span class="comment">// 2003</span></span><br><span class="line">                    workbook = <span class="keyword">new</span> HSSFWorkbook(fs);</span><br><span class="line">                    <span class="comment">// 查询</span></span><br><span class="line">                    <span class="keyword">if</span> (workbook != <span class="literal">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ISheet sheet = workbook.GetSheetAt(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) <span class="comment">// 遍历每一个行,然后读取第一个单元格的内容</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">if</span> (sheet.GetRow(i) == <span class="literal">null</span> || sheet.GetRow(i).GetCell(<span class="number">0</span>) == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">                            Console.WriteLine(sheet.GetRow(i).GetCell(<span class="number">0</span>).StringCellValue);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//把这个HSSFWorkbook实例写入文件</span></span><br><span class="line">                <span class="comment">// 增加sheet</span></span><br><span class="line">                workbook.CreateSheet(<span class="string">&quot;SheetZZH&quot;</span>);</span><br><span class="line"></span><br><span class="line">                FileStream file = <span class="keyword">new</span> FileStream(path, FileMode.OpenOrCreate,FileAccess.ReadWrite);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> sheet2 = workbook.GetSheet(<span class="string">&quot;SheetZZH&quot;</span>);</span><br><span class="line">                sheet2.CreateRow(<span class="number">0</span>).CreateCell(<span class="number">0</span>, CellType.String).SetCellValue(<span class="string">&quot;Sheet2Value1&quot;</span>); <span class="comment">// 新增</span></span><br><span class="line">                sheet2.GetRow(<span class="number">0</span>).CreateCell(<span class="number">1</span>, CellType.String).SetCellValue(<span class="string">&quot;Sheet2Value2&quot;</span>); <span class="comment">// 新增</span></span><br><span class="line">                sheet2.GetRow(<span class="number">0</span>).CreateCell(<span class="number">2</span>, CellType.String).SetCellValue(<span class="string">&quot;Sheet2Value3&quot;</span>); <span class="comment">// 新增</span></span><br><span class="line">                workbook.Write(file);</span><br><span class="line">                file.Close();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">using</span> (FileStream fs = <span class="keyword">new</span> FileStream(path, FileMode.Create, FileAccess.Write, FileShare.Write))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">var</span> <span class="keyword">value</span> = sheet2.GetRow(<span class="number">0</span>).GetCell(<span class="number">1</span>).StringCellValue;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;shee2 row 0 cell 1 is &quot;</span> + <span class="keyword">value</span>);</span><br><span class="line">                    sheet2.GetRow(<span class="number">0</span>).GetCell(<span class="number">1</span>).SetCellValue(<span class="string">&quot;Sheet2Value2.2&quot;</span>); <span class="comment">// 修改</span></span><br><span class="line"></span><br><span class="line">                    sheet2.GetRow(<span class="number">0</span>).RemoveCell(sheet2.GetRow(<span class="number">0</span>).GetCell(<span class="number">2</span>)); <span class="comment">// 删除</span></span><br><span class="line"></span><br><span class="line">                    workbook.Write(fs);</span><br><span class="line">                    fs.Close();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Complete&quot;</span>);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多功能的使用，可参照该网址进行学习：<a href="https://www.cnblogs.com/joean/p/4661056.html">NPOI使用手册</a></p><br><hr><br><p>版权声明：本文为简书博主「张中华」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：<a href="https://www.jianshu.com/p/2c240a47bbe3">https://www.jianshu.com/p/2c240a47bbe3</a></p>]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NPOI </tag>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity】在Unity中实现TCP通信（四）</title>
      <link href="/post/d57f276/"/>
      <url>/post/d57f276/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p>前几篇内容</p><p><a href="/post/c772a499/">在Unity中实现TCP通信（一）</a></p><p><a href="/post/f7644841/">在Unity中实现TCP通信（二）</a></p><p><a href="/post/ba7aeb13/">在Unity中实现TCP通信（三）</a></p><p>分别阐述了Unity中实现TCP通信的客户端、服务端的实现以及引入ProtoBuf进行数据序列化的方式。这篇来写一下心跳机制。</p><br><h2 id="心跳机制原理">心跳机制原理</h2><br><p>在第二篇内容中，对于客户端是否断开连接，是通过判断接受到的数据流是否是空来判断连接是否断开。</p><p>代码是这样的：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> length = m_Socket.EndReceive(ir);</span><br><span class="line"><span class="keyword">if</span>(length &lt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    IPEndPoint endPoint = m_Socket.RemoteEndPoint <span class="keyword">as</span> IPEndPoint;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;客户端：&quot;</span> + endPoint.Address.ToString() + <span class="string">&quot;已断开连接&quot;</span>);</span><br><span class="line">    Close();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然用这种方式是不足以说明客户端真的已经断开连接的，因此这里就需要引入心跳机制来解决这个断开问题。</p><br><h2 id="心跳机制的概念">心跳机制的概念</h2><br><p>所谓心跳机制，就是服务端每隔一段时间向客户端发送一个空包（根据实际需求，也可以带上当前时间戳，总之包体不能太大），若客户端不能在规定时间内做出应答则认为连接已断开。而且心跳机制这个名字也非常具有象征意义，它就像人的心脏跳动一样，按照一定频率不断的去确认客户端是否还“活着”。</p><p>人的心脏如果不跳了，那么人肯就是死了，而客户端如果不能做出应答，也就像人的心脏停止跳动一样，“死了”。</p><blockquote><p>PS:因为游戏开发中客户端需要不断更新服务器时间，并且若玩家正在游戏中活跃势必会产生发包行为，所以在这篇博文中采用服务端向客户端发送心跳包并带上当前时间戳的方式。而反过来客户端定时给服务端发心跳包也是更为常见的方式，但不管谁主动谁被动两边互通数据不可避免。</p></blockquote><p>基于这个逻辑，下面将在<a href="/post/f7644841/">第二篇</a>代码的基础上实现心跳机制。</p><br><h2 id="实现心跳机制">实现心跳机制</h2><br><h3 id="心跳计时器">心跳计时器</h3><br><p>既然是按照一定频率来发送空包，肯定就要使用计时器去触发了，这里直接构造一个System.Threading.Timer的计时器对象，每隔15000毫秒（15秒）触发一次：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">m_HeartBitTimer = <span class="keyword">new</span> Timer(HeartBit, <span class="number">0</span>, <span class="number">0</span>, <span class="number">15000</span>);</span><br></pre></td></tr></table></figure><br><h3 id="使用时间戳来计算心跳间隔时间">使用时间戳来计算心跳间隔时间</h3><br><p>心跳需要每隔一段时间触发一次，因此这里需要采用时间戳来计算触发时间,时间戳就是从过去到现在的一段时间，使用两个时间戳相减即可得到这中间流逝的时间。</p><p>比如服务器启动时间是2020年6月9日14点30分0秒，那么：从服务器启动到当前所经过的时间 = 从1970年1月1日0分0秒到当前的时间 - 从1970年1月1日0分0秒到2020年6月9日14点30分0秒。</p><p>若心跳每隔15秒触发一次，则这个差值大于等于15的时候就开始执行心跳逻辑。</p><p>采用时间戳的好处就是，不需要实时累计，在需要的时候计算一下即可得到精确的差值。而实时累加由于精度问题，往往会产生一定误差，且需要不断累计比较繁琐。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HeartBit</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    TimeSpan ts = DateTime.Now - <span class="keyword">new</span> DateTime(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (m_TimeStamp == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    m_TimeStamp = ts.TotalSeconds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ts.TotalSeconds - m_TimeStamp &gt; DIS_CONNECT_TIME)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m_IsCheckHeart)</span><br><span class="line">        &#123;</span><br><span class="line">            m_IsCheckHeart = <span class="literal">true</span>;</span><br><span class="line">            m_TimeStamp = ts.TotalSeconds;</span><br><span class="line">            Send(<span class="number">1</span>, <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            Close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里DateTime.Now - new DateTime(1970, 1, 1, 0, 0, 0, 0)即是从1970年1月1日0点0分0秒开始到目前为止的一段时间，使用秒做单位</p><p>m_TimeStamp是一个标志位，它记录的是一次心跳发生之前的时间，ts.ToalSecondes - m_TimeStamp也就是当前时间和一次心跳发生前的时间的差值，即从一次心跳之前到现在过去了多久。 DIS_CONNECT_TIME就是一个触发时间的常量，这里定义为15秒。</p><br><h3 id="收包处理">收包处理</h3><br><p>因为这里把编号为1的包作为心跳包，所以在收包的时候要对编号为1的包体进行特殊处理：收到1号包的时候把时间戳归0，等待下一次心跳触发。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckReceiveBuffer</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">lock</span> (m_ReceiveQueue)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_ReceiveQueue.Count &lt; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">byte</span>[] buffer = m_ReceiveQueue.Dequeue();</span><br><span class="line">        <span class="built_in">byte</span>[] msgContent = <span class="keyword">new</span> <span class="built_in">byte</span>[buffer.Length - <span class="number">2</span>];</span><br><span class="line">        <span class="built_in">ushort</span> msgCode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream(buffer))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] msgCodeBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">2</span>];</span><br><span class="line">            ms.Read(msgCodeBuffer, <span class="number">0</span>, msgCodeBuffer.Length);</span><br><span class="line">            msgCode = BitConverter.ToUInt16(msgCodeBuffer, <span class="number">0</span>);</span><br><span class="line">            ms.Read(msgContent, <span class="number">0</span>, msgContent.Length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (msgCode == <span class="number">1</span>)<span class="comment">//若收到编号为1的心跳包，则把时间戳归0，等待下一次心跳触发</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_IsCheckHeart = <span class="literal">false</span>;</span><br><span class="line">            m_TimeStamp = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            text content = ProtoBufUtil.BytesToObject&lt;text&gt;(msgContent, <span class="number">0</span>, msgContent.Length);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;消息编号：&quot;</span> + msgCode + <span class="string">&quot;,内容：&quot;</span> + content.content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="结语">结语</h2><br><p>好了，心跳机制到这里也写完了。Unity TCP部分我写了4篇文章，算是把整个流程说了大概。其实在实际的开发工作中，网络部分要远远比这几篇文章所提到的内容复杂得多，而笔者能力有限无法将这些实际问题和解决方案一一进行细致的阐述。当然，不管写的好与坏，至少这对于我自己关于这部分知识也起到了梳理和夯实的作用。</p><p>接下来我会写一些关于Unity中的行为树，状态机，UI框架，资源管理框架，优化等内容的文章，期待和大家共同进步。</p>]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> Unity </tag>
            
            <tag> TCP通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity】在Unity中实现TCP通信（三）</title>
      <link href="/post/ba7aeb13/"/>
      <url>/post/ba7aeb13/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p>通过上两篇内容</p><p><a href="/post/c772a499/">在Unity中实现TCP通信（一）</a></p><p><a href="/post/f7644841/">在Unity中实现TCP通信（二）</a></p><p>服务端和客户端的TCP通信已经实现了。</p><p>但是，在之前的通信中是直接使用了字符串来进行数据的传输。而在实际开发当中，要传输的数据结构是非常复杂的，仅仅使用字符串势必无法满足基本的开发需求。</p><p>于是，本篇将阐述一下TCP网络通信中常用的序列化工具，Protobuf。</p><br><h2 id="安装ProtoBuf">安装ProtoBuf</h2><br><p>Protobuf是Google研发的一种数据序列化工具，它使用Tag技术使数据在序列化成byte时变得非常的小，解析速度也是非常的快，所以很多软件、游戏的网络通讯部分通常都会采用Protobuf来进行数据的传输。</p><p>关于Tag技术及Protobuf原理这里不做过多的阐述，有兴趣可以看<a href="https://www.jianshu.com/p/72108f0aefca">这篇文章</a>。</p><br><h3 id="安装使用Protobuf以及生成CSharp代码">安装使用Protobuf以及生成CSharp代码</h3><br><h4 id="安装-Python">安装 Python</h4><br><p>下载Python27，安装并添加系统变量</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba7aeb13/1.webp" alt="安装Python"></p><p>在命令行执行&quot;python&quot; 命令，出现下图表示安装成功</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba7aeb13/2.webp" alt="安装Python"></p><br><h4 id="安装Protobuf">安装Protobuf</h4><br><p>先在<a href="https://github.com/protocolbuffers/protobuf/releases">这里</a>下载Protobuf，这是一个编译好的发布版本，如果想自己编译就下载源码即可，我用得是2.5.0</p><p>在目录Protobuf-2.5.0\python进入命令行，执行命令&quot;python <a href="http://setup.py">setup.py</a> install&quot;（进入到python路径然后shift+右键打开命令行即可）</p><p>出现下图则安装成功</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba7aeb13/3.webp" alt="安装Python"></p><br><h4 id="编译Protobuf">编译Protobuf</h4><br><p>从<a href="https://github.com/protocolbuffers/protobuf/releases">这里</a>下载Protobuf Net的源码，分别编译ProtoGen，precompile，protobuf-net这3个工程。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba7aeb13/4.webp" alt="安装Protobuf"></p><p>将得到这些文件，把它们拷出来，放到和Protobuf同级目录下，这里放到了proto-gen-cs目录下。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba7aeb13/5.webp" alt="安装Protobuf"></p><p>由于这个下载地址下载速度堪忧，这里给出<a href="http://pan.baidu.com/s/1eRIv3oe">编译好的版本</a>，直接下载使用即可。</p><br><h4 id="批量转换-proto文件">批量转换.proto文件</h4><br><p>在Protobuf同级目录下创建一个空的txt，将其重命名为buildcs.bat(名字随意)，如图。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba7aeb13/6.webp" alt="安装Protobuf"></p><p>然后在bat文件内输入这么一行代码，保存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> Path=proto-gen-cs\protogen.exe</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /f <span class="string">&quot;delims=&quot;</span> %%i <span class="keyword">in</span> (<span class="string">&#x27;dir  /b Proto &quot;proto/*.proto&quot;&#x27;</span>) <span class="keyword">do</span> %Path% -i:proto/%%i -o:cs/%%~ni.cs</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>proto文件夹下创建测试proto协议，新建一个空txt，重命名为test.proto。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba7aeb13/7.webp" alt="安装Protobuf"></p><p>使用pad++或者sublime之类的编辑器打开它，输入如下代码</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">optional</span> <span class="type">string</span> content = <span class="number">1</span>;                    <span class="comment">//name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里如果不了解proto协议如何编写可以看<a href="https://blog.csdn.net/jiaweiok123/article/details/87809831">这篇文章</a></p><p>双击buildcs.bat不出意外，会在cs文件夹下得到一个转换后的csharp代码，长这个样子。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba7aeb13/8.webp" alt="转换Protobuf代码"></p><br><h3 id="使用生成的代码序列化数据进行Tcp通信">使用生成的代码序列化数据进行Tcp通信</h3><br><p>有了proto的代码，就可以将其导入到项目中使用。</p><br><h4 id="客户端">客户端</h4><br><p>把protobuf-net.dll拖入到unity的plugins文件夹下，把生成的test.cs拖入到unity的scripts文件夹下。</p><p>先封装一个工具类，它用于序列化和反序列化数据。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> ProtoBuf;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProtoBufUtil</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">ObjectToBytes</span>&lt;<span class="title">T</span>&gt;(<span class="params">T instance</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] array;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                array = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">                Serializer.Serialize(memoryStream, instance);</span><br><span class="line">                array = <span class="keyword">new</span> <span class="built_in">byte</span>[memoryStream.Length];</span><br><span class="line">                memoryStream.Position = <span class="number">0L</span>;</span><br><span class="line">                memoryStream.Read(array, <span class="number">0</span>, array.Length);</span><br><span class="line">                memoryStream.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> array;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> T <span class="title">BytesToObject</span>&lt;<span class="title">T</span>&gt;(<span class="params"><span class="built_in">byte</span>[] bytesData, <span class="built_in">int</span> offset, <span class="built_in">int</span> length</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bytesData.Length == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            MemoryStream memoryStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            memoryStream.Write(bytesData, <span class="number">0</span>, bytesData.Length);</span><br><span class="line">            memoryStream.Position = <span class="number">0L</span>;</span><br><span class="line">            T result = Serializer.Deserialize&lt;T&gt;(memoryStream);</span><br><span class="line">            memoryStream.Dispose();</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">default</span>(T);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后把<a href="/post/f7644841/">第二篇博客</a>中客户端发送数据的代码改一下</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onClick</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(!SocketMgr.Instance.IsConnected)</span><br><span class="line">&#123;</span><br><span class="line">            SocketMgr.Instance.Connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">client.test sendContent = <span class="keyword">new</span> client.test();<span class="comment">//创建protobuf序列化实例</span></span><br><span class="line">sendContent.content = inputField.text;<span class="comment">//对应字段赋值</span></span><br><span class="line"><span class="built_in">byte</span>[] buffer = ProtoBufUtil.ObjectToBytes&lt;test&gt;(sendContent);<span class="comment">//序列化</span></span><br><span class="line">SocketMgr.Instance.Send(<span class="number">1</span>, buffer);<span class="comment">//发送</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，只要点击按钮，客户端会把数据序列化成protobuf的格式并发送到服务端。</p><br><h4 id="服务端">服务端</h4><br><p>添加对protobuf-net.dll（就是上面提到的那个protobuf-net.dll文件）的引用。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba7aeb13/9.webp" alt="服务端"></p><p>把客户端的ProtobufUtil拖到服务端工程目录下，再把test.cs到也拖到工程目录下。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba7aeb13/10.webp" alt="服务端"></p><p>然后把<a href="/post/f7644841/">第二篇博客</a>中服务端解析数据的代码改一下。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckReceiveBuffer</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">lock</span> (m_ReceiveQueue)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_ReceiveQueue.Count &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">byte</span>[] buffer = m_ReceiveQueue.Dequeue();</span><br><span class="line">        <span class="built_in">byte</span>[] msgContent = <span class="keyword">new</span> <span class="built_in">byte</span>[buffer.Length - <span class="number">2</span>];</span><br><span class="line">        <span class="built_in">ushort</span> msgCode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream(buffer))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] msgCodeBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">2</span>];</span><br><span class="line">            ms.Read(msgCodeBuffer, <span class="number">0</span>, msgCodeBuffer.Length);</span><br><span class="line">            msgCode = BitConverter.ToUInt16(msgCodeBuffer, <span class="number">0</span>);</span><br><span class="line">            ms.Read(msgContent, <span class="number">0</span>, msgContent.Length);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        test content = ProtoBufUtil.BytesToObject&lt;test&gt;(msgContent, <span class="number">0</span>, msgContent.Length);<span class="comment">//调用protobuf，把数据反序列化为test对象</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;消息编号：&quot;</span> + msgCode + <span class="string">&quot;,内容：&quot;</span> + content.content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里服务端也顺利的使用protobuf来解析数据了，下面开始测试。</p><br><h2 id="测试">测试</h2><br><p>还是老套路，先启动服务器，然后客户端连接服务器，成功</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba7aeb13/11.webp" alt="服务端"></p><p>然后客户端输入任意内容点击发送</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba7aeb13/12.webp" alt="服务端"></p><p>服务端成功的使用Protobuf解析了数据，啪啪啪，此处仍然要有掌声雷动。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba7aeb13/13.webp" alt="服务端"></p><br><h2 id="结语">结语</h2><br>到这里protobuf的安装、使用就已经全部写完了，下一篇把最后的心跳机制也写一下，整个TCP网络部分基本就写完了。]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> Unity </tag>
            
            <tag> TCP通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity】在Unity中实现TCP通信（二）</title>
      <link href="/post/f7644841/"/>
      <url>/post/f7644841/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p>上一篇实现了Unity客户端的TCP通信，这篇把服务端的TCP也实现一下，并使客户端和服务端进行联调。</p><p>对于客户端来说，一个应用（一个设备）对应一个Socket。</p><p>但服务端不同，一个服务端需要处理许多个客户端的请求，每有一个客户端和服务端成功建立连接都需要创建一个新的socket的对象，这也体现了Tcp协议中一对一通讯的这一特点。</p><p>服务端Socket的创建流程和客户端类似，依然需要三个参数</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Socket socket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br></pre></td></tr></table></figure><p>不明白每个参数代表什么意思可以看我的<a href="/post/c772a499/">上一篇</a>客户端的部分，里面有详细的介绍。</p><p>下面开始服务端Socket的工作流程，这里服务端使用.NetFramework创建控制台应用来进行开发。</p><br><h2 id="建立连接">建立连接</h2><br><p>服务的连接分为以下几个步骤：</p><ul class="lvl-0"><li class="lvl-2"><p>调用Bind方法绑定一个IP和端口，成功之后调用Listen方法设置最大监听数，当连接的客户端超过这个数值就不再建立新的连接</p></li><li class="lvl-2"><p>另起一个线程并进入阻塞状态，调用Accept方法等待客户端连接</p></li><li class="lvl-2"><p>有客户端成功连接，创建对应客户端的消息处理实例，并把该客户端加入一个表中以备广播时使用</p></li><li class="lvl-2"><p>服务端程序关闭同时关闭所有客户端的连接</p></li></ul><br><h3 id="Bind">Bind</h3><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    m_Socket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);</span><br><span class="line">    m_AcceptThread = <span class="keyword">new</span> Thread(OnAccept);<span class="comment">//另起一个线程进入阻塞状态等待客户端连接</span></span><br><span class="line">    m_Clients = <span class="keyword">new</span> List&lt;RoleClient&gt;();<span class="comment">//所有连接的客户端</span></span><br><span class="line">    m_Socket.Bind(<span class="keyword">new</span> IPEndPoint(IPAddress.Parse(m_IP), m_Port));<span class="comment">//绑定ip端口</span></span><br><span class="line">    m_Socket.Listen(<span class="number">50</span>);<span class="comment">//最大监听数50</span></span><br><span class="line">    m_AcceptThread.Start();<span class="comment">//进入等待连接状态</span></span><br><span class="line">    AppDomain.CurrentDomain.ProcessExit += OnApplicatonQuit;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;服务器启动成功！&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;监听IP：&quot;</span> + m_IP + <span class="string">&quot;，端口：&quot;</span> + m_Port);</span><br><span class="line">    <span class="comment">//广播代码</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> str = Console.ReadLine();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(str)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (str.Equals(<span class="string">&quot;close all&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = m_Clients.Count - <span class="number">1</span>; i &gt;= <span class="number">0</span> ; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                m_Clients[i].Close(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_Clients.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                m_Clients[i].Send(<span class="number">1</span>, Encoding.UTF8.GetBytes(str));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Accept">Accept</h3><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnAccept</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Socket client = m_Socket.Accept();<span class="comment">//尝试接收一个客户端的连接</span></span><br><span class="line">            IPEndPoint clientPoint = client.RemoteEndPoint <span class="keyword">as</span> IPEndPoint;</span><br><span class="line">            m_Clients.Add(<span class="keyword">new</span> RoleClient(client, m_Clients));<span class="comment">//为客户端建立一个请求处理实例，并加入到表中</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;客户端:&quot;</span>+ clientPoint.Address.ToString() +<span class="string">&quot;已经连接！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="Abort">Abort</h3><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnApplicatonQuit</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = m_Clients.Count - <span class="number">1</span>; i &gt; <span class="number">-1</span> ; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        m_Clients[i].Close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m_AcceptThread.Abort();</span><br><span class="line">    m_Clients.Clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里客户端请求连接，服务端接受连接请求并创建对应的请求实例的功能已经实现完了，然后简单测试一下。</p><p>先启动服务器，如图，成功监听了本地127.0.0.1的ip和8888端口<img src= "/images/lazyload.webp" data-lazy-src="/post/f7644841/1.webp" alt="测试"><br>客户端制作一个测试的界面，把SocketMgr挂到一个空物体上，并编写对应的测试代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Button button;</span><br><span class="line"><span class="keyword">public</span> InputField inputField;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> ()</span> </span><br><span class="line">&#123;</span><br><span class="line">    button.onClick.AddListener(onClick);</span><br><span class="line">inputField.gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">SocketMgr.Instance.OnConnectSuccess = <span class="built_in">delegate</span> () </span><br><span class="line">&#123;</span><br><span class="line">        inputField.gameObject.SetActive(<span class="literal">true</span>);</span><br><span class="line">button.transform.Find(<span class="string">&quot;Text&quot;</span>).GetComponent&lt;Text&gt;().text = <span class="string">&quot;发送&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">    SocketMgr.Instance.OnDisConnect = <span class="built_in">delegate</span> ()</span><br><span class="line">    &#123;</span><br><span class="line">        inputField.gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">button.transform.Find(<span class="string">&quot;Text&quot;</span>).GetComponent&lt;Text&gt;().text = <span class="string">&quot;连接&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SocketMgr.Instance.onReceive = OnReceive;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnReceive</span>(<span class="params"><span class="built_in">ushort</span> arg1, <span class="built_in">byte</span>[] arg2</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    inputField.text = arg1 + <span class="string">&quot;,&quot;</span> + Encoding.UTF8.GetString(arg2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">onClick</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!SocketMgr.Instance.IsConnected)</span><br><span class="line">&#123;</span><br><span class="line">        SocketMgr.Instance.Connect(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SocketMgr.Instance.Send(<span class="number">1</span>, Encoding.UTF8.GetBytes(inputField.text));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SocketMgr就是我<a href="/post/c772a499/">上一篇</a>客户端部分封装的Socket通信框架，具体的代码已经全部都贴到到了博客中。</p><p>接下来点击运行，见证奇迹的时刻就要到了<img src= "/images/lazyload.webp" data-lazy-src="/post/f7644841/3.webp" alt="测试"><br>点击连接按钮就会通过Connect方法向服务端发送建立连接的请求，<img src= "/images/lazyload.webp" data-lazy-src="/post/f7644841/2.webp" alt="测试"><br>如图，这里成功的建立的了连接，此处应有掌声雷动。<br><img src= "/images/lazyload.webp" data-lazy-src="/post/f7644841/4.webp" alt="测试"></p><br><h2 id="数据通信">数据通信</h2><br><p>服务端数据通信部分与客户端基本类似，不同的地方就在于服务端不存在主线程和非主线程的区分，拆包后直接在BeginReceive的回调中进行数据派发即可。因为客户端部分已经做了细致的阐述这里就不多赘述，直接上代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Server</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RoleClient</span></span><br><span class="line">    &#123;</span><br><span class="line">        Timer timer;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">RoleClient</span>(<span class="params">Socket socket, List&lt;RoleClient&gt; otherClients</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_OtherClients = otherClients;</span><br><span class="line">            m_ReceiveBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span> * <span class="number">512</span>];</span><br><span class="line">            m_ReceiveStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            m_ReceiveQueue = <span class="keyword">new</span> Queue&lt;<span class="built_in">byte</span>[]&gt;();</span><br><span class="line">            m_SendQueue = <span class="keyword">new</span> Queue&lt;<span class="built_in">byte</span>[]&gt;();</span><br><span class="line">            m_Socket = socket;</span><br><span class="line">            m_IsConnected = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//m_ReceiveThread = new Thread(CheckReceive);</span></span><br><span class="line">            timer = <span class="keyword">new</span> Timer(CheckReceiveBuffer, <span class="number">0</span>, <span class="number">0</span>,<span class="number">200</span>);</span><br><span class="line">            <span class="comment">//m_ReceiveThread.Start();</span></span><br><span class="line">            StartReceive();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">ushort</span> msgCode, <span class="built_in">byte</span>[] buffer</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] sendMsgBuffer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> msgLen = buffer.Length;</span><br><span class="line">                <span class="built_in">byte</span>[] lenBuffer = BitConverter.GetBytes((<span class="built_in">ushort</span>)msgLen);</span><br><span class="line">                <span class="built_in">byte</span>[] msgCodeBuffer = BitConverter.GetBytes(msgCode);</span><br><span class="line">                ms.Write(lenBuffer, <span class="number">0</span>, lenBuffer.Length);</span><br><span class="line">                ms.Write(msgCodeBuffer, <span class="number">0</span>, msgCodeBuffer.Length);</span><br><span class="line">                ms.Write(buffer, <span class="number">0</span>, msgLen);</span><br><span class="line">                sendMsgBuffer = ms.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">lock</span> (m_SendQueue)</span><br><span class="line">            &#123;</span><br><span class="line">                m_SendQueue.Enqueue(sendMsgBuffer);</span><br><span class="line">                CheckSendBuffer();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Close</span>(<span class="params"><span class="built_in">bool</span> isForce = <span class="literal">false</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123; m_Socket.Shutdown(SocketShutdown.Both); &#125;</span><br><span class="line">            <span class="keyword">catch</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (isForce)</span><br><span class="line">            &#123;</span><br><span class="line">                IPEndPoint endPoint = m_Socket.RemoteEndPoint <span class="keyword">as</span> IPEndPoint;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;强制关闭与客户端：&quot;</span> + endPoint.Address.ToString() + <span class="string">&quot;的连接&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m_IsConnected = <span class="literal">false</span>;</span><br><span class="line">            m_Socket.Close();</span><br><span class="line">            m_ReceiveStream.SetLength(<span class="number">0</span>);</span><br><span class="line">            m_ReceiveQueue.Clear();</span><br><span class="line">            m_SendQueue.Clear();</span><br><span class="line">            timer.Dispose();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m_OtherClients != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_OtherClients.Remove(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            timer = <span class="literal">null</span>;</span><br><span class="line">            m_SendQueue = <span class="literal">null</span>;</span><br><span class="line">            m_ReceiveQueue = <span class="literal">null</span>;</span><br><span class="line">            m_ReceiveStream = <span class="literal">null</span>;</span><br><span class="line">            m_ReceiveBuffer = <span class="literal">null</span>;</span><br><span class="line">            m_OtherClients = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartReceive</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!m_IsConnected) <span class="keyword">return</span>;</span><br><span class="line">            m_Socket.BeginReceive(m_ReceiveBuffer, <span class="number">0</span>, m_ReceiveBuffer.Length, SocketFlags.None, OnReceive, m_Socket);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnReceive</span>(<span class="params">IAsyncResult ir</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!m_IsConnected) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> length = m_Socket.EndReceive(ir);</span><br><span class="line">                <span class="keyword">if</span>(length &lt; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    IPEndPoint endPoint = m_Socket.RemoteEndPoint <span class="keyword">as</span> IPEndPoint;</span><br><span class="line">                    Console.WriteLine(<span class="string">&quot;客户端：&quot;</span> + endPoint.Address.ToString() + <span class="string">&quot;已断开连接&quot;</span>);</span><br><span class="line">                    Close();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                m_ReceiveStream.Position = m_ReceiveStream.Length;</span><br><span class="line">                m_ReceiveStream.Write(m_ReceiveBuffer, <span class="number">0</span>, length);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (m_ReceiveStream.Length &lt; <span class="number">3</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    StartReceive();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    m_ReceiveStream.Position = <span class="number">0</span>;</span><br><span class="line">                    <span class="built_in">byte</span>[] msgLenBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">2</span>];</span><br><span class="line">                    m_ReceiveStream.Read(msgLenBuffer, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">                    <span class="built_in">int</span> msgLen = BitConverter.ToUInt16(msgLenBuffer, <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">                    <span class="built_in">int</span> fullLen = <span class="number">2</span> + msgLen;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (m_ReceiveStream.Length &lt; fullLen)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">byte</span>[] msgBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[msgLen];</span><br><span class="line">                    m_ReceiveStream.Position = <span class="number">2</span>;</span><br><span class="line">                    m_ReceiveStream.Read(msgBuffer, <span class="number">0</span>, msgLen);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">lock</span> (m_ReceiveQueue)</span><br><span class="line">                    &#123;</span><br><span class="line">                        m_ReceiveQueue.Enqueue(msgBuffer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">int</span> remainLen = (<span class="built_in">int</span>)m_ReceiveStream.Length - fullLen;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (remainLen &lt; <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        m_ReceiveStream.Position = <span class="number">0</span>;</span><br><span class="line">                        m_ReceiveStream.SetLength(<span class="number">0</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    m_ReceiveStream.Position = fullLen;</span><br><span class="line">                    <span class="built_in">byte</span>[] remainBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[remainLen];</span><br><span class="line">                    m_ReceiveStream.Read(remainBuffer, <span class="number">0</span>, remainLen);</span><br><span class="line">                    m_ReceiveStream.Position = <span class="number">0</span>;</span><br><span class="line">                    m_ReceiveStream.SetLength(<span class="number">0</span>);</span><br><span class="line">                    m_ReceiveStream.Write(remainBuffer, <span class="number">0</span>, remainLen);</span><br><span class="line">                    remainBuffer = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span></span><br><span class="line">            &#123;</span><br><span class="line">                IPEndPoint endPoint = m_Socket.RemoteEndPoint <span class="keyword">as</span> IPEndPoint;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;客户端：&quot;</span> + endPoint.Address.ToString() + <span class="string">&quot;已断开连接&quot;</span>);</span><br><span class="line">                Close();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            StartReceive();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckSendBuffer</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (m_SendQueue)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (m_SendQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">byte</span>[] buffer = m_SendQueue.Dequeue();</span><br><span class="line">                    m_Socket.BeginSend(buffer, <span class="number">0</span>, buffer.Length, SocketFlags.None, SendCallback, m_Socket);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckReceiveBuffer</span>(<span class="params"><span class="built_in">object</span> state</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">lock</span> (m_ReceiveQueue)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (m_ReceiveQueue.Count &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">                <span class="built_in">byte</span>[] buffer = m_ReceiveQueue.Dequeue();</span><br><span class="line">                <span class="built_in">byte</span>[] msgContent = <span class="keyword">new</span> <span class="built_in">byte</span>[buffer.Length - <span class="number">2</span>];</span><br><span class="line">                <span class="built_in">ushort</span> msgCode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream(buffer))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">byte</span>[] msgCodeBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">2</span>];</span><br><span class="line">                    ms.Read(msgCodeBuffer, <span class="number">0</span>, msgCodeBuffer.Length);</span><br><span class="line">                    msgCode = BitConverter.ToUInt16(msgCodeBuffer, <span class="number">0</span>);</span><br><span class="line">                    ms.Read(msgContent, <span class="number">0</span>, msgContent.Length);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;消息编号：&quot;</span> + msgCode + <span class="string">&quot;,内容：&quot;</span> + Encoding.UTF8.GetString(msgContent));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SendCallback</span>(<span class="params">IAsyncResult ir</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_Socket.EndSend(ir);</span><br><span class="line">            CheckSendBuffer();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> m_IsConnected = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">private</span> Queue&lt;<span class="built_in">byte</span>[]&gt; m_ReceiveQueue = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> Queue&lt;<span class="built_in">byte</span>[]&gt; m_SendQueue = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> MemoryStream m_ReceiveStream = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">byte</span>[] m_ReceiveBuffer = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> Socket m_Socket = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> List&lt;RoleClient&gt; m_OtherClients = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来进行最后的测试，使客户端和服务端相互进行实际的数据通信。</p><br><h2 id="测试">测试</h2><br><p>客户端输入任意字符串，然后点击发送，这里消息编码写死为1，但实际开发中每一个消息都有自己的编号要根据实际情况来决定要发送哪条消息。</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/f7644841/5.webp" alt="测试"></p><p>服务端成功的接收到数据并解析出消息编码和具体内容</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/f7644841/6.webp" alt="测试"></p><p>服务端输入任意字符串，看看客户端能否接到消息</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/f7644841/7.webp" alt="测试"></p><p>客户端也成功的解析出了内容</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/f7644841/8.webp" alt="测试"></p><p>服务端输入close all看能否跟客户端断开连接</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/f7644841/9.webp" alt="测试"></p><p>客户端打印日志，断开连接</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/f7644841/10.webp" alt="测试"></p><p>强制关闭客户端，服务端也能检测到客户端的断开</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/f7644841/11.webp" alt="测试"></p><br><h2 id="结语">结语</h2><br><p>到这里整个TCP通信的客户端和服务端已经基本实现完了。</p><p>但是实际开发中，通信内容可不仅仅是字符串，而是十分复杂的一些数据结构。检测客户端断开也不能单单凭借endreceive的长度为0就确定客户端断开，各个模块间的数据要分别派发不能造成耦合，那这些是怎么实现的呢？</p><p>下面几篇我就依次来写写序列化工具Protobuf、观察者消息派发、以及心跳机制，详细阐述这些功能是如何实现的。</p>]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> Unity </tag>
            
            <tag> TCP通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity】在Unity中实现TCP通信（一）</title>
      <link href="/post/c772a499/"/>
      <url>/post/c772a499/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p>TCP通信承载着一个应用程序的数据传输，而在Unity的开发当中，TCP通信也是重中之重，不懂TCP通信、不懂网络编程，日常开发工作就会变得尤为艰难。</p><p>本篇文章我就详细的记录一下我所了解的Unity中的TCP通信，并逐步去实现一个比较常用的TCP通信框架。</p><p>首先了解两条比较基础的东西：</p><ul class="lvl-0"><li class="lvl-2"><p>TCP的概念：TCP是网络通讯协议中的一种，学过计算机网络就应该知道，网络协议模型共有5层，TCP议位列运输层，是一种面向连接的安全可靠全双工通信协议。</p></li><li class="lvl-2"><p>TCP通信过程：这里主要了解3次握手和4次挥手就足够了，可以深入了解一下3次握手的过程，以及为什么要3次握手。</p></li></ul><p>具体概念不多做介绍了，如果对此有迷惑可以看<a href="/post/54913a59/">这篇文章</a>。</p><p>下面开始使用Socket一步一步实现Unity客户端的TCP连接。</p><br><h2 id="构建Socket对象">构建Socket对象</h2><br><p>要实现C#的TCP通信，需要使用System.Net.Sockets这个命名空间下的Socket类：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Socket socket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br></pre></td></tr></table></figure><p>可以看到，创建Socket对象需要3个参数，下面介绍这个3个参数的含义。</p><br><h3 id="AddressFamily-枚举">AddressFamily 枚举</h3><br><table><thead><tr><th style="text-align:center">枚举名</th><th style="text-align:center">值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">Unknown</td><td style="text-align:center">-1</td><td style="text-align:center">未知的地址族</td></tr><tr><td style="text-align:center">Unspecified</td><td style="text-align:center">0</td><td style="text-align:center">未指定的地址族</td></tr><tr><td style="text-align:center">Unix</td><td style="text-align:center">1</td><td style="text-align:center">Unix本地到主机地址</td></tr><tr><td style="text-align:center">InterNetwork</td><td style="text-align:center">2</td><td style="text-align:center">IP版本4的地址</td></tr><tr><td style="text-align:center">ImpLink</td><td style="text-align:center">3</td><td style="text-align:center">ARPANET IMP地址</td></tr><tr><td style="text-align:center">Pup</td><td style="text-align:center">4</td><td style="text-align:center">PUP协议的地址</td></tr><tr><td style="text-align:center">Chaos</td><td style="text-align:center">5</td><td style="text-align:center">MIT CHAOS协议的地址</td></tr><tr><td style="text-align:center">NS</td><td style="text-align:center">6</td><td style="text-align:center">Xerox NS协议的地址</td></tr><tr><td style="text-align:center">Ipx</td><td style="text-align:center">6</td><td style="text-align:center">IPX或SPX地址</td></tr><tr><td style="text-align:center">Iso</td><td style="text-align:center">7</td><td style="text-align:center">ISO协议的地址</td></tr><tr><td style="text-align:center">Osi</td><td style="text-align:center">7</td><td style="text-align:center">OSI协议的地址</td></tr><tr><td style="text-align:center">Ecma</td><td style="text-align:center">8</td><td style="text-align:center">欧洲计算机制造商协会(ECMA)地址</td></tr><tr><td style="text-align:center">DataKit</td><td style="text-align:center">9</td><td style="text-align:center">Datakit协议的地址</td></tr><tr><td style="text-align:center">Ccitt</td><td style="text-align:center">10</td><td style="text-align:center">CCITT协议(如 X.25)的地址</td></tr><tr><td style="text-align:center">Sna</td><td style="text-align:center">11</td><td style="text-align:center">IBM SNA地址</td></tr><tr><td style="text-align:center">DecNet</td><td style="text-align:center">12</td><td style="text-align:center">DECnet地址</td></tr><tr><td style="text-align:center">DataLink</td><td style="text-align:center">13</td><td style="text-align:center">直接数据链接接口地址</td></tr><tr><td style="text-align:center">Lat</td><td style="text-align:center">14</td><td style="text-align:center">LAT地址</td></tr><tr><td style="text-align:center">HyperChannel</td><td style="text-align:center">15</td><td style="text-align:center">NSC Hyperchannel地址</td></tr><tr><td style="text-align:center">AppleTalk</td><td style="text-align:center">16</td><td style="text-align:center">AppleTalk</td></tr><tr><td style="text-align:center">NetBios</td><td style="text-align:center">17</td><td style="text-align:center">NetBios地址</td></tr><tr><td style="text-align:center">VoiceView</td><td style="text-align:center">18</td><td style="text-align:center">VoiceView地址</td></tr><tr><td style="text-align:center">FireFox</td><td style="text-align:center">19</td><td style="text-align:center">FireFox地址</td></tr><tr><td style="text-align:center">Banyan</td><td style="text-align:center">21</td><td style="text-align:center">Banyan地址</td></tr><tr><td style="text-align:center">Atm</td><td style="text-align:center">22</td><td style="text-align:center">本机ATM服务地址</td></tr><tr><td style="text-align:center">InterNetworkV6</td><td style="text-align:center">23</td><td style="text-align:center">IP版本6的地址</td></tr><tr><td style="text-align:center">Cluster</td><td style="text-align:center">24</td><td style="text-align:center">Microsoft群集产品的地址</td></tr><tr><td style="text-align:center">Ieee12844</td><td style="text-align:center">25</td><td style="text-align:center">IEEE 1284.4工作组地址</td></tr><tr><td style="text-align:center">Irda</td><td style="text-align:center">26</td><td style="text-align:center">IrDA地址</td></tr><tr><td style="text-align:center">NetworkDesigners</td><td style="text-align:center">28</td><td style="text-align:center">支持网络设计器OSI网关的协议的地址</td></tr><tr><td style="text-align:center">Max</td><td style="text-align:center">29</td><td style="text-align:center">MAX地址</td></tr></tbody></table><br><h3 id="SocketType-枚举">SocketType 枚举</h3><br><table><thead><tr><th style="text-align:center">枚举名</th><th style="text-align:center">值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">Unknown</td><td style="text-align:center">-1</td><td style="text-align:center">指定未知的Socket类型</td></tr><tr><td style="text-align:center">Stream</td><td style="text-align:center">1</td><td style="text-align:center">支持可靠、双向、基于连接的字节流，而不重复数据，也不保留边界。此类型的Socket与单个对方主机通信，并且在通信开始之前需要建立远程主机连接。Stream使用传输控制协议 (ProtocolType.Tcp)和AddressFamily。InterNetwork地址族</td></tr><tr><td style="text-align:center">Dgram</td><td style="text-align:center">2</td><td style="text-align:center">支持数据报，即最大长度固定（通常很小）的无连接、不可靠消息。消息可能会丢失或重复并可能在到达时不按顺序排列。Socket类型的Dgram在发送和接收数据之前不需要任何连接，并且可以与多个对方主机进行通信。Dgram使用数据报协议(ProtocolType.Udp)和AddressFamily.InterNetwork地址族</td></tr><tr><td style="text-align:center">Raw</td><td style="text-align:center">3</td><td style="text-align:center">支持对基础传输协议的访问。通过使用Raw，可以使用Internet控制消息协议(ProtocolType.Icmp)和Internet组管理协议(ProtocolType.Igmp)这样的协议来进行通信。在发送时，您的应用程序必须提供完整的IP标头。所接收的数据报在返回时会保持其IP标头和选项不变</td></tr><tr><td style="text-align:center">Rdm</td><td style="text-align:center">4</td><td style="text-align:center">支持无连接、面向消息、以可靠方式发送的消息，并保留数据中的消息边界。RDM(以可靠方式发送的消息)消息会依次到达，不会重复。此外，如果消息丢失，将会通知发送方。如果使用Rdm初始化Socket，则在发送和接收数据之前无需建立远程主机连接。利用Rdm，您可以与多个对方主机进行通信</td></tr><tr><td style="text-align:center">Seqpacket</td><td style="text-align:center">5</td><td style="text-align:center">在网络上提供排序字节流的面向连接且可靠的双向传输。Seqpacket不重复数据，它在数据流中保留边界。Seqpacket类型的Socket与单个对方主机通信，并且在通信开始之前需要建立远程主机连接</td></tr></tbody></table><br><h3 id="ProtocolType-枚举">ProtocolType 枚举</h3><br><table><thead><tr><th style="text-align:center">枚举名</th><th style="text-align:center">值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">Unknown</td><td style="text-align:center">-1</td><td style="text-align:center">未知协议</td></tr><tr><td style="text-align:center">Icmp</td><td style="text-align:center">-1</td><td style="text-align:center">网际消息控制协议</td></tr><tr><td style="text-align:center">Unspecified</td><td style="text-align:center">0</td><td style="text-align:center">未指定的协议</td></tr><tr><td style="text-align:center">IP</td><td style="text-align:center">0</td><td style="text-align:center">网际协议</td></tr><tr><td style="text-align:center">IPv6HopByHopOptions</td><td style="text-align:center">0</td><td style="text-align:center">IPv6 逐跳选项头</td></tr><tr><td style="text-align:center">Igmp</td><td style="text-align:center">2</td><td style="text-align:center">网际组管理协议</td></tr><tr><td style="text-align:center">Ggp</td><td style="text-align:center">3</td><td style="text-align:center">网关到网关协议</td></tr><tr><td style="text-align:center">IPv4</td><td style="text-align:center">4</td><td style="text-align:center">Internet协议版本4</td></tr><tr><td style="text-align:center">Tcp</td><td style="text-align:center">6</td><td style="text-align:center">传输控制协议</td></tr><tr><td style="text-align:center">Pup</td><td style="text-align:center">12</td><td style="text-align:center">PARC通用数据包协议</td></tr><tr><td style="text-align:center">Udp</td><td style="text-align:center">17</td><td style="text-align:center">用户数据报协议</td></tr><tr><td style="text-align:center">Idp</td><td style="text-align:center">22</td><td style="text-align:center">Internet数据报协议</td></tr><tr><td style="text-align:center">IPv6</td><td style="text-align:center">41</td><td style="text-align:center">Internet协议版本6(IPv6)</td></tr><tr><td style="text-align:center">IPv6RoutingHeader</td><td style="text-align:center">43</td><td style="text-align:center">IPv6路由头</td></tr><tr><td style="text-align:center">IPv6FragmentHeader</td><td style="text-align:center">44</td><td style="text-align:center">IPv6片段头</td></tr><tr><td style="text-align:center">IPSecEncapsulatingSecurityPayload</td><td style="text-align:center">50</td><td style="text-align:center">IPv6封装式安全措施负载头</td></tr><tr><td style="text-align:center">IPSecAuthenticationHeader</td><td style="text-align:center">51</td><td style="text-align:center">IPv6 身份验证头。有关详细信息，请参阅<a href="https://www.ietf.xn--org-x28dk46p">https://www.ietf.org上的</a> RFC 2292，第 2.2.1 节</td></tr><tr><td style="text-align:center">IcmpV6</td><td style="text-align:center">58</td><td style="text-align:center">用于IPv6的Internet 控制消息协议</td></tr><tr><td style="text-align:center">IPv6NoNextHeader</td><td style="text-align:center">59</td><td style="text-align:center">IPv6 No Next头</td></tr><tr><td style="text-align:center">IPv6DestinationOptions</td><td style="text-align:center">60</td><td style="text-align:center">IPv6目标选项头</td></tr><tr><td style="text-align:center">ND</td><td style="text-align:center">77</td><td style="text-align:center">网络磁盘协议(非正式)</td></tr><tr><td style="text-align:center">Raw</td><td style="text-align:center">255</td><td style="text-align:center">原始IP数据包协议</td></tr><tr><td style="text-align:center">Ipx</td><td style="text-align:center">1000</td><td style="text-align:center">Internet数据包交换协议</td></tr><tr><td style="text-align:center">Spx</td><td style="text-align:center">1256</td><td style="text-align:center">顺序包交换协议</td></tr><tr><td style="text-align:center">SpxII</td><td style="text-align:center">1257</td><td style="text-align:center">顺序包交换协议第 2 版</td></tr></tbody></table><p>上面分别列举了3个枚举所有的值及对应的含义，实际上</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Socket socket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br></pre></td></tr></table></figure><p>这行代码的意思就是使用IPV4地址，全双工安全可靠通讯，TCP协议来创建一个Socket对象。</p><br><h2 id="建立连接">建立连接</h2><br><p>建立连接的整个过程是：</p><ul class="lvl-0"><li class="lvl-2"><p>调用Connect方法与服务端建立连接</p></li><li class="lvl-2"><p>成功后调用BeginReceive方法开始等待数据传输</p></li><li class="lvl-2"><p>数据传输完毕调用EndReceive方法结束本次传输并开始等待下一次数据传输</p></li></ul><br><h3 id="Connect">Connect</h3><br><p>调用Connect方法连接服务器，连接失败则跳出</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Connect</span>(<span class="params"><span class="built_in">string</span> ip, <span class="built_in">int</span> port</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    m_IP = ip;</span><br><span class="line">    m_Port = port;</span><br><span class="line">    m_Socket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork,SocketType.Stream,ProtocolType.Tcp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_Socket.Connect(<span class="keyword">new</span> IPEndPoint(IPAddress.Parse(ip), port));</span><br><span class="line">        m_ReceiveStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">        m_IsConnected = <span class="literal">true</span>;</span><br><span class="line">        StartReceive();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (OnConnectSuccess != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            OnConnectSuccess();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Debug.Log(<span class="string">&quot;连接服务器:&quot;</span> + ip + <span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (OnConnectFail != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            OnConnectFail();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Debug.Log(e.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="BeginReceive">BeginReceive</h3><br><p>使用BeginReceive方法，使当前进入阻塞状态，等待接收服务端发送的消息，成功接收到消息后对应的数据会写入到一个字节流中等待处理</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartReceive</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m_IsConnected) <span class="keyword">return</span>;</span><br><span class="line">    m_Socket.BeginReceive(m_ReceiveBuffer,<span class="number">0</span>,m_ReceiveBuffer.Length,SocketFlags.None,OnReceive, m_Socket);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="EndReceive">EndReceive</h3><br><p>当接收到消息时，调用EndReceive方法结束本次数据接收，然后开始解包，解包成功再次调用BeginReceive方法开始新一轮数据接收</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnReceive</span>(<span class="params">IAsyncResult ir</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m_IsConnected) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> length = m_Socket.EndReceive(ir);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (length &lt; <span class="number">1</span>)<span class="comment">//包长为0</span></span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;服务器断开连接&quot;</span>);</span><br><span class="line">            Close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.设置数据流指针的到尾部</span></span><br><span class="line">        m_ReceiveStream.Position = m_ReceiveStream.Length;</span><br><span class="line">        <span class="comment">//2.把接收到的数据全部写入数据流</span></span><br><span class="line">        m_ReceiveStream.Write(m_ReceiveBuffer, <span class="number">0</span>, length);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.一个数据包至少包含包长，包的编码两部分信息，这两部分信息都用ushort表示，而一个        </span></span><br><span class="line">        <span class="comment">//  ushort占2个byte，所以一个包的长度至少是4</span></span><br><span class="line">        <span class="keyword">if</span> (m_ReceiveStream.Length &lt; <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            StartReceive();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//4.循环解包</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_ReceiveStream.Position = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">byte</span>[] msgLenBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">2</span>];</span><br><span class="line">            m_ReceiveStream.Read(msgLenBuffer, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="comment">//5.整个数据的包体中是包含了包体编码这部分数据的，所以需要+2</span></span><br><span class="line">            <span class="built_in">int</span> msgLen = BitConverter.ToUInt16(msgLenBuffer, <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//6.整个消息的包体长度包含了包长，包的编码及具体数据，所以这个实际长度需要在msgLen            </span></span><br><span class="line">            <span class="comment">//  的基础上再+2</span></span><br><span class="line">            <span class="built_in">int</span> fullLen = <span class="number">2</span> + msgLen;</span><br><span class="line">            <span class="comment">//7.接收到的包体长度小于实际长度，说明这不是一个完整包，跳出循环继续下一次接收</span></span><br><span class="line">            <span class="keyword">if</span> (m_ReceiveStream.Length &lt; fullLen)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">byte</span>[] msgBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[msgLen];</span><br><span class="line">            m_ReceiveStream.Position = <span class="number">2</span>;</span><br><span class="line">            m_ReceiveStream.Read(msgBuffer, <span class="number">0</span>, msgLen);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">lock</span> (m_ReceiveQueue)</span><br><span class="line">            &#123;</span><br><span class="line">                m_ReceiveQueue.Enqueue(msgBuffer);<span class="comment">//把真实数据入队，等待主线程处理</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">int</span> remainLen = (<span class="built_in">int</span>)m_ReceiveStream.Length - fullLen;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (remainLen &lt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_ReceiveStream.Position = <span class="number">0</span>;</span><br><span class="line">                m_ReceiveStream.SetLength(<span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m_ReceiveStream.Position = fullLen;</span><br><span class="line">            <span class="built_in">byte</span>[] remainBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[remainLen];</span><br><span class="line">            m_ReceiveStream.Read(remainBuffer, <span class="number">0</span>, remainLen);</span><br><span class="line">            m_ReceiveStream.Position = <span class="number">0</span>;</span><br><span class="line">            m_ReceiveStream.SetLength(<span class="number">0</span>);</span><br><span class="line">            m_ReceiveStream.Write(remainBuffer, <span class="number">0</span>, remainLen);</span><br><span class="line">            remainBuffer = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;++服务器断开连接,&quot;</span> + e.Message);</span><br><span class="line">        Close();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StartReceive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里包含了粘包处理的代码。粘包问题可能比较难理解，这里进行一下分析：</p><ul class="lvl-0"><li class="lvl-2"><p>什么是粘包：一次通讯包含了多条数据</p></li><li class="lvl-2"><p>为什么会产生粘包：当数据包很小时，Tcp协议会把较小的数据包合并到一起，使一些零散的小包通过一次通讯就可以传输完毕。</p></li><li class="lvl-2"><p>如何解决粘包：这里采用我最熟悉的也是最常用的方式，包体定长。包体定长就是指无论客户端还是服务端，在发送数据包之前，需要把这个包的长度写入到包头，在解包的时候首先读出包体长度msgLen，通过计算得出本次通讯实际的包体长度fullLen = msgLen+2，如果接收到的包体长度m_ReceiverBuffer.Length大于实际长度fullLen，则可以认为发生粘包，此时只处理msgLen这个长度的包即可，剩余的数据重新写入m_ReceiverBuffer，下一次接收的包会和这个剩余包重新组成一个完整包。</p></li></ul><p>得到真实的数据后，把真实数据入队，并在Unity主线程的update中去处理</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_IsConnected)</span><br><span class="line">        CheckReceiveBuffer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckReceiveBuffer</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_CheckCount &gt; <span class="number">5</span>)<span class="comment">//每帧处理5条数据</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_CheckCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_CheckCount++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">lock</span> (m_ReceiveQueue)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m_ReceiveQueue.Count &lt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">byte</span>[] buffer = m_ReceiveQueue.Dequeue();</span><br><span class="line">            <span class="built_in">byte</span>[] msgContent = <span class="keyword">new</span> <span class="built_in">byte</span>[buffer.Length - <span class="number">2</span>];</span><br><span class="line">            <span class="built_in">ushort</span> msgCode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream(buffer))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">byte</span>[] msgCodeBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">2</span>];</span><br><span class="line">                ms.Read(msgCodeBuffer, <span class="number">0</span>, msgCodeBuffer.Length);<span class="comment">//读包的编码</span></span><br><span class="line">                msgCode = BitConverter.ToUInt16(msgCodeBuffer, <span class="number">0</span>);<span class="comment">//得到包编码</span></span><br><span class="line">                ms.Read(msgContent, <span class="number">0</span>, msgContent.Length);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (onReceive != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                onReceive(msgCode, msgContent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么需要在Update中去处理呢？因为BeginReceive是多线程异步接收到数据的，而unity的api不允许在非主线程中去访问，所以要把在非主线程中得到的数据入队，并在unity主线程中去处理。</p><br><h2 id="发送数据">发送数据</h2><br><p>上面提到过为了解决粘包，需要把消息包体进行定长，所以发包第一步就是先把包体长度写入数据流，然后把消息编码写入数据流，最后才写入真实的要发送的数据内容，调用BeginSend进行异步发送。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">ushort</span> msgCode, <span class="built_in">byte</span>[] buffer</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!m_IsConnected) <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">byte</span>[] sendMsgBuffer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> msgLen = buffer.Length;</span><br><span class="line">        <span class="built_in">byte</span>[] lenBuffer = BitConverter.GetBytes((<span class="built_in">ushort</span>)msgLen);</span><br><span class="line">        <span class="built_in">byte</span>[] msgCodeBuffer = BitConverter.GetBytes(msgCode);</span><br><span class="line">        ms.Write(lenBuffer, <span class="number">0</span>, lenBuffer.Length);</span><br><span class="line">        ms.Write(msgCodeBuffer, <span class="number">0</span>, msgCodeBuffer.Length);</span><br><span class="line">        ms.Write(buffer, <span class="number">0</span>, msgLen);</span><br><span class="line">        sendMsgBuffer = ms.ToArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lock</span> (m_SendQueue)</span><br><span class="line">    &#123;</span><br><span class="line">        m_SendQueue.Enqueue(sendMsgBuffer);</span><br><span class="line">        CheckSendBuffer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckSendBuffer</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">lock</span> (m_SendQueue)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_SendQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">byte</span>[] buffer = m_SendQueue.Dequeue();</span><br><span class="line">            m_Socket.BeginSend(buffer, <span class="number">0</span>, buffer.Length, SocketFlags.None, SendCallback, m_Socket);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SendCallback</span>(<span class="params">IAsyncResult ir</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    m_Socket.EndSend(ir);</span><br><span class="line">    CheckSendBuffer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里为了保证线程安全仍然需要把数据入队，在确认到消息成功发送后才进行下一次数据的发送。</p><br><hr><br><p>下面贴上整个TCP通信框架的代码，直接调用Connect方法进行连接，连接成功后调用Send方法进行发送。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Net;</span><br><span class="line"><span class="keyword">using</span> System.Net.Sockets;</span><br><span class="line"><span class="keyword">using</span> System.Security.Policy;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SocialPlatforms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SocketMgr</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SocketMgr Instance = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> Action&lt;<span class="built_in">ushort</span>, <span class="built_in">byte</span>[]&gt; onReceive = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> Action OnConnectSuccess = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> Action OnConnectFail = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> Action OnDisConnect = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> IsConnected</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_IsConnected;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Instance = <span class="keyword">this</span>;</span><br><span class="line">        m_ReceiveBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span> * <span class="number">512</span>];</span><br><span class="line">        m_SendQueue = <span class="keyword">new</span> Queue&lt;<span class="built_in">byte</span>[]&gt;();</span><br><span class="line">        m_ReceiveQueue = <span class="keyword">new</span> Queue&lt;<span class="built_in">byte</span>[]&gt;();</span><br><span class="line">        m_OnEventCallQueue = <span class="keyword">new</span> Queue&lt;Action&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Connect</span>(<span class="params"><span class="built_in">string</span> ip, <span class="built_in">int</span> port</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_IP = ip;</span><br><span class="line">        m_Port = port;</span><br><span class="line">        m_Socket = <span class="keyword">new</span> Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_Socket.Connect(<span class="keyword">new</span> IPEndPoint(IPAddress.Parse(ip), port));</span><br><span class="line">            m_ReceiveStream = <span class="keyword">new</span> MemoryStream();</span><br><span class="line">            m_IsConnected = <span class="literal">true</span>;</span><br><span class="line">            StartReceive();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (OnConnectSuccess != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                OnConnectSuccess();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Debug.Log(<span class="string">&quot;连接服务器:&quot;</span> + ip + <span class="string">&quot;成功！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (OnConnectFail != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                OnConnectFail();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Debug.Log(e.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Close</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m_IsConnected) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        m_IsConnected = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123; m_Socket.Shutdown(SocketShutdown.Both); &#125;</span><br><span class="line">        <span class="keyword">catch</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">        m_Socket.Close();</span><br><span class="line">        m_SendQueue.Clear();</span><br><span class="line">        m_ReceiveQueue.Clear();</span><br><span class="line">        m_ReceiveStream.SetLength(<span class="number">0</span>);</span><br><span class="line">        m_ReceiveStream.Close();</span><br><span class="line"></span><br><span class="line">        m_Socket = <span class="literal">null</span>;</span><br><span class="line">        m_ReceiveStream = <span class="literal">null</span>;</span><br><span class="line">        m_OnEventCallQueue.Enqueue(OnDisConnect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">ushort</span> msgCode, <span class="built_in">byte</span>[] buffer</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m_IsConnected) <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">byte</span>[] sendMsgBuffer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> msgLen = buffer.Length;</span><br><span class="line">            <span class="built_in">byte</span>[] lenBuffer = BitConverter.GetBytes((<span class="built_in">ushort</span>)msgLen);</span><br><span class="line">            <span class="built_in">byte</span>[] msgCodeBuffer = BitConverter.GetBytes(msgCode);</span><br><span class="line">            ms.Write(lenBuffer, <span class="number">0</span>, lenBuffer.Length);</span><br><span class="line">            ms.Write(msgCodeBuffer, <span class="number">0</span>, msgCodeBuffer.Length);</span><br><span class="line">            ms.Write(buffer, <span class="number">0</span>, msgLen);</span><br><span class="line">            sendMsgBuffer = ms.ToArray();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">lock</span> (m_SendQueue)</span><br><span class="line">        &#123;</span><br><span class="line">            m_SendQueue.Enqueue(sendMsgBuffer);</span><br><span class="line">            CheckSendBuffer();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_IsConnected)</span><br><span class="line">            CheckReceiveBuffer();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(m_OnEventCallQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Action a = m_OnEventCallQueue.Dequeue();</span><br><span class="line">            <span class="keyword">if</span> (a != <span class="literal">null</span>) a();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartReceive</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m_IsConnected) <span class="keyword">return</span>;</span><br><span class="line">        m_Socket.BeginReceive(m_ReceiveBuffer, <span class="number">0</span>, m_ReceiveBuffer.Length, SocketFlags.None, OnReceive, m_Socket);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnReceive</span>(<span class="params">IAsyncResult ir</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m_IsConnected) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> length = m_Socket.EndReceive(ir);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (length &lt; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.Log(<span class="string">&quot;服务器断开连接&quot;</span>);</span><br><span class="line">                Close();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m_ReceiveStream.Position = m_ReceiveStream.Length;</span><br><span class="line">            m_ReceiveStream.Write(m_ReceiveBuffer, <span class="number">0</span>, length);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m_ReceiveStream.Length &lt; <span class="number">4</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                StartReceive();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_ReceiveStream.Position = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">byte</span>[] msgLenBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">2</span>];</span><br><span class="line">                m_ReceiveStream.Read(msgLenBuffer, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">                <span class="built_in">int</span> msgLen = BitConverter.ToUInt16(msgLenBuffer, <span class="number">0</span>) + <span class="number">2</span>;</span><br><span class="line">                <span class="built_in">int</span> fullLen = <span class="number">2</span> + msgLen;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (m_ReceiveStream.Length &lt; fullLen)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">byte</span>[] msgBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[msgLen];</span><br><span class="line">                m_ReceiveStream.Position = <span class="number">2</span>;</span><br><span class="line">                m_ReceiveStream.Read(msgBuffer, <span class="number">0</span>, msgLen);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">lock</span> (m_ReceiveQueue)</span><br><span class="line">                &#123;</span><br><span class="line">                    m_ReceiveQueue.Enqueue(msgBuffer);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">int</span> remainLen = (<span class="built_in">int</span>)m_ReceiveStream.Length - fullLen;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (remainLen &lt; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    m_ReceiveStream.Position = <span class="number">0</span>;</span><br><span class="line">                    m_ReceiveStream.SetLength(<span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                m_ReceiveStream.Position = fullLen;</span><br><span class="line">                <span class="built_in">byte</span>[] remainBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[remainLen];</span><br><span class="line">                m_ReceiveStream.Read(remainBuffer, <span class="number">0</span>, remainLen);</span><br><span class="line">                m_ReceiveStream.Position = <span class="number">0</span>;</span><br><span class="line">                m_ReceiveStream.SetLength(<span class="number">0</span>);</span><br><span class="line">                m_ReceiveStream.Write(remainBuffer, <span class="number">0</span>, remainLen);</span><br><span class="line">                remainBuffer = <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">&quot;++服务器断开连接,&quot;</span> + e.Message);</span><br><span class="line">            Close();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StartReceive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckSendBuffer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">lock</span> (m_SendQueue)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m_SendQueue.Count &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">byte</span>[] buffer = m_SendQueue.Dequeue();</span><br><span class="line">                m_Socket.BeginSend(buffer, <span class="number">0</span>, buffer.Length, SocketFlags.None, SendCallback, m_Socket);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">CheckReceiveBuffer</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m_CheckCount &gt; <span class="number">5</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                m_CheckCount = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            m_CheckCount++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">lock</span> (m_ReceiveQueue)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (m_ReceiveQueue.Count &lt; <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="built_in">byte</span>[] buffer = m_ReceiveQueue.Dequeue();</span><br><span class="line">                <span class="built_in">byte</span>[] msgContent = <span class="keyword">new</span> <span class="built_in">byte</span>[buffer.Length - <span class="number">2</span>];</span><br><span class="line">                <span class="built_in">ushort</span> msgCode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream(buffer))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">byte</span>[] msgCodeBuffer = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">2</span>];</span><br><span class="line">                    ms.Read(msgCodeBuffer, <span class="number">0</span>, msgCodeBuffer.Length);</span><br><span class="line">                    msgCode = BitConverter.ToUInt16(msgCodeBuffer, <span class="number">0</span>);</span><br><span class="line">                    ms.Read(msgContent, <span class="number">0</span>, msgContent.Length);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (onReceive != <span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    onReceive(msgCode, msgContent);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SendCallback</span>(<span class="params">IAsyncResult ir</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_Socket.EndSend(ir);</span><br><span class="line">        CheckSendBuffer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDestroy</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Close();</span><br><span class="line">        m_SendQueue = <span class="literal">null</span>;</span><br><span class="line">        m_ReceiveQueue = <span class="literal">null</span>;</span><br><span class="line">        m_ReceiveStream = <span class="literal">null</span>;</span><br><span class="line">        m_ReceiveBuffer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        m_OnEventCallQueue.Clear();</span><br><span class="line">        m_OnEventCallQueue = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Queue&lt;Action&gt; m_OnEventCallQueue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;<span class="built_in">byte</span>[]&gt; m_SendQueue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Queue&lt;<span class="built_in">byte</span>[]&gt; m_ReceiveQueue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> MemoryStream m_ReceiveStream = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">byte</span>[] m_ReceiveBuffer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> m_IsConnected = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> m_IP = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> m_CheckCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> m_Port = <span class="built_in">int</span>.MaxValue;</span><br><span class="line">    <span class="keyword">private</span> Socket m_Socket = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h2 id="结语">结语</h2><br><p>以上就是在Unity中实现TCP通信的全部内容，下一篇就去实现服务端的TCP，把这篇内容真正的跑起来。</p>]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
            <tag> Unity </tag>
            
            <tag> TCP通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（转）计算机网络太难了？了解这一篇就够了</title>
      <link href="/post/54913a59/"/>
      <url>/post/54913a59/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p>计算机网络、计算机操作系统这两个“兄弟”是所有开发岗位都需要“结拜”的，不管你是 Java、C++还是测试。对于后端开发的童鞋来说，计算机网络的重要性不亚于语言基础，毕竟平时开发经常会和网络打交道，比如：抓个包等等。所以对这一块知识点的准备还是要抱着敬畏之心，不要放过任何一个漏网之题。下面分享下我的学习过程：</p><br><h3 id="看书">看书</h3><br><p>对于计算机比较基础的模块，我都是比较推荐找一本经典的书籍来好好学习下，不可以只看面经就去面试了。我一共看了两本书：汤小丹的《计算机操作系统》和《图解HTTP》。《计算机操作系统》是教科书，所以知识点相对比较基础，覆盖范围也比较广，非科班的学生还是很有必要看一看的。《图解HTTP》这本书用很多插图将一些知识点讲的通俗易懂，看起来也很快，还是比较推荐的。</p><br><h3 id="做笔记">做笔记</h3><br><p>计算机网络的知识点还是比较多的，需要看书的时候做好笔记，方便复习。而且做笔记的时候可以就这个知识点去百度下，看看有没有自己遗漏的点，再给补充进来。在这里说下，我为什么一直强调做笔记？好处 1：做笔记是第 1 次你对书中的知识点的回顾，加深记忆；好处 2：而且如果你是发表在公关社区的肯定要保证最大限度的正确性，就需要再去看看这个知识点，核对下自己是否有理解偏差和遗漏等，这样就完成了知识点的深挖；好处3：正在到面试复习的时候，你是不太可能重新看一本书的，那么笔记就显得很重要了，自己做的笔记，复习起来很快，而且最好在笔记里能有一些自己区别于面经的理解。</p><br><h3 id="看面经">看面经</h3><br><p>经常刷一刷牛客，看看对于计算机网络，面试官们都是怎么问的？很多问题你可能会，但是不懂面试官的问法，也会回答不上来；问到的题目自己是否准备了？而且对于计算机网络和计算机操作系统会因为公司和岗位的不同而有所侧重的，多看看面经就会发现还是有一点规律的，但是这都不是绝对的，最后还要看面你的面试官的喜好。</p><br><h2 id="对五层网络协议体系结构的理解">对五层网络协议体系结构的理解</h2><br><p>学习计算机网络时我们一般采用折中的办法，也就是中和 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构，这样既简洁又能将概念阐述清楚。</p><br><h3 id="应用层">应用层</h3><br><p>应用层（application-layer）的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如域名系统 DNS，支持万维网应用的 HTTP 协议，支持电子邮件的 SMTP 协议等等。我们把应用层交互的数据单元称为报文。</p><br><h3 id="运输层">运输层</h3><br><p>运输层（transport layer）的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务。应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。</p><p>由于一台主机可同时运行多个线程，因此运输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面运输层的服务，分用和复用相反，是运输层把收到的信息分别交付上面应用层中的相应进程。</p><br><h3 id="网络层">网络层</h3><br><p>在计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP / IP 体系结构中，由于网络层使用 IP 协议，因此分组也叫 IP 数据报，简称数据报。</p><br><h3 id="数据链路层">数据链路层</h3><br><p>数据链路层（data link layer）通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如：同步信息，地址信息，差错控制等）。</p><p>在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。控制信息还使接收端能够检测到所收到的帧中有无差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。如果需要改正数据在链路层传输时出现差错（这就是说，数据链路层不仅要检错，而且还要纠错），那么就要采用可靠性传输协议来纠正出现的差错。这种方法会使链路层的协议复杂些。</p><br><h3 id="物理层">物理层</h3><br><p>在物理层上所传送的数据单位是比特。物理层（physical layer）的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。</p><br><h2 id="每层对应的网络协议有哪些？">每层对应的网络协议有哪些？</h2><br><p>计算机五层网络体系中涉及的协议非常多，下面就常用的做了列举：</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/54913a59/1.webp" alt="网络体系"></p><br><h2 id="ARP协议的工作原理">ARP协议的工作原理</h2><br><p>网络层的 ARP 协议完成了 IP 地址与物理地址的映射。首先，每台主机都会在自己的 ARP 缓冲区中建立一个 ARP 列表，以表示 IP 地址和 MAC 地址的对应关系。当源主机需要将一个数据包要发送到目的主机时，会首先检查自己 ARP 列表中是否存在该 IP 地址对应的 MAC 地址：如果有，就直接将数据包发送到这个 MAC 地址；如果没有，就向本地网段发起一个 ARP 请求的广播包，查询此目的主机对应的 MAC 地址。</p><p>此 ARP 请求数据包里包括源主机的 IP 地址、硬件地址、以及目的主机的 IP 地址。网络中所有的主机收到这个 ARP 请求后，会检查数据包中的目的 IP 是否和自己的 IP 地址一致。如果不相同就忽略此数据包；如果相同，该主机首先将发送端的 MAC 地址和 IP 地址添加到自己的 ARP 列表中，如果 ARP 表中已经存在该 IP 的信息，则将其覆盖，然后给源主机发送一个 ARP 响应数据包，告诉对方自己是它需要查找的 MAC 地址；源主机收到这个 ARP 响应数据包后，将得到的目的主机的 IP 地址和 MAC 地址添加到自己的 ARP 列表中，并利用此信息开始数据的传输。如果源主机一直没有收到 ARP 响应数据包，表示 ARP 查询失败。</p><br><h2 id="对IP地址分类的理解">对IP地址分类的理解</h2><br><p>IP 地址是指互联网协议地址，是 IP 协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。IP 地址编址方案将 IP 地址空间划分为 A、B、C、D、E 五类，其中 A、B、C 是基本类，D、E 类作为多播和保留使用，为特殊地址。</p><p>每个 IP 地址包括两个标识码（ID），即网络 ID 和主机 ID。同一个物理网络上的所有主机都使用同一个网络 ID，网络上的一个主机（包括网络上工作站，服务器和路由器等）有一个主机 ID 与其对应。A~E 类地址的特点如下：</p><p>A 类地址：以 0 开头，第一个字节范围：0~127；</p><p>B 类地址：以 10 开头，第一个字节范围：128~191；</p><p>C 类地址：以 110 开头，第一个字节范围：192~223；</p><p>D 类地址：以 1110 开头，第一个字节范围为 224~239；</p><p>E 类地址：以 1111 开头，保留地址</p><br><h2 id="TCP的主要特点">TCP的主要特点</h2><br><p>TCP 是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；</p><p>每一条 TCP 连接只能有两个端点，每一条 TCP 连接只能是点对点的（一对一）；</p><p>TCP 提供可靠交付的服务。通过 TCP 连接传送的数据，无差错、不丢失、不重复、并且按序到达；</p><p>TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；</p><p>面向字节流。TCP 中的“流”（Stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块（大小不等），但 TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。</p><br><h2 id="UDP的主要特点">UDP的主要特点</h2><br><p>UDP 是无连接的；</p><p>UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；</p><p>UDP 是面向报文的；</p><p>UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 直播，实时视频会议等）；</p><p>UDP 支持一对一、一对多、多对一和多对多的交互通信；</p><p>UDP 的首部开销小，只有 8 个字节，比 TCP 的 20 个字节的首部要短。</p><br><h2 id="TCP和UDP的区别？">TCP和UDP的区别？</h2><br><p>TCP 提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要释放连接。TCP 不提供广播或多播服务。由于 TCP 要提供可靠的，面向连接的运输服务（TCP 的可靠体现在 TCP 在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源），这难以避免增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。</p><p>UDP 在传送数据之前不需要先建立连接，远地主机在收到 UDP 报文后，不需要给出任何确认。虽然 UDP 不提供可靠交付，但在某些情况下 UDP 确是一种最有效的工作方式（一般用于即时通信），比如：QQ 语音、 QQ 视频 、直播等等。</p><br><h2 id="TCP和UDP常见应用层协议有哪些？">TCP和UDP常见应用层协议有哪些？</h2><br><h3 id="TCP的应用层协议">TCP的应用层协议</h3><br><ul class="lvl-0"><li class="lvl-2"><p>FTP：定义了文件传输协议，使用 21 端口。常说某某计算机开了 FTP 服务便是启动了文件传输服务。下载文件，上传主页，都要用到 FTP 服务。</p></li><li class="lvl-2"><p>Telnet：它是一种用于远程登陆的端口，用户可以以自己的身份远程连接到计算机上，通过这种端口可以提供一种基于 DOS 模式下的通信服务。如以前的 BBS 是-纯字符界面的，支持 BBS 的服务器将 23 端口打开，对外提供服务。</p></li><li class="lvl-2"><p>SMTP：定义了简单邮件传送协议，现在很多邮件服务器都用的是这个协议，用于发送邮件。如常见的免费邮件服务中用的就是这个邮件服务端口，所以在电子邮件设置-中常看到有这么 SMTP 端口设置这个栏，服务器开放的是 25 号端口。</p></li><li class="lvl-2"><p>POP3：它是和 SMTP 对应，POP3 用于接收邮件。通常情况下，POP3 协议所用的是 110 端口。也是说，只要你有相应的使用 POP3 协议的程序（例如 Fo-xmail 或 Outlook），就可以不以 Web 方式登陆进邮箱界面，直接用邮件程序就可以收到邮件（如是163 邮箱就没有必要先进入网易网站，再进入自己的邮-箱来收信）。</p></li><li class="lvl-2"><p>HTTP：从 Web 服务器传输超文本到本地浏览器的传送协议。</p></li></ul><br><h3 id="UDP的应用层协议">UDP的应用层协议</h3><br><ul class="lvl-0"><li class="lvl-2"><p>DNS：用于域名解析服务，将域名地址转换为 IP 地址。DNS 用的是 53 号端口。</p></li><li class="lvl-2"><p>SNMP：简单网络管理协议，使用 161 号端口，是用来管理网络设备的。由于网络设备很多，无连接的服务就体现出其优势。</p></li><li class="lvl-2"><p>TFTP(Trival File Transfer Protocal)：简单文件传输协议，该协议在熟知端口 69 上使用 UDP 服务。</p></li></ul><br><h2 id="TCP三次握手的过程">TCP三次握手的过程</h2><br><p>TCP 建立连接的过程叫做握手，握手需要在客户和服务器之间交换三个 TCP 报文段。</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/54913a59/2.webp" alt="三次握手"></p><br><p>最初客户端和服务端都处于 CLOSED(关闭) 状态。本例中 A（Client） 主动打开连接，B（Server） 被动打开连接。</p><p>一开始，B 的 TCP 服务器进程首先创建传输控制块TCB，准备接受客户端进程的连接请求。然后服务端进程就处于 LISTEN(监听) 状态，等待客户端的连接请求。如有，立即作出响应。</p><br><h3 id="第一次握手">第一次握手</h3><br><p>A的TCP 客户端进程也是首先创建传输控制块 TCB。然后，在打算建立 TCP 连接时，向 B 发出连接请求报文段，这时首部中的同步位 SYN=1，同时选择一个初始序号 seq = x。TCP 规定，SYN 报文段（即 SYN = 1 的报文段）不能携带数据，但要消耗掉一个序号。这时，TCP 客户进程进入 SYN-SENT（同步已发送）状态。</p><br><h3 id="第二次握手">第二次握手</h3><br><p>B 收到连接请求报文后，如果同意建立连接，则向 A 发送确认。在确认报文段中应把SYN位和ACK位都置1，确认号是 ack = x + 1，同时也为自己选择一个初始序号 seq = y。请注意，这个报文段也不能携带数据，但同样要消耗掉一个序号。这时 TCP 服务端进程进入 SYN-RCVD（同步收到）状态。</p><br><h3 id="第三次握手">第三次握手</h3><br><p>TCP 客户进程收到 B 的确认后，还要向 B 给出确认。确认报文段的 ACK 置 1，确认号 ack = y + 1，而自己的序号 seq = x + 1。这时 ACK 报文段可以携带数据。但如果不携带数据则不消耗序号，这种情况下，下一个数据报文段的序号仍是 seq = x + 1。这时，TCP 连接已经建立，A 进入 ESTABLISHED（已建立连接）状态。</p><br><h3 id="为什么两次握手不可以呢？">为什么两次握手不可以呢？</h3><br><p>为了防止已经失效的连接请求报文段突然又传送到了B，因而产生错误。比如下面这种情况：A发出的第一个连接请求报文段并没有丢失，而是在网路结点长时间滞留了，以致于延误到连接释放以后的某个时间段才到达 B。本来这是一个早已失效的报文段。但是 B 收到此失效的链接请求报文段后，就误认为 A 又发出一次新的连接请求。于是就向 A发出确认报文段，同意建立连接。</p><p>对于上面这种情况，如果不进行第三次握手，B发出确认后就认为新的运输连接已经建立了，并一直等待 A 发来数据。B 的许多资源就这样白白浪费了。</p><p>如果采用了三次握手，由于 A 实际上并没有发出建立连接请求，所以不会理睬 B 的确认，也不会向 B 发送数据。B 由于收不到确认，就知道 A 并没有要求建立连接。</p><br><h3 id="为什么不需要四次握手？">为什么不需要四次握手？</h3><br><p>有人可能会说A发出第三次握手的信息后在没有接收到 B 的请求就已经进入了连接状态，那如果 A 的这个确认包丢失或者滞留了怎么办？</p><p>我们需要明白一点，完全可靠的通信协议是不存在的。在经过三次握手之后，客户端和服务端已经可以确认之前的通信状况，都收到了确认信息。所以即便再增加握手次数也不能保证后面的通信完全可靠，所以是没有必要的。</p><br><h3 id="Server为什么要传回SYN？">Server为什么要传回SYN？</h3><br><p>接收端传回发送端所发送的 SYN 是为了告诉发送端，我接收到的信息确实就是你所发送的信号了。</p><p>SYN 是 TCP / IP 建立连接时使用的握手信号。在客户机和服务器之间建立正常的 TCP 网络连接时，客户机首先发出一个 SYN 消息，服务器使用 SYN-ACK 应答表示接收到了这个消息，最后客户机再以ACK（Acknowledgement【汉译：确认字符，在数据通信传输中，接收站发给发送站的一种传输控制字符。它表示确认发来的数据已经接受无误】）消息响应。这样在客户机和服务器之间才能建立起可靠的 TCP 连接，数据才可以在客户机和服务器之间传递。</p><br><h3 id="为什么还要传ACK？">为什么还要传ACK？</h3><br><p>双方通信无误必须是两者互相发送信息都无误。传了 SYN，证明发送方到接收方的通道没有问题，但是接收方到发送方的通道还需要 ACK 信号来进行验证。</p><br><h2 id="TCP四次挥手？">TCP四次挥手？</h2><br><p>数据传输结束后，通信的双方都可以释放连接。现在 A 和 B 都处于 ESTABLISHED 状态。</p><br><h3 id="第一次挥手">第一次挥手</h3><br><p>A 的应用进程先向其 TCP 发出连接释放报文段，并停止再发送数据，主动关闭 TCP 连接。A 把连接释放报文段首部的终止控制位 FIN 置 1，其序号 seq = u（等于前面已传送过的数据的最后一个字节的序号加 1），这时 A 进入 FIN-WAIT-1（终止等待1）状态，等待 B 的确认。请注意：TCP 规定，FIN 报文段即使不携带数据，也将消耗掉一个序号。</p><br><h3 id="第二次挥手">第二次挥手</h3><br><p>B 收到连接释放报文段后立即发出确认，确认号是 ack = u + 1，而这个报文段自己的序号是 v（等于 B 前面已经传送过的数据的最后一个字节的序号加1），然后 B 就进入 CLOSE-WAIT（关闭等待）状态。TCP 服务端进程这时应通知高层应用进程，因而从 A 到 B 这个方向的连接就释放了，这时的 TCP 连接处于半关闭（half-close）状态，即 A 已经没有数据要发送了，但 B 若发送数据，A 仍要接收。也就是说，从 B 到 A 这个方向的连接并未关闭，这个状态可能会持续一段时间。A 收到来自 B 的确认后，就进入 FIN-WAIT-2(终止等待2)状态，等待 B 发出的连接释放报文段。</p><br><h3 id="第三次挥手">第三次挥手</h3><br><p>若 B 已经没有要向 A 发送的数据，其应用进程就通知 TCP 释放连接。这时 B 发出的连接释放报文段必须使 FIN = 1。假定 B 的序号为 w（在半关闭状态，B 可能又发送了一些数据）。B 还必须重复上次已发送过的确认号 ack = u + 1。这时 B 就进入 LAST-ACK(最后确认)状态，等待 A 的确认。</p><br><h3 id="第四次挥手">第四次挥手</h3><br><p>A 在收到 B 的连接释放报文后，必须对此发出确认。在确认报文段中把 ACK 置 1，确认号 ack = w + 1，而自己的序号 seq = u + 1（前面发送的 FIN 报文段要消耗一个序号）。然后进入 TIME-WAIT(时间等待) 状态。请注意，现在 TCP 连接还没有释放掉。必须经过时间等待计时器设置的时间 2MSL（MSL：最长报文段寿命）后，A 才能进入到 CLOSED 状态，然后撤销传输控制块，结束这次 TCP 连接。当然如果 B 一收到 A 的确认就进入 CLOSED 状态，然后撤销传输控制块。所以在释放连接时，B 结束 TCP 连接的时间要早于 A。</p><br><h3 id="为什么TIME-WAIT状态必须等待2MSL的时间">为什么TIME-WAIT状态必须等待2MSL的时间</h3><br><ul class="lvl-0"><li class="lvl-2"><p>为了保证A 发送的最后一个 ACK 报文段能够到达 B</p></li></ul><p>这个 ACK 报文段有可能丢失，因而使处在 LAST-ACK 状态的 B 收不到对已发送的 FIN + ACK 报文段的确认。B 会超时重传这个 FIN+ACK 报文段，而 A 就能在 2MSL 时间内（超时 + 1MSL 传输）收到这个重传的 FIN+ACK 报文段。接着 A 重传一次确认，重新启动 2MSL 计时器。最后，A 和 B 都正常进入到 CLOSED 状态。如果 A 在 TIME-WAIT 状态不等待一段时间，而是在发送完 ACK 报文段后立即释放连接，那么就无法收到 B 重传的 FIN + ACK 报文段，因而也不会再发送一次确认报文段，这样，B 就无法按照正常步骤进入 CLOSED 状态。</p><ul class="lvl-0"><li class="lvl-2"><p>防止已失效的连接请求报文段出现在本连接中</p></li></ul><p>A 在发送完最后一个 ACK 报文段后，再经过时间 2MSL，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样就可以使下一个连接中不会出现这种旧的连接请求报文段。</p><br><h3 id="为什么第二次跟第三次不能合并-第二次和第三次之间的等待是什么">为什么第二次跟第三次不能合并, 第二次和第三次之间的等待是什么?</h3><br><p>当服务器执行第二次挥手之后, 此时证明客户端不会再向服务端请求任何数据, 但是服务端可能还正在给客户端发送数据（可能是客户端上一次请求的资源还没有发送完毕），所以此时服务端会等待把之前未传输完的数据传输完毕之后再发送关闭请求。</p><br><h3 id="保活计时器的作用">保活计时器的作用</h3><br><p>除时间等待计时器外，TCP 还有一个保活计时器（keepalive timer）。设想这样的场景：客户已主动与服务器建立了 TCP 连接。但后来客户端的主机突然发生故障。显然，服务器以后就不能再收到客户端发来的数据。因此，应当有措施使服务器不要再白白等待下去。这就需要使用保活计时器了。</p><p>服务器每收到一次客户的数据，就重新设置保活计时器，时间的设置通常是两个小时。若两个小时都没有收到客户端的数据，服务端就发送一个探测报文段，以后则每隔 75 秒钟发送一次。若连续发送 10个 探测报文段后仍然无客户端的响应，服务端就认为客户端出了故障，接着就关闭这个连接。</p><br><h2 id="TCP协议是如何保证可靠传输的">TCP协议是如何保证可靠传输的</h2><br><h3 id="数据包校验">数据包校验</h3><br><p>目的是检测数据在传输过程中的任何变化，若校验出包有错，则丢弃报文段并且不给出响应，这时 TCP 发送数据端超时后会重发数据；</p><br><h3 id="对失序数据包重排序">对失序数据包重排序</h3><br><p>既然 TCP 报文段作为 IP 数据报来传输，而 IP 数据报的到达可能会失序，因此 TCP 报文段的到达也可能会失序。TCP 将对失序数据进行重新排序，然后才交给应用层；</p><br><h3 id="丢弃重复数据">丢弃重复数据</h3><br><p>对于重复数据，能够丢弃重复数据；</p><br><h3 id="应答机制">应答机制</h3><br><p>当 TCP 收到发自 TCP 连接另一端的数据，它将发送一个确认。这个确认不是立即发送，通常将推迟几分之一秒；</p><br><h3 id="超时重发">超时重发</h3><br><p>当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段；</p><br><h3 id="流量控制">流量控制</h3><br><p>TCP 连接的每一方都有固定大小的缓冲空间。TCP 的接收端只允许另一端发送接收端缓冲区所能接纳的数据，这可以防止较快主机致使较慢主机的缓冲区溢出，这就是流量控制。TCP 使用的流量控制协议是可变大小的滑动窗口协议。</p><br><h2 id="谈谈你对停止等待协议的理解">谈谈你对停止等待协议的理解</h2><br><p>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组；在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认。主要包括以下几种情况：无差错情况、出现差错情况（超时重传）、确认丢失和确认迟到、确认丢失和确认迟到。</p><h2 id="谈谈你对-ARQ-协议的理解">谈谈你对 ARQ 协议的理解</h2><br><h3 id="自动重传请求-ARQ-协议">自动重传请求 ARQ 协议</h3><br><p>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重传时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求 ARQ。</p><br><h3 id="连续-ARQ-协议">连续 ARQ 协议</h3><br><p>连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。</p><br><h2 id="谈谈你对滑动窗口的了解">谈谈你对滑动窗口的了解</h2><br><p>TCP 利用滑动窗口实现流量控制的机制。滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。</p><p>TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。</p><br><h2 id="谈下你对流量控制的理解">谈下你对流量控制的理解</h2><br><p>TCP 利用滑动窗口实现流量控制。流量控制是为了控制发送方发送速率，保证接收方来得及接收。接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。</p><br><h2 id="谈下你对-TCP-拥塞控制的理解">谈下你对 TCP 拥塞控制的理解</h2><br><p>拥塞控制和流量控制不同，前者是一个全局性的过程，而后者指点对点通信量的控制。在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。</p><p>拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致于过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</p><p>为了进行拥塞控制，TCP 发送方要维持一个拥塞窗口(cwnd) 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。</p><br><h3 id="使用了哪些算法？">使用了哪些算法？</h3><br><p>TCP 的拥塞控制采用了四种算法，即：慢开始、拥塞避免、快重传和快恢复。在网络层也可以使路由器采用适当的分组丢弃策略（如：主动队列管理 AQM），以减少网络拥塞的发生。</p><ul class="lvl-0"><li class="lvl-2"><p>慢开始：慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd 初始值为 1，每经过一个传播轮次，cwnd 加倍。</p></li><li class="lvl-2"><p>拥塞避免：拥塞避免算法的思路是让拥塞窗口 cwnd 缓慢增大，即每经过一个往返时间 RTT 就把发送方的 cwnd 加 1。</p></li><li class="lvl-2"><p>快重传与快恢复：在 TCP/IP 中，快速重传和快恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。</p></li></ul><p>没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。</p><p>有了 FRR，就不会因为重传时要求的暂停被耽误。当有单独的数据包丢失时，快速重传和快恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。</p><br><h2 id="什么是粘包？">什么是粘包？</h2><br><p>在进行 Java NIO 学习时，可能会发现：如果客户端连续不断的向服务端发送数据包时，服务端接收的数据会出现两个数据包粘在一起的情况。TCP 是基于字节流的虽然应用层和 TCP 传输层之间的数据交互是大小不等的数据块，但是 TCP 把这些数据块仅仅看成一连串无结构的字节流，没有边界；从 TCP 的帧结构也可以看出，在 TCP 的首部没有表示数据长度的字段。</p><p>基于上面两点，在使用 TCP 传输数据时，才有粘包或者拆包现象发生的可能。一个数据包中包含了发送端发送的两个数据包的信息，这种现象即为粘包。接收端收到了两个数据包，但是这两个数据包要么是不完整的，要么就是多出来一块，这种情况即发生了拆包和粘包。拆包和粘包的问题导致接收端在处理的时候会非常困难，因为无法区分一个完整的数据包。</p><br><h2 id="TCP粘包是怎么产生的？">TCP粘包是怎么产生的？</h2><br><h3 id="发送方产生粘包">发送方产生粘包</h3><br><p>采用 TCP 协议传输数据的客户端与服务器经常是保持一个长连接的状态（一次连接发一次数据不存在粘包），双方在连接不断开的情况下，可以一直传输数据。但当发送的数据包过于的小时，那么 TCP 协议默认的会启用 Nagle 算法，将这些较小的数据包进行合并发送（缓冲区数据发送是一个堆压的过程）；这个合并过程就是在发送缓冲区中进行的，也就是说数据发送出来它已经是粘包的状态了。</p><br><h3 id="接收方产生粘包">接收方产生粘包</h3><br><p>接收方采用 TCP 协议接收数据时的过程是这样的：数据到接收方，从网络模型的下方传递至传输层，传输层的 TCP 协议处理是将其放置接收缓冲区，然后由应用层来主动获取（C 语言用 recv、read 等函数）；这时会出现一个问题，就是我们在程序中调用的读取数据函数不能及时的把缓冲区中的数据拿出来，而下一个数据又到来并有一部分放入的缓冲区末尾，等我们读取数据时就是一个粘包。（放数据的速度 &gt; 应用层拿数据速度）</p><br><h2 id="怎么解决拆包和粘包？">怎么解决拆包和粘包？</h2><br><p>分包机制一般有两个通用的解决方法：特殊字符控制；在包头首都添加数据包的长度。</p><p>如果使用 netty 的话，就有专门的编码器和解码器解决拆包和粘包问题了。</p><blockquote><p>Tips：UDP没有粘包问题，但是有丢包和乱序。不完整的包是不会有的，收到的都是完全正确的包。传送的数据单位协议是 UDP 报文或用户数据报，发送的时候既不合并，也不拆分。</p></blockquote><br><h2 id="你对-HTTP-状态码有了解吗？">你对 HTTP 状态码有了解吗？</h2><br><h3 id="1XX信息">1XX信息</h3><br><ul class="lvl-0"><li class="lvl-2"><p>100 Continue<br>表明到目前为止都很正常，客户端可以继续发送请求或者忽略这个响应。</p></li></ul><h3 id="2XX成功">2XX成功</h3><ul class="lvl-0"><li class="lvl-2"><p>200<br>OK</p></li><li class="lvl-2"><p>204 No Content<br>请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p></li><li class="lvl-2"><p>206 Partial Content<br>表示客户端进行了范围请求，响应报文包含由 Content-Range 指定范围的实体内容。</p></li></ul><br><h3 id="3XX-重定向">3XX 重定向</h3><br><ul class="lvl-0"><li class="lvl-2"><p>301 Moved Permanently<br>永久性重定向。</p></li><li class="lvl-2"><p>302 Found<br>临时性重定向。</p></li><li class="lvl-2"><p>303 See Other<br>和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</p></li><li class="lvl-2"><p>304 Not Modified<br>如果请求报文首部包含一些条件，例如：If-Match，If-Modified-Since，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回304状态码。</p></li><li class="lvl-2"><p>307 Temporary Redirect<br>临时重定向，与302的含义类似，但是307要求浏览器不会把重定向请求的POST方法改成GET方法。</p></li></ul><br><h3 id="4XX-客户端错误">4XX 客户端错误</h3><br><ul class="lvl-0"><li class="lvl-2"><p>400 Bad Request<br>请求报文中存在语法错误。</p></li><li class="lvl-2"><p>401 Unauthorized<br>该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</p></li><li class="lvl-2"><p>403 Forbidden<br>请求被拒绝。</p></li><li class="lvl-2"><p>404<br>Not Found</p></li></ul><br><h3 id="5XX-服务器错误">5XX 服务器错误</h3><br><ul class="lvl-0"><li class="lvl-2"><p>500 Internal Server Error<br>服务器正在执行请求时发生错误。</p></li><li class="lvl-2"><p>503 Service Unavailable<br>服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p></li></ul><br><h2 id="HTTP-状态码-301-和-302-代表的是什么？">HTTP 状态码 301 和 302 代表的是什么？</h2><br><p>301，302 都是 HTTP 状态的编码，都代表着某个 URL 发生了转移。</p><br><h3 id="有什么区别？">有什么区别？</h3><br><p>301 redirect: 301 代表永久性转移（Permanently Moved）</p><p>302 redirect: 302 代表暂时性转移（Temporarily Moved）</p><br><h2 id="forward和-redirect的区别？">forward和 redirect的区别？</h2><br><p>Forward 和 Redirect 代表了两种请求转发方式：直接转发和间接转发。</p><br><h3 id="直接转发方式（Forward）">直接转发方式（Forward）</h3><br><p>客户端和浏览器只发出一次请求，Servlet、HTML、JSP 或其它信息资源，由第二个信息资源响应该请求，在请求对象 request 中，保存的对象对于每个信息资源是共享的。</p><br><h3 id="间接转发方式（Redirect）">间接转发方式（Redirect）</h3><br><p>实际是两次 HTTP 请求，服务器端在响应第一次请求的时候，让浏览器再向另外一个 URL 发出请求，从而达到转发的目的。举个通俗的例子：直接转发就相当于：“A 找 B 借钱，B 说没有，B 去找 C 借，借到借不到都会把消息传递给 A”；间接转发就相当于：“A 找 B 借钱，B 说没有，让 A 去找 C 借”。</p><br><h2 id="HTTP-方法有哪些？">HTTP 方法有哪些？</h2><br><p>客户端发送的 请求报文 第一行为请求行，包含了方法字段。</p><br><h3 id="GET">GET</h3><br><p>获取资源，当前网络中绝大部分使用的都是 GET；</p><br><h3 id="HEAD">HEAD</h3><br><p>获取报文首部，和 GET 方法类似，但是不返回报文实体主体部分；</p><br><h3 id="POST">POST</h3><br><p>传输实体主体</p><br><h3 id="PUT">PUT</h3><br><p>上传文件，由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</p><br><h3 id="PATCH">PATCH</h3><br><p>对资源进行部分修改。PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。</p><br><h3 id="OPTIONS">OPTIONS</h3><br><p>查询指定的 URL 支持的方法；</p><br><h3 id="CONNECT">CONNECT</h3><br><p>要求在与代理服务器通信时建立隧道。使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p><br><h3 id="TRACE">TRACE</h3><br><p>追踪路径。服务器会将通信路径返回给客户端。发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）。</p><br><h2 id="GET和POST的区别">GET和POST的区别</h2><p>GET和POST 本质都是 HTTP 请求，只不过对它们的作用做了界定和适配，并且让他们适应各自的场景。GET 只是一次 HTTP请求，POST 先发请求头再发请求体，实际上是两次请求。</p><br><h3 id="功能">功能</h3><br><p>GET 一般用来从服务器上获取资源，POST 一般用来更新服务器上的资源；</p><br><h3 id="REST服务">REST服务</h3><br><p>GET 是幂等的，即读取同一个资源，总是得到相同的数据，而 POST 不是幂等的，因为每次请求对资源的改变并不是相同的；进一步地，GET 不会改变服务器上的资源，而 POST 会对服务器资源进行改变；</p><br><h3 id="请求参数形式">请求参数形式</h3><br><p>GET 请求的数据会附在 URL 之后，即将请求数据放置在 HTTP 报文的 请求头 中，以 ? 分割 URL 和传输数据，参数之间以 &amp; 相连。特别地，如果数据是英文字母/数字，原样发送；否则，会将其编码为 application/x-www-form-urlencoded MIME 字符串(如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用 BASE64 加密，得出如：%E4%BD%A0%E5%A5%BD，其中 ％XX 中的 XX 为该符号以 16 进制表示的 ASCII)；而 POST 请求会把提交的数据则放置在是 HTTP 请求报文的 请求体 中；</p><br><h3 id="安全性">安全性</h3><br><p>POST 的安全性要比 GET 的安全性高，因为 GET 请求提交的数据将明文出现在 URL 上，而且 POST 请求参数则被包装到请求体中，相对更安全；</p><br><h3 id="请求的大小">请求的大小</h3><br><p>GET 请求的长度受限于浏览器或服务器对 URL 长度的限制，允许发送的数据量比较小，而 POST 请求则是没有大小限制的。</p><br><h2 id="网站加载的过程">网站加载的过程</h2><br><h3 id="DNS-解析">DNS 解析</h3><br><p>浏览器查询 DNS，获取域名对应的 IP 地址：具体过程包括浏览器搜索自身的 DNS 缓存、搜索操作系统的 DNS 缓存、读取本地的 Host 文件和向本地 DNS 服务器进行查询等。对于向本地 DNS 服务器进行查询，如果要查询的域名包含在本地配置区域资源中，则返回解析结果给客户机，完成域名解析(此解析具有权威性)；如果要查询的域名不由本地 DNS 服务器区域解析，但该服务器已缓存了此网址映射关系，则调用这个 IP 地址映射，完成域名解析（此解析不具有权威性）。如果本地域名服务器并未缓存该网址映射关系，那么将根据其设置发起递归查询或者迭代查询；</p><br><h3 id="TCP-连接">TCP 连接</h3><br><p>浏览器获得域名对应的 IP 地址以后，浏览器向服务器请求建立链接，发起三次握手；</p><br><h3 id="发送-HTTP-请求">发送 HTTP 请求</h3><br><p>TCP 连接建立起来后，浏览器向服务器发送 HTTP 请求；</p><p>服务器处理请求并返回 HTTP 报文</p><p>服务器接收到这个请求，并根据路径参数映射到特定的请求处理器进行处理，并将处理结果及相应的视图返回给浏览器；</p><br><h3 id="浏览器解析渲染页面">浏览器解析渲染页面</h3><br><p>浏览器解析并渲染视图，若遇到对 js 文件、css 文件及图片等静态资源的引用，则重复上述步骤并向服务器请求这些资源；浏览器根据其请求到的资源、数据渲染页面，最终向用户呈现一个完整的页面。</p><br><h2 id="DNS的解析过程">DNS的解析过程</h2><br><p>主机向本地域名服务器的查询一般都是采用递归查询，所谓递归查询就是：如果主机所询问的本地域名服务器不知道被查询的域名的 IP 地址，那么本地域名服务器就以 DNS 客户的身份，向根域名服务器继续发出查询请求报文(即替主机继续查询)，而不是让主机自己进行下一步查询。因此，递归查询返回的查询结果或者是所要查询的 IP 地址，或者是报错，表示无法查询到所需的 IP 地址。</p><br><h2 id="本地域名服务器向根域名服务器的迭代查询">本地域名服务器向根域名服务器的迭代查询</h2><br><p>迭代查询的特点：当根域名服务器收到本地域名服务器发出的迭代查询请求报文时，要么给出所要查询的 IP 地址，要么告诉本地服务器：“你下一步应当向哪一个域名服务器进行查询”。然后让本地服务器进行后续的查询。根域名服务器通常是把自己知道的顶级域名服务器的 IP 地址告诉本地域名服务器，让本地域名服务器再向顶级域名服务器查询。顶级域名服务器在收到本地域名服务器的查询请求后，要么给出所要查询的 IP 地址，要么告诉本地服务器下一步应当向哪一个权限域名服务器进行查询。最后，本地域名服务器得到了所要解析的 IP 地址或报错，然后把这个结果返回给发起查询的主机。</p><br><h2 id="对域名缓存的理解">对域名缓存的理解</h2><br><p>为了提高 DNS 查询效率，并减轻服务器的负荷和减少因特网上的 DNS 查询报文数量，在域名服务器中广泛使用了高速缓存，用来存放最近查询过的域名以及从何处获得域名映射信息的记录。</p><p>由于名字到地址的绑定并不经常改变，为保持高速缓存中的内容正确，域名服务器应为每项内容设置计时器并处理超过合理时间的项（例如：每个项目两天）。当域名服务器已从缓存中删去某项信息后又被请求查询该项信息，就必须重新到授权管理该项的域名服务器绑定信息。当权限服务器回答一个查询请求时，在响应中都指明绑定有效存在的时间值。增加此时间值可减少网络开销，而减少此时间值可提高域名解析的正确性。</p><p>不仅在本地域名服务器中需要高速缓存，在主机中也需要。许多主机在启动时从本地服务器下载名字和地址的全部数据库，维护存放自己最近使用的域名的高速缓存，并且只在从缓存中找不到名字时才使用域名服务器。维护本地域名服务器数据库的主机应当定期地检查域名服务器以获取新的映射信息，而且主机必须从缓存中删除无效的项。由于域名改动并不频繁，大多数网点不需花精力就能维护数据库的一致性。</p><br><h2 id="对-HTTP-长连接和短连接的理解">对 HTTP 长连接和短连接的理解</h2><br><p>在 HTTP/1.0 中默认使用短连接。也就是说，客户端和服务器每进行一次 HTTP 操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个 HTML 或其他类型的 Web 页中包含有其他的 Web 资源（如：JavaScript 文件、图像文件、CSS 文件等），每遇到这样一个 Web 资源，浏览器就会重新建立一个 HTTP 会话。</p><p>而从 HTTP/1.1 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头加入这行代码</p><p>Connection:keep-alive</p><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。</p><p>Keep-Alive 不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如：Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。</p><br><h2 id="HTTP-1-0-和-1-1、1-2-的主要变化">HTTP 1.0 和 1.1、1.2 的主要变化</h2><br><h3 id="HTTP1-1-的主要变化：">HTTP1.1 的主要变化：</h3><br><p>HTTP1.0 经过多年发展，在 1.1 提出了改进。首先是提出了长连接，HTTP 可以在一次 TCP 连接中不断发送请求。然后 HTTP1.1 支持只发送 header 而不发送 body。原因是先用 header 判断能否成功，再发数据，节约带宽，事实上，post 请求默认就是这样做的。HTTP1.1 的 host 字段。由于虚拟主机可以支持多个域名，所以一般将域名解析后得到 host。</p><br><h3 id="HTTP2-0-的主要变化：">HTTP2.0 的主要变化：</h3><br><p>HTTP2.0 支持多路复用，同一个连接可以并发处理多个请求，方法是把 HTTP数据包拆为多个帧，并发有序的发送，根据序号在另一端进行重组，而不需要一个个 HTTP请求顺序到达；HTTP2.0 支持服务端推送，就是服务端在 HTTP 请求到达后，除了返回数据之外，还推送了额外的内容给客户端；HTTP2.0 压缩了请求头，同时基本单位是二进制帧流，这样的数据占用空间更少；HTTP2.0 适用于 HTTPS 场景，因为其在 HTTP和 TCP 中间加了一层 SSL 层。</p><br><h2 id="HTTPS-的工作过程？">HTTPS 的工作过程？</h2><br><p>客户端发送自己支持的加密规则给服务器，代表告诉服务器要进行连接了；</p><p>服务器从中选出一套加密算法和 hash 算法以及自己的身份信息（地址等）以证书的形式发送给浏览器，证书中包含服务器信息，加密公钥，证书的办法机构；</p><p>客户端收到网站的证书之后要做下面的事情：</p><p>验证证书的合法性，如果验证证书通过，浏览器会生成一串随机数，并用证书中的公钥进行加密；用约定好的 hash 算法计算握手消息，然后用生成的密钥进行加密，然后一起发送给服务器。</p><p>服务器接收到客户端传送来的信息，要做下面的事情：</p><p>用私钥解析出密码，用密码解析握手消息，验证 hash 值是否和浏览器发来的一致；使用密钥加密消息；如果计算法 hash 值一致，握手成功。</p><br><h2 id="HTTP和HTTPS的区别">HTTP和HTTPS的区别</h2><br><ul class="lvl-0"><li class="lvl-2"><p>开销<br>HTTPS 协议需要到 CA 申请证书，一般免费证书很少，需要交费。</p></li><li class="lvl-2"><p>资源消耗<br>HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 ssl 加密传输协议，需要消耗更多的 CPU 和内存资源。</p></li><li class="lvl-2"><p>端口不同<br>HTTP 和 HTTPS 使用的是完全不同的连接方式，用的端口也不一样，前者是 80，后者是 443。</p></li><li class="lvl-2"><p>安全性<br>HTTP 的连接很简单，是无状态的；HTTPS 协议是由 TSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全。</p></li></ul><br><h2 id="HTTPS的优缺点">HTTPS的优缺点</h2><br><ul class="lvl-0"><li class="lvl-2"><p>优点：使用 HTTPS 协议可认证用户和服务器，确保数据发送到正确的客户机和服务器；HTTPS 协议是由 SSL + HTTP 协议构建的可进行加密传输、身份认证的网络协议，要比 HTTP 协议安全，可防止数据在传输过程中不被窃取、改变，确保数据的完整性；HTTPS 是现行架构下最安全的解决方案，虽然不是绝对安全，但它大幅增加了中间人攻击的成本。</p></li><li class="lvl-2"><p>缺点：<br>HTTPS 协议握手阶段比较费时，会使页面的加载时间延长近 50%，增加 10% 到 20% 的耗电；HTTPS 连接缓存不如 HTTP 高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；SSL 证书需要钱，功能越强大的证书费用越高，个人网站、小网站没有必要一般不会用；SSL 证书通常需要绑定 IP，不能在同一 IP 上绑定多个域名，IPv4 资源不可能支撑这个消耗；HTTPS 协议的加密范围也比较有限，在黑客攻击、拒绝服务攻击、服务器劫持等方面几乎起不到什么作用。最关键的，SSL 证书的信用链体系并不安全，特别是在某些国家可以控制 CA 根证书的情况下，中间人攻击一样可行。</p></li></ul><br><h2 id="什么是数字签名">什么是数字签名</h2><br><p>为了避免数据在传输过程中被替换，比如黑客修改了你的报文内容，但是你并不知道，所以我们让发送端做一个数字签名，把数据的摘要消息进行一个加密，比如 MD5，得到一个签名，和数据一起发送。然后接收端把数据摘要进行 MD5 加密，如果和签名一样，则说明数据确实是真的。</p><br><h2 id="什么是数字证书">什么是数字证书</h2><br><p>对称加密中，双方使用公钥进行解密。虽然数字签名可以保证数据不被替换，但是数据是由公钥加密的，如果公钥也被替换，则仍然可以伪造数据，因为用户不知道对方提供的公钥其实是假的。所以为了保证发送方的公钥是真的，CA 证书机构会负责颁发一个证书，里面的公钥保证是真的，用户请求服务器时，服务器将证书发给用户，这个证书是经由系统内置证书的备案的。</p><br><h2 id="什么是对称加密和非对称加密">什么是对称加密和非对称加密</h2><br><p>对称密钥加密是指加密和解密使用同一个密钥的方式，这种方式存在的最大问题就是密钥发送问题，即如何安全地将密钥发给对方。</p><p>非对称加密指使用一对非对称密钥，即：公钥和私钥，公钥可以随意发布，但私钥只有自己知道。发送密文的一方使用对方的公钥进行加密处理，对方接收到加密信息后，使用自己的私钥进行解密。</p><p>由于非对称加密的方式不需要发送用来解密的私钥，所以可以保证安全性。但是和对称加密比起来，它非常的慢，所以我们还是要用对称加密来传送消息，但对称加密所使用的密钥我们可以通过非对称加密的方式发送出去。</p><hr><p>版权声明：本文为CSDN博主「普通网友」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：<a href="https://blog.csdn.net/Sqdmn/article/details/103581960">https://blog.csdn.net/Sqdmn/article/details/103581960</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>雪球生了！！！</title>
      <link href="/post/ba77b360/"/>
      <url>/post/ba77b360/</url>
      
        <content type="html"><![CDATA[<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=431269032&bvid=BV1wG411E7TN&cid=852814391&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div><br><p>就在今天凌晨，我的雪球生下了5只小可爱，颇多感慨，于是决定写一写我的猫奴人生。</p><p>我从2017年开始养猫，养的第一只猫是一只田园狸花猫，名字叫做咪咪。它的特点是四爪雪白，踏雪无痕，脖子上还有一圈白色围脖。</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba77b360/mimi.webp" alt="咪咪"></p><br><p>第一次养猫没什么经验，只是心里觉得：“啊呀，猫咪好可爱，我想养一只猫。”然后就去了宠物市场。对猫的品种我也仅仅是停留在听说过的水平，它们的性格和特点我是一无所知的。从“咪咪”这个看起来就很随意的名字也可以看出当时就是心血来潮，确实没考虑那么多。</p><p>记得我是先把它带回家然后才想起去网购猫粮、猫砂、罐头这些猫咪用品。到家的第一周它非常害怕，时不时东躲西藏，我经常要掀起沙发然后从狭窄的角落里抱起它的小身子。</p><p>我在养它一整年的时候去给它做了绝育，由于咪咪是只母猫手术做起来稍微麻烦些，术后的大半个月咪咪都拖着身子走路看得我非常心疼非常愧疚，暗自决心一定要好好的对待它。</p><p>好在，直到今天咪咪依然活蹦乱跳，宛如一个小机灵鬼，带给我无限欢乐。</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba77b360/mimi2.webp" alt="咪咪"></p><br><hr><br><p>时间到了2021年的5月底，一只猫确实有些寂寞（指猫），而英短身强体壮沉默寡言非常适合多猫家庭，于是我决定再养一只纯蓝英短。</p><p>这一次有了养咪咪的经验我提前就准备好了各种用品，然后在宠物店和网络上四处联系猫咪，最后在白云区的一个大兄弟手里入了一只蓝短。</p><p>当我看到它的第一眼我脑海里就浮现了一个名字：憨憨。</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba77b360/hanhan.webp" alt="憨憨"></p><br><p>这只猫不是一般的憨，它的一举一动无不充斥着那种憨憨的可爱。它体力超强，接近3米高的窗帘它只需要两个箭步就爬到最顶端。</p><p>然而咪咪并不待见它经常对它呲牙咧嘴，但它从来都是置若罔闻搞得咪咪非常尴尬。（谁让它是个憨憨呢。😊）</p><p>雪球生了小猫后憨憨经常在远处观望，就好像目送外出上学的儿子的老父亲。</p><p>而这个时候咪咪就显得格格不入，在哪都不是那么合适，干脆直接跳到冰箱上倒头大睡，与七夕晚上的单身狗们不约而同奋战在召唤师峡谷如出一辙。😅</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba77b360/hanhan2.webp" alt="憨憨"></p><br><hr><br><p>雪球是2022年4月份到家的，是一只银渐层。其实雪球的到来并不是我刻意的——在3月份时我捡到了一只纯白色的流浪猫我叫它雪球，而这只流浪猫在4月份再次走丢，我按捺不住才找了一只银渐层代替走失的雪球。（流浪猫比较野性，一不注意它就跑到外面去了）</p><br><p><img src= "/images/lazyload.webp" data-lazy-src="/post/ba77b360/xueqiu.webp" alt="雪球"></p><br><p>到今天为止雪球大概9个月大了，7月份时我察觉它似乎要发情了，然后我马不停蹄地把憨憨做了绝育，然而不出意外的话那肯定是出意外了，雪球还是怀上了憨憨的崽子。</p><p>而更加意外的是2个月后的今天，它竟然第一次生就生出了5只小可爱。</p><p>我之前一直好奇蓝短和银渐层能生出什么样的猫咪，答案是：虎斑。</p><p>不过这5只里面有一只是不那么渐层的银渐层，看起来比银渐层花纹更丰富，但还没有达到虎斑那么深邃、密集。</p><p>我决定留下这一只，这样家里就四只猫了，再也养不下了。</p><p>最后，希望猫咪们能一直陪我到老，养猫真是太有趣啦！😤😤😤</p>]]></content>
      
      
      <categories>
          
          <category> 日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 猫咪 </tag>
            
            <tag> 猫奴 </tag>
            
            <tag> 喵星人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Unity】游戏开发中的树形结构——红点系统</title>
      <link href="/post/bef15f1e/"/>
      <url>/post/bef15f1e/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><br><p>游戏开发中最常见的用到树形结构的功能就是红点系统和行为树。</p><p>我今天先写一下红点系统的开发。</p><br><h2 id="需求分析">需求分析</h2><br><p>红点的作用就是给玩家提示，例如：玩家有未读邮则主界面邮件功能出现红点，玩家看到红点后点击邮件功能入口，进入邮件功能主界面后又看到邮件标签页显示红点于是又点击邮件标签进入邮件列表，在众多邮件中找到某一封显示红点的未读邮件。</p><p>整个提示流程是：主界面邮件入口→邮件界面邮件页签→邮件列表中的未读邮件。直观的看，就是从外到内逐层进行提示。</p><p>然而在实现红点功能的时候，需要在主界面，邮件界面，邮件列表界面分别写红点提示代码吗？</p><p>别说，我还真见过有人这么搞，一个功能的红点提示要到处写，可想而知他弄的功能要涉及多少代码，尤其是主界面，那代码已经不能看了，一个界面调用十几二十个模块的方法就为了判断红点显不显示。</p><p>所以优雅代码的诞生就是从偷懒开始，我不想为了一个红点提示在其他地方加入一句本不该出现的XXX.IsShowRedPoint()，我希望只要在邮件列表的刷新逻辑加上一句:RedPointMgr.ShowPoint(RedPointType.Mail,true)就完成上面整个提示流程。</p><br><h2 id="功能实现">功能实现</h2><br><p>于是红点树应运而生，当调用SetState的时候首先根据主Key找到红点树的根节点，然后逐层向下遍历直到找到目标子节点，接着从该子节点的父节点逐层向上依次计算红点状态，最后派发红点事件。即：触发红点功能的节点的所有父节点全部进行一次红点提示即可。</p><blockquote><p>PS：为什么要先遍历到目标子节点？显然，每个节点只有一个父节点，有众多子节点，无法得知当前节点在哪个节点下，只能先遍历一次找到当前节点，再从当前节点一层一层的访问其父节点进行红点的提示。</p></blockquote><p>那么到这里就很清晰了，首先要有一个红点类，它是一个树形结构</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> RedPointType</span><br><span class="line">&#123;</span><br><span class="line">    None,</span><br><span class="line">    Enternal,<span class="comment">//一直存在</span></span><br><span class="line">    Once,<span class="comment">//点击一次就消失</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> RedPointState</span><br><span class="line">&#123;</span><br><span class="line">    None,</span><br><span class="line">    Show,</span><br><span class="line">    Hide,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RedPoint</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 主关键字(属于哪一个根节点)</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> key</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_Key;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 自己的关键字</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> subKey</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_SubKey;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 是否是根节点</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isRoot</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_IsRoot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 红点类型</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> RedPointType type</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_Type;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 当前状态</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> RedPointState state</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_State;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 数据</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> data</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_Data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 父节点</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> RedPoint parent</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_Parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 子节点</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> List&lt;RedPoint&gt; children</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> m_Children;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedPoint</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">string</span> subKey, <span class="built_in">bool</span> isRoot, RedPointType type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_Key = key;</span><br><span class="line">        m_SubKey = subKey;</span><br><span class="line">        m_IsRoot = isRoot;</span><br><span class="line">        m_Type = type;</span><br><span class="line">        m_State = RedPointState.Hide;</span><br><span class="line">        m_Data = <span class="number">0</span>;</span><br><span class="line">        m_Children = <span class="keyword">new</span> List&lt;RedPoint&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params">Action&lt;RedPointState, <span class="built_in">int</span>&gt; showEvent, Button btn</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_ShowEvent = showEvent;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (btn != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_Btn = btn;</span><br><span class="line">            m_Btn.onClick.AddListener(OnClick);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_ShowEvent?.Invoke(m_State, m_Data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddChild</span>(<span class="params">RedPoint node, <span class="built_in">string</span> parentKey</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_SubKey.Equals(parentKey))</span><br><span class="line">        &#123;</span><br><span class="line">            node.SetParent(<span class="keyword">this</span>);</span><br><span class="line">            m_Children.Add(node);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_Children.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            m_Children[i].AddChild(node, parentKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedPoint <span class="title">GetChild</span>(<span class="params"><span class="built_in">string</span> subKey</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_SubKey.Equals(subKey))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_Children == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_Children.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            RedPoint node = m_Children[i].GetChild(subKey);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveChild</span>(<span class="params"><span class="built_in">string</span> subKey</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_SubKey.Equals(subKey))</span><br><span class="line">        &#123;</span><br><span class="line">            m_Parent.children.Remove(<span class="keyword">this</span>);</span><br><span class="line">            Dispose();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_Children == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_Children.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            m_Children[i].RemoveChild(subKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetParent</span>(<span class="params">RedPoint parent</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_Parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetState</span>(<span class="params"><span class="built_in">string</span> subKey, RedPointState state, <span class="built_in">int</span> data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedPoint node = GetChild(subKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.SetTreeState(subKey, state, data);</span><br><span class="line"></span><br><span class="line">        m_Data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_Children.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            m_Data += m_Children[i].m_Data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_ShowEvent?.Invoke(m_State, m_Data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetTreeState</span>(<span class="params"><span class="built_in">string</span> subKey, RedPointState state, <span class="built_in">int</span> data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_State = state;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_SubKey.Equals(subKey))</span><br><span class="line">        &#123;</span><br><span class="line">            m_Data = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m_Data = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_Children.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (m_Children[i].state == RedPointState.Show)</span><br><span class="line">                &#123;</span><br><span class="line">                    m_State = RedPointState.Show;</span><br><span class="line">                    m_Data += m_Children[i].data;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_Parent != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_Parent.SetTreeState(subKey, state, data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_ShowEvent?.Invoke(m_State, m_Data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnClick</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (m_Type == RedPointType.Once)</span><br><span class="line">        &#123;</span><br><span class="line">            HideChildren();</span><br><span class="line">            SetState(m_SubKey, RedPointState.Hide, m_Data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HideChildren</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_State = RedPointState.Hide;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_Children.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            m_Children[i].HideChildren();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_ShowEvent?.Invoke(m_State, m_Data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_Children.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            m_Children[i].Dispose();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_Children.Clear();</span><br><span class="line">        m_Children = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (m_Btn != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            m_Btn.onClick.RemoveListener(OnClick);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_Btn = <span class="literal">null</span>;</span><br><span class="line">        m_Parent = <span class="literal">null</span>;</span><br><span class="line">        m_Key = <span class="literal">null</span>;</span><br><span class="line">        m_SubKey = <span class="literal">null</span>;</span><br><span class="line">        m_ShowEvent = <span class="literal">null</span>;</span><br><span class="line">        m_Type = RedPointType.None;</span><br><span class="line">        m_State = RedPointState.None;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> m_Key = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> m_SubKey = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> m_IsRoot = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> m_Data = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> RedPointType m_Type = RedPointType.None;</span><br><span class="line">    <span class="keyword">private</span> RedPointState m_State = RedPointState.None;</span><br><span class="line">    <span class="keyword">private</span> Action&lt;RedPointState, <span class="built_in">int</span>&gt; m_ShowEvent = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Button m_Btn;</span><br><span class="line">    <span class="keyword">private</span> RedPoint m_Parent = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;RedPoint&gt; m_Children = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里面key就是归属，也就是属于哪一个大功能，subKey是自己的关键字。</p><br><hr><br><p>然后需要一个管理器来管理游戏中所有红点的根节点，需要的时候通过关键字找到红点的根节点，再向其中的某个节点插入子节点。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RedPointMgr</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RedPointMgr instance</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s_Instance == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                s_Instance = <span class="keyword">new</span> RedPointMgr();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> s_Instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedPointMgr</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        m_ListRedPointTrees = <span class="keyword">new</span> List&lt;RedPoint&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">string</span> subKey, <span class="built_in">string</span> parentKey, RedPointType type</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedPoint root = GetRoot(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(subKey) || key.Equals(subKey))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (root != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(<span class="string">&quot;The red point root [&quot;</span> + key + <span class="string">&quot;] is already exist!&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            root = <span class="keyword">new</span> RedPoint(key, key, <span class="literal">true</span>, type);</span><br><span class="line">            m_ListRedPointTrees.Add(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Debug.LogError(<span class="string">&quot;The red point root [&quot;</span> + key + <span class="string">&quot;] is invalid,please add it first&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            RedPoint node = <span class="keyword">new</span> RedPoint(key, subKey, <span class="literal">false</span>, type);</span><br><span class="line">            root.AddChild(node, parentKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">string</span> subKey</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(subKey) || key.Equals(subKey))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = m_ListRedPointTrees.Count - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (m_ListRedPointTrees[i].key.Equals(key))</span><br><span class="line">                &#123;</span><br><span class="line">                    m_ListRedPointTrees[i].Dispose();</span><br><span class="line">                    m_ListRedPointTrees.RemoveAt(i);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RedPoint root = GetRoot(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.RemoveChild(subKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Init</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">string</span> subKey, Action&lt;RedPointState, <span class="built_in">int</span>&gt; showEvent, Button btn = <span class="literal">null</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedPoint root = GetRoot(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">&quot;The red point root [&quot;</span> + key + <span class="string">&quot;] is invalid,please add it first&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        RedPoint node = root.GetChild(subKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">&quot;The red point node [&quot;</span> + subKey + <span class="string">&quot;] is invalid,please add it first&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        node.Init(showEvent, btn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetState</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">string</span> subKey, RedPointState state, <span class="built_in">int</span> data = <span class="number">0</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedPoint root = GetRoot(key);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.LogError(<span class="string">&quot;The red point root [&quot;</span> + key + <span class="string">&quot;] is invalid,please add it first&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.SetState(subKey, state, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RedPoint <span class="title">GetRoot</span>(<span class="params"><span class="built_in">string</span> key</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(key))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_ListRedPointTrees.Count; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (m_ListRedPointTrees[i].key.Equals(key))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> m_ListRedPointTrees[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = m_ListRedPointTrees.Count - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            m_ListRedPointTrees[i].Dispose();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        m_ListRedPointTrees.Clear(); ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RedPointMgr s_Instance = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> List&lt;RedPoint&gt; m_ListRedPointTrees = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用时，先在游戏初始化的时候调用Add方法声明有哪些红点构建红点树；然后在UI界面初始化时调用Init方法加入红点的显示和点击的回调；最后在功能逻辑处调用SetState方法。</p><br><h2 id="实例测试">实例测试</h2><br><p>例如：现在有mail1、mail2、mail3、mail4、mail5、mail6需要红点提示，mail4、mail5、mail6是具体业务管理的且都是mail3的子节点，mial1、mail2、mail3要随着他们的子节点变化。</p><p>先构建，再初始化，最后写显示回调。（一顿操作猛如虎，一看工资2k5））</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> GameObject mail1RedPoint;</span><br><span class="line">    <span class="keyword">public</span> GameObject mail2RedPoint;</span><br><span class="line">    <span class="keyword">public</span> GameObject mail3RedPoint;</span><br><span class="line">    <span class="keyword">public</span> GameObject mail4RedPoint;</span><br><span class="line">    <span class="keyword">public</span> GameObject mail5RedPoint;</span><br><span class="line">    <span class="keyword">public</span> GameObject mail6RedPoint;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Text txtMail1;</span><br><span class="line">    <span class="keyword">public</span> Text txtMail2;</span><br><span class="line">    <span class="keyword">public</span> Text txtMail3;</span><br><span class="line">    <span class="keyword">public</span> Text txtMail4;</span><br><span class="line">    <span class="keyword">public</span> Text txtMail5;</span><br><span class="line">    <span class="keyword">public</span> Text txtMail6;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Button mail4Btn;</span><br><span class="line">    <span class="keyword">public</span> Button mail5Btn;</span><br><span class="line">    <span class="keyword">public</span> Button mail6Btn;</span><br><span class="line">    <span class="keyword">public</span> Button btnSet1;</span><br><span class="line">    <span class="keyword">public</span> Button btnSet2;</span><br><span class="line">    <span class="keyword">public</span> Button btnSet3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> count1 = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> count2 = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> count3 = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> mail1 = <span class="string">&quot;mail1&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> mail2 = <span class="string">&quot;mail2&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> mail3 = <span class="string">&quot;mail3&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> mail4 = <span class="string">&quot;mail4&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> mail5 = <span class="string">&quot;mail5&quot;</span>;</span><br><span class="line">    <span class="built_in">string</span> mail6 = <span class="string">&quot;mail6&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//在实际开发中，整个游戏的红点树要在游戏初始化时全部构建出来</span></span><br><span class="line">        <span class="comment">//声明mail1根节点，它的主key是mail1，无subKey，无父节点，红点类型是随着子节点变化</span></span><br><span class="line">        RedPointMgr.instance.Add(mail1, <span class="literal">null</span>, <span class="literal">null</span>, RedPointType.Enternal);</span><br><span class="line">        <span class="comment">//声明mail2节点，它的主key是mail1，subKey是mail2，父节点是mail1，红点类型是随着子节点变化</span></span><br><span class="line">        RedPointMgr.instance.Add(mail1, mail2, mail1, RedPointType.Enternal);</span><br><span class="line">        <span class="comment">//声明mail3节点，它的主key是mail1，subKey是mail3，父节点是mail2，红点类型是随着子节点变化</span></span><br><span class="line">        RedPointMgr.instance.Add(mail1, mail3, mail2, RedPointType.Enternal);</span><br><span class="line">        <span class="comment">//声明mai4节点，它的主key是mail1，subKey是mail4，父节点是mail3，红点类型是点击即消失</span></span><br><span class="line">        RedPointMgr.instance.Add(mail1, mail4, mail3, RedPointType.Once);</span><br><span class="line">        <span class="comment">//声明mai5节点，它的主key是mail1，subKey是mail5，父节点是mail3，红点类型是点击即消失</span></span><br><span class="line">        RedPointMgr.instance.Add(mail1, mail5, mail3, RedPointType.Once);</span><br><span class="line">        <span class="comment">//声明mai5节点，它的主key是mail1，subKey是mail6，父节点是mail3，红点类型是点击即消失</span></span><br><span class="line">        RedPointMgr.instance.Add(mail1, mail6, mail3, RedPointType.Once);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在实际开发中，初始化代码要写在对应UI界面的初始化函数中</span></span><br><span class="line">        RedPointMgr.instance.Init(mail1, mail1, OnMail1Show);</span><br><span class="line">        RedPointMgr.instance.Init(mail1, mail2, OnMail2Show);</span><br><span class="line">        RedPointMgr.instance.Init(mail1, mail3, OnMail3Show);</span><br><span class="line">        RedPointMgr.instance.Init(mail1, mail4, OnMail4Show, mail4Btn);</span><br><span class="line">        RedPointMgr.instance.Init(mail1, mail5, OnMail5Show, mail5Btn);</span><br><span class="line">        RedPointMgr.instance.Init(mail1, mail6, OnMail6Show, mail6Btn);</span><br><span class="line"></span><br><span class="line">        btnSet1.onClick.AddListener(OnBtnSet1Click);</span><br><span class="line">        btnSet2.onClick.AddListener(OnBtnSet2Click);</span><br><span class="line">        btnSet3.onClick.AddListener(OnBtnSet3Click);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMail1Show</span>(<span class="params">RedPointState state, <span class="built_in">int</span> data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        mail1RedPoint.SetActive(state == RedPointState.Show);</span><br><span class="line">        txtMail1.text = data.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMail2Show</span>(<span class="params">RedPointState state, <span class="built_in">int</span> data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        mail2RedPoint.SetActive(state == RedPointState.Show);</span><br><span class="line">        txtMail2.text = data.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMail3Show</span>(<span class="params">RedPointState state, <span class="built_in">int</span> data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        mail3RedPoint.SetActive(state == RedPointState.Show);</span><br><span class="line">        txtMail3.text = data.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMail4Show</span>(<span class="params">RedPointState state, <span class="built_in">int</span> data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        mail4RedPoint.SetActive(state == RedPointState.Show);</span><br><span class="line">        txtMail4.text = data.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMail5Show</span>(<span class="params">RedPointState state, <span class="built_in">int</span> data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        mail5RedPoint.SetActive(state == RedPointState.Show);</span><br><span class="line">        txtMail5.text = data.ToString();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnMail6Show</span>(<span class="params">RedPointState state, <span class="built_in">int</span> data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        mail6RedPoint.SetActive(state == RedPointState.Show);</span><br><span class="line">        txtMail6.text = data.ToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnBtnSet1Click</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedPointMgr.instance.SetState(mail1, mail4, count1 == <span class="number">0</span> ? RedPointState.Hide : RedPointState.Show, count1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnBtnSet2Click</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedPointMgr.instance.SetState(mail1, mail5, count2 == <span class="number">0</span> ? RedPointState.Hide : RedPointState.Show, count2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnBtnSet3Click</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedPointMgr.instance.SetState(mail1, mail6, count3 == <span class="number">0</span> ? RedPointState.Hide : RedPointState.Show, count3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>RedPointMgr.instance.SetState方法的第三个参数是显示在红点上的数字，也是业务需要统计的数据，如果只显示红点不显示数字就不用传了。</p></blockquote><p>运行Test脚本，效果如下</p><p><img src= "/images/lazyload.webp" data-lazy-src="/post/bef15f1e/example.gif" alt="Example"></p><br><h2 id="结语">结语</h2><br><p>以上是红点系统的简单实现，写这篇东西也是因为见到我的大神同事竟然手写每一个红点，这实在是令我惊叹不已。</p><p>我可不想写那么多的cv代码。</p>]]></content>
      
      
      <categories>
          
          <category> Unity游戏开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156/"/>
      <url>/post/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>今天终于使用hexo搭建了自己的博客，按照第一个程序都是hello world的惯例，hexo也默认第一篇文章名字叫hello world，正好我也不用改了。</p><p>光是看着这个标题脑海里就不断涌现出刚开始学编程时的记忆，那时候班级里人手抱着一本大红色封面的《谭浩强c++》每天对着个dev窗口研究那些晦涩的代码。</p><p>时光荏苒，岁月穿梭，当年那些毛头小子都开始朝着油腻大叔发展：换上格子衫，蓄起长头发，眼镜片越来越厚，背包里东西越来越少到最后只装一台笔电。</p><p>所谓一入coding深似海，从此不爱任何人正是这个道理。</p><p>说起来这个近视也是从大学开始急剧发展，本来高中的时候只有100度和一点散光。那时候只要晚上戴下眼镜就可以了，而到今天已经达到了400度，眼镜犹如第二器官。</p><p>好了，第一篇就写点闲言碎语罢了，以后这里就是我的小窝了，好东西烂东西都往里面堆就完事了😅。</p>]]></content>
      
      
      <categories>
          
          <category> hexo博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
